1:
  1. Introduction:
    count: 1
    mappings:
      95af63e5be1eb9d5ee2a273df65ae7eb2d21b5bd1aaaf3cc450b6e3f1332a5c1:
      - major: '3'
        minor: '0'
        term: '3.0'
        title: 1. Introduction
        txt: "\n1. Introduction\n\n1.1 Overview\n\nConventional identity\nmanagement\
          \ systems are based on centralized authorities such as\ncorporate directory\
          \ services\n  , certificate\nauthorities , or domain name\nregistries .\
          \ From the standpoint of cryptographic trust\nverification, each of these\
          \ centralized authorities serves as its own\n  root of trust .\nTo make\
          \ identity management work across these systems requires\nimplementing federated\
          \ identity\nmanagement .\n\n\nThe emergence of distributed ledger technology\
          \ (DLT), sometimes referred\nto as blockchain technology, provides the opportunity\
          \ to implement fully\ndecentralized identity management. In this ecosystem,\
          \ all participants\nwith identities (called identity owners) share a common\
          \ root of trust in\nthe form of a globally distributed ledger (or a decentralized\
          \ P2P\nnetwork that provides similar capabilities).\n\n\nEach identity owner\
          \ can be identified on a ledger with a key-value\npair . The index key is\
          \ a DID (decentralized identifier) and the\nvalue is its associated DDO\
          \ (DID description object). Together these\nform a DID record. Each DID\
          \ record is cryptographically secured by\nprivate keys under the control\
          \ of an identity owner (in the case of an\nowner-managed identity) or a\
          \ guardian (in the case of a guardian-managed\nidentity). A corresponding\
          \ public key is published in the DDO using a\nkey description. A DDO may\
          \ also contain a set of service endpoints for\ninteracting with the identity\
          \ owner. Following the dictums of Privacy by Design\n  , each identity owner\
          \ may have as many DID records as necessary, to\nrespect the identity owner\u2019\
          s desired separation of identities, personas,\nand contexts.\n\n\nTo use\
          \ a DID with a particular distributed ledger or network requires\ndefining\
          \ a DID method in a separate DID method specification. A DID\nmethod specifies\
          \ the set of rules for how a DID is registered, resolved,\nupdated, and\
          \ revoked on that specific ledger or network.\n\n\nThis design eliminates\
          \ dependence on centralized registries for\nidentifiers as well as centralized\
          \ certificate authorities for key\nmanagement\u2014the standard pattern\
          \ in hierarchical PKI (public\nkey infrastructure ). Because DID records\
          \ are on a distributed\nledger, each identity owner may serve as its own\
          \ root authority\u2014an\narchitecture referred to as \nDPKI (decentralized\
          \ PKI) .\n\n\nNote that DID methods may also be developed for identities\
          \ registered in\nfederated identity management systems. For their part,\
          \ federated\nidentity systems may add support for DIDs. This creates an\n\
          interoperability bridge between the worlds of centralized, federated,\n\
          and decentralized identity.\n\n\n\n1.2. URIs, URLs, and URNs\n\nDIDs have\
          \ a foundation in URIs, so it's important to understand how the\nW3C clarified\n\
          \  \_the terms URI (Uniform Resource Identifier), URL (Uniform Resource\n\
          Locator), and URN (Uniform Resource Name) in September 2001. The key\ndifference\
          \ between these three categories of identifiers are:\n\n\nURI is the term\
          \ for any type of identifier used to identify a\nresource on the Web.\n\
          \  \nURL is the term for any type of URI that can be resolved or\nde-referenced\
          \ to locate a representation of a resource on the Web (e.g.,\nWeb page,\
          \ file, image, etc.)\n  \nURN is the term for a specific type of URI intended\
          \ to persistently\nidentify a resource, i.e., an identifier that will never\
          \ change no\nmatter how often the resource moves, changes names, changes\
          \ owners, etc.\nURNs are intended to last forever.\n  \n\n\n\n1.3. Motivations\
          \ for DIDs\n\nThe growing need for decentralized identity has produced three\
          \ specific\nrequirements for a new type of URI that still fits within URI/URL/URN\n\
          architecture but in a less than traditional way:\n\n\nA URI that is persistent\
          \ like a URN yet can be resolved or\nde-referenced to locate a resource\
          \ like a URL. In essence, a DID is a\nURI that serves both functions.\n\
          \  \nA URI that does not require a centralized authority to register,\n\
          resolve, update, or revoke. The overwhelming majority of URIs today are\n\
          based on DNS names or IP addresses that depend on centralized\nauthorities\
          \ for registration and ultimate control. DIDs can be created\nand managed\
          \ without any such authority.\n  \nA URI whose ownership and associated\
          \ metadata, including public\nkeys, can be cryptographically verified. Control\
          \ of DIDs and DDOs\nleverages the same public/private key cryptography as\
          \ distributed\nledgers.\n  \n\n\n\n1.4 The Role of Human-Friendly Identifiers\n\
          \nDIDs achieve global uniqueness without the need for a central\nregistration\
          \ authority. This comes, however, at the cost of human\nmemorability. The\
          \ algorithms capable of generating globally unique\nidentifiers automatically\
          \ produce random strings of characters that have\nno human meaning. This\
          \ demonstrates the axiom about identifiers known as\n  Zooko\u2019s\nTriangle\
          \ : \"human-meaningful, decentralized, secure\u2014pick any two\".\n\n\n\
          There are of course many use cases where it is desirable to discover a\n\
          DID when starting from a human-friendly identifier\u2014a natural language\n\
          name, a domain name, or a conventional address for a DID owner such as a\n\
          mobile telephone number, email address, Twitter handle, or blog URL.\nHowever,\
          \ the problem of mapping human-friendly identifiers to DIDs (and\ndoing\
          \ so in a way that can be verified and trusted) is out-of-scope for\nthis\
          \ specification.\n\n\nSolutions to this problem (and there are many) should\
          \ be defined in\nseparate specifications that reference this specification.\
          \ It is\nstrongly recommended that such specifications carefully consider:\
          \ (a)\nthe numerous security attacks based on deceiving users about the\
          \ true\nhuman-friendly identifier for a target entity, and (b) the privacy\n\
          consequences of using human-friendly identifiers that are inherently\ncorrelatable,\
          \ especially if they are globally unique.\n\n\n\n1.5. Purpose of This Specification\n\
          \nThe first purpose of this specification is to define the generic DID\n\
          scheme and a generic set of operations on DID records that can be\nimplemented\
          \ for any distributed ledger or network capable of accepting\nDID records.\
          \ The second purpose of this specification to define the\nconformance requirements\
          \ for a DID method specification\u2014a separate\nspecification that defines\
          \ a specific DID scheme and specific set of DID\nrecord operations for a\
          \ specific distributed ledger or network.\n\n\nConceptually, the relationship\
          \ of this specification and a DID method\nspecification is similar to the\
          \ relationship of the IETF generic URI\nspecification ( RFC\n3986 ) and\
          \ a specific URI\nscheme \_(such as the http: and https: schemes specified\
          \ in RFC 7230 ). It is also similar to\nthe relationship of the IETF generic\
          \ URN specification ( RFC 2141 ) and a specific URN\nnamespace definition\
          \ (such as the UUID URN namespace defined in RFC 4122 ). The difference\
          \ is\nthat a DID method specification, in addition to defining a specific\
          \ DID\nscheme, must also specify the methods for reading, writing, and revoking\n\
          DID records on the network for which it is written.\n\n\nFor a list of DID\
          \ method specifications, see Appendix A.\n\n\n\n"
  1.1 Overview:
    count: 1
    mappings:
      454ce41e66f242e46f473ac9dd6bbcf2a00543e0ef1136ea58f5575a6323bbfb:
      - major: '3'
        minor: '1'
        term: '3.1'
        title: 1.1 Overview
        txt: "\n1.1 Overview\n\nConventional identity\nmanagement systems are based\
          \ on centralized authorities such as\ncorporate directory services\n  ,\
          \ certificate\nauthorities , or domain name\nregistries . From the standpoint\
          \ of cryptographic trust\nverification, each of these centralized authorities\
          \ serves as its own\n  root of trust .\nTo make identity management work\
          \ across these systems requires\nimplementing federated identity\nmanagement\
          \ .\n\n\nThe emergence of distributed ledger technology (DLT), sometimes\
          \ referred\nto as blockchain technology, provides the opportunity to implement\
          \ fully\ndecentralized identity management. In this ecosystem, all participants\n\
          with identities (called identity owners) share a common root of trust in\n\
          the form of a globally distributed ledger (or a decentralized P2P\nnetwork\
          \ that provides similar capabilities).\n\n\nEach identity owner can be identified\
          \ on a ledger with a key-value\npair . The index key is a DID (decentralized\
          \ identifier) and the\nvalue is its associated DDO (DID description object).\
          \ Together these\nform a DID record. Each DID record is cryptographically\
          \ secured by\nprivate keys under the control of an identity owner (in the\
          \ case of an\nowner-managed identity) or a guardian (in the case of a guardian-managed\n\
          identity). A corresponding public key is published in the DDO using a\n\
          key description. A DDO may also contain a set of service endpoints for\n\
          interacting with the identity owner. Following the dictums of Privacy by\
          \ Design\n  , each identity owner may have as many DID records as necessary,\
          \ to\nrespect the identity owner\u2019s desired separation of identities,\
          \ personas,\nand contexts.\n\n\nTo use a DID with a particular distributed\
          \ ledger or network requires\ndefining a DID method in a separate DID method\
          \ specification. A DID\nmethod specifies the set of rules for how a DID\
          \ is registered, resolved,\nupdated, and revoked on that specific ledger\
          \ or network.\n\n\nThis design eliminates dependence on centralized registries\
          \ for\nidentifiers as well as centralized certificate authorities for key\n\
          management\u2014the standard pattern in hierarchical PKI (public\nkey infrastructure\
          \ ). Because DID records are on a distributed\nledger, each identity owner\
          \ may serve as its own root authority\u2014an\narchitecture referred to\
          \ as \nDPKI (decentralized PKI) .\n\n\nNote that DID methods may also be\
          \ developed for identities registered in\nfederated identity management\
          \ systems. For their part, federated\nidentity systems may add support for\
          \ DIDs. This creates an\ninteroperability bridge between the worlds of centralized,\
          \ federated,\nand decentralized identity.\n\n\n"
  1.2. URIs, URLs, and URNs:
    count: 1
    mappings:
      72175fcd3863df91eb52819d2866ff59012daca54eef6f256b053f9de1539ab9:
      - major: '3'
        minor: '2'
        term: '3.2'
        title: 1.2. URIs, URLs, and URNs
        txt: "\n1.2. URIs, URLs, and URNs\n\nDIDs have a foundation in URIs, so it's\
          \ important to understand how the\nW3C clarified\n  \_the terms URI (Uniform\
          \ Resource Identifier), URL (Uniform Resource\nLocator), and URN (Uniform\
          \ Resource Name) in September 2001. The key\ndifference between these three\
          \ categories of identifiers are:\n\n\nURI is the term for any type of identifier\
          \ used to identify a\nresource on the Web.\n  \nURL is the term for any\
          \ type of URI that can be resolved or\nde-referenced to locate a representation\
          \ of a resource on the Web (e.g.,\nWeb page, file, image, etc.)\n  \nURN\
          \ is the term for a specific type of URI intended to persistently\nidentify\
          \ a resource, i.e., an identifier that will never change no\nmatter how\
          \ often the resource moves, changes names, changes owners, etc.\nURNs are\
          \ intended to last forever.\n  \n\n\n"
  1.3. Motivations for DIDs:
    count: 1
    mappings:
      86e5e2903b4e15be57adb15ad518da5ee3e7b04539e104dfa31990532d3064b0:
      - major: '3'
        minor: '3'
        term: '3.3'
        title: 1.3. Motivations for DIDs
        txt: "\n1.3. Motivations for DIDs\n\nThe growing need for decentralized identity\
          \ has produced three specific\nrequirements for a new type of URI that still\
          \ fits within URI/URL/URN\narchitecture but in a less than traditional way:\n\
          \n\nA URI that is persistent like a URN yet can be resolved or\nde-referenced\
          \ to locate a resource like a URL. In essence, a DID is a\nURI that serves\
          \ both functions.\n  \nA URI that does not require a centralized authority\
          \ to register,\nresolve, update, or revoke. The overwhelming majority of\
          \ URIs today are\nbased on DNS names or IP addresses that depend on centralized\n\
          authorities for registration and ultimate control. DIDs can be created\n\
          and managed without any such authority.\n  \nA URI whose ownership and associated\
          \ metadata, including public\nkeys, can be cryptographically verified. Control\
          \ of DIDs and DDOs\nleverages the same public/private key cryptography as\
          \ distributed\nledgers.\n  \n\n\n"
  1.4 The Role of Human-Friendly Identifiers:
    count: 1
    mappings:
      4e488b465cb2cdafcfa345eff1ccd143d92c7184acefd629325181140725bf7e:
      - major: '3'
        minor: '4'
        term: '3.4'
        title: 1.4 The Role of Human-Friendly Identifiers
        txt: "\n1.4 The Role of Human-Friendly Identifiers\n\nDIDs achieve global\
          \ uniqueness without the need for a central\nregistration authority. This\
          \ comes, however, at the cost of human\nmemorability. The algorithms capable\
          \ of generating globally unique\nidentifiers automatically produce random\
          \ strings of characters that have\nno human meaning. This demonstrates the\
          \ axiom about identifiers known as\n  Zooko\u2019s\nTriangle : \"human-meaningful,\
          \ decentralized, secure\u2014pick any two\".\n\n\nThere are of course many\
          \ use cases where it is desirable to discover a\nDID when starting from\
          \ a human-friendly identifier\u2014a natural language\nname, a domain name,\
          \ or a conventional address for a DID owner such as a\nmobile telephone\
          \ number, email address, Twitter handle, or blog URL.\nHowever, the problem\
          \ of mapping human-friendly identifiers to DIDs (and\ndoing so in a way\
          \ that can be verified and trusted) is out-of-scope for\nthis specification.\n\
          \n\nSolutions to this problem (and there are many) should be defined in\n\
          separate specifications that reference this specification. It is\nstrongly\
          \ recommended that such specifications carefully consider: (a)\nthe numerous\
          \ security attacks based on deceiving users about the true\nhuman-friendly\
          \ identifier for a target entity, and (b) the privacy\nconsequences of using\
          \ human-friendly identifiers that are inherently\ncorrelatable, especially\
          \ if they are globally unique.\n\n\n"
  1.5. Purpose of This Specification:
    count: 1
    mappings:
      fa3694a7d57ba9663e3855a05762144e165d4cd43508ca5fc230b38a97ce3b9c:
      - major: '3'
        minor: '5'
        term: '3.5'
        title: 1.5. Purpose of This Specification
        txt: "\n1.5. Purpose of This Specification\n\nThe first purpose of this specification\
          \ is to define the generic DID\nscheme and a generic set of operations on\
          \ DID records that can be\nimplemented for any distributed ledger or network\
          \ capable of accepting\nDID records. The second purpose of this specification\
          \ to define the\nconformance requirements for a DID method specification\u2014\
          a separate\nspecification that defines a specific DID scheme and specific\
          \ set of DID\nrecord operations for a specific distributed ledger or network.\n\
          \n\nConceptually, the relationship of this specification and a DID method\n\
          specification is similar to the relationship of the IETF generic URI\nspecification\
          \ ( RFC\n3986 ) and a specific URI\nscheme \_(such as the http: and https:\
          \ schemes specified in RFC 7230 ). It is also similar to\nthe relationship\
          \ of the IETF generic URN specification ( RFC 2141 ) and a specific URN\n\
          namespace definition (such as the UUID URN namespace defined in RFC 4122\
          \ ). The difference is\nthat a DID method specification, in addition to\
          \ defining a specific DID\nscheme, must also specify the methods for reading,\
          \ writing, and revoking\nDID records on the network for which it is written.\n\
          \n\nFor a list of DID method specifications, see Appendix A.\n\n\n"
  10. Privacy Considerations:
    count: 1
    mappings:
      0e81dc3421307ee4f01a3687b41a04f1aa195e253b3cb4ef171a09172d2ba135:
      - major: '12'
        minor: '0'
        term: '12.0'
        title: 10. Privacy Considerations
        txt: "\n10. Privacy Considerations\n\n\n    \n      It is critically important\
          \ to apply the principles of Privacy by Design to all aspects of decentralized\
          \ identity architecture, because DIDs and DDOs are\u2014by design\u2014\
          administered directly by their owners. There is no registrar, hosting company,\
          \ or other intermediate service provider to recommend or apply additional\
          \ privacy safeguards.\n\n    \n      The authors of this specification have\
          \ applied all seven Privacy by Design principles throughout its development.\
          \ For example, privacy in this specification is preventative not remedial,\
          \ and privacy is an embedded default. Furthermore, decentralized identity\
          \ architecture by itself embodies principle #7, \"Respect for user privacy\u2014\
          keep it user-centric.\"\n\n    \n      This section lists additional privacy\
          \ considerations that implementers, guardians, and identity owners should\
          \ bear in mind.\n\n\n\n\n\n10.1 Requirements of DID Method Specifications\n\
          \n\n\n\n\nDID method specifications MUST include their own Privacy\nConsiderations\
          \ sections, if only to point to the general privacy\nconsiderations in this\
          \ section.\n  \nThe DID method privacy section MUST discuss any subsection\
          \ of\nsection 5 of RFC 6973t\n  \_that could apply in a method-specific\
          \ manner. The subsections to\nconsider are: surveillance, stored data compromise,\
          \ unsolicited traffic,\nmisattribution, correlation, identification, secondary\
          \ use, disclosure,\nexclusion.\n  \n\n\n\n\n\n\n\n\n10.2 Keep Personally-Identifiable\
          \ Information (PII) Off-Ledger\n\n\n    \n      If a DID method specification\
          \ is written for a public ledger or network where all DIDs and DDOs will\
          \ be publicly available, it is STRONGLY RECOMMENDED that DDOs contain no\
          \ PII. All PII should be kept off-ledger behind service endpoints under\
          \ the control of the identity owner. With this privacy architecture, PII\
          \ may be exchanged on a private, peer-to-peer basis using communications\
          \ channels identified and secured by key descriptions in DID records. This\
          \ also enables identity owners and relying parties to implement the\n  \
          \      GDPR\n\n        right to be forgotten\n      , as no PII will be\
          \ written to an immutable ledger.\n\n\n\n\n\n\n10.3 DID Correlation Risks\
          \ and Pseudonymous DIDs\n\n\n    \n      Like any type of globally unique\
          \ identifier, DIDs may be used for correlation. Identity owners can mitigate\
          \ this privacy risk by using pairwise unique DIDs, i.e., by sharing a different\
          \ private DID for every relationship. In effect, each DID acts as a pseudonym.\
          \ A pseudonymous DID need only be shared with more than one party when the\
          \ identity owner explicitly authorizes correlation between those parties.\n\
          \n    \n      If pseudonymous DIDs are the default, then the only need for\
          \ a public DID\u2014a DID published openly or shared with a large number\
          \ of parties\u2014is when the identity owner explicitly desires public identification.\n\
          \n\n\n\n\n\n10.4 DDO Correlation Risks\n\n\n    \n      The anti-correlation\
          \ protections of pseudonymous DIDs are easily defeated if the data in the\
          \ corresponding DDOs can be correlated. For example, using same public key\
          \ descriptions or bespoke service endpoints in multiple DDOs can provide\
          \ as much correlation information as using the same DID. Therefore the DDO\
          \ for a pseudonymous DID SHOULD also use pairwise-unique public keys and\
          \ pairwise-unique service endpoints.\n\n\n\n\n\n\n10.5 Herd Privacy\n\n\n\
          \    \n      When an entity is indistinguishable from others in the herd,\
          \ privacy is available. When the act of engaging privately with another\
          \ party is by itself a recognizable flag, privacy is greatly diminished.\n\
          \n    \n      DIDs and DID methods SHOULD work to improve herd privacy,\
          \ particularly for those who legitimately need it most. Choose technologies\
          \ and human interfaces that default to preserving anonymity and pseudonymity.\
          \ In order to reduce\n        digital fingerprints\n      , share common\
          \ settings across client implementations, keep negotiated options to a minimum\
          \ on wire protocols, use encrypted transport layers, and pad messages to\
          \ standard lengths.\n\n\n\n\n\n\n"
  10.1 Requirements of DID Method Specifications:
    count: 1
    mappings:
      8d4061867bf5c9b7d00368bb155db40ef051a1bccbcc9d447ef2be34b144d126:
      - major: '12'
        minor: '1'
        term: '12.1'
        title: 10.1 Requirements of DID Method Specifications
        txt: "\n10.1 Requirements of DID Method Specifications\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Privacy\nConsiderations sections,\
          \ if only to point to the general privacy\nconsiderations in this section.\n\
          \  \nThe DID method privacy section MUST discuss any subsection of\nsection\
          \ 5 of RFC 6973t\n  \_that could apply in a method-specific manner. The\
          \ subsections to\nconsider are: surveillance, stored data compromise, unsolicited\
          \ traffic,\nmisattribution, correlation, identification, secondary use,\
          \ disclosure,\nexclusion.\n  \n\n\n\n\n\n\n\n"
  10.2 Keep Personally-Identifiable Information (PII) Off-Ledger:
    count: 1
    mappings:
      daad2a70645855dab044ccb51bcafd3921ffe0f44ae6fb9e29f1d69307d08b2e:
      - major: '12'
        minor: '2'
        term: '12.2'
        title: 10.2 Keep Personally-Identifiable Information (PII) Off-Ledger
        txt: "\n10.2 Keep Personally-Identifiable Information (PII) Off-Ledger\n\n\
          \n    \n      If a DID method specification is written for a public ledger\
          \ or network where all DIDs and DDOs will be publicly available, it is STRONGLY\
          \ RECOMMENDED that DDOs contain no PII. All PII should be kept off-ledger\
          \ behind service endpoints under the control of the identity owner. With\
          \ this privacy architecture, PII may be exchanged on a private, peer-to-peer\
          \ basis using communications channels identified and secured by key descriptions\
          \ in DID records. This also enables identity owners and relying parties\
          \ to implement the\n        GDPR\n\n        right to be forgotten\n    \
          \  , as no PII will be written to an immutable ledger.\n\n\n\n\n\n"
  10.3 DID Correlation Risks and Pseudonymous DIDs:
    count: 1
    mappings:
      6cae8ab2d1aa087b1f1ee223250cdacf7fb5046f03f53ab1f7a1d3528cafd79b:
      - major: '12'
        minor: '3'
        term: '12.3'
        title: 10.3 DID Correlation Risks and Pseudonymous DIDs
        txt: "\n10.3 DID Correlation Risks and Pseudonymous DIDs\n\n\n    \n     \
          \ Like any type of globally unique identifier, DIDs may be used for correlation.\
          \ Identity owners can mitigate this privacy risk by using pairwise unique\
          \ DIDs, i.e., by sharing a different private DID for every relationship.\
          \ In effect, each DID acts as a pseudonym. A pseudonymous DID need only\
          \ be shared with more than one party when the identity owner explicitly\
          \ authorizes correlation between those parties.\n\n    \n      If pseudonymous\
          \ DIDs are the default, then the only need for a public DID\u2014a DID published\
          \ openly or shared with a large number of parties\u2014is when the identity\
          \ owner explicitly desires public identification.\n\n\n\n\n\n"
  10.4 DDO Correlation Risks:
    count: 1
    mappings:
      5cb0b32edc0da9f4e38324585450fe0ab946f9daa2461e2d39f7037f8ad8ae1f:
      - major: '12'
        minor: '4'
        term: '12.4'
        title: 10.4 DDO Correlation Risks
        txt: "\n10.4 DDO Correlation Risks\n\n\n    \n      The anti-correlation protections\
          \ of pseudonymous DIDs are easily defeated if the data in the corresponding\
          \ DDOs can be correlated. For example, using same public key descriptions\
          \ or bespoke service endpoints in multiple DDOs can provide as much correlation\
          \ information as using the same DID. Therefore the DDO for a pseudonymous\
          \ DID SHOULD also use pairwise-unique public keys and pairwise-unique service\
          \ endpoints.\n\n\n\n\n\n"
  10.5 Herd Privacy:
    count: 1
    mappings:
      4707663441682facadf5c4b5fd277375643e9fac8203e12a36ac4fc385f8e159:
      - major: '12'
        minor: '5'
        term: '12.5'
        title: 10.5 Herd Privacy
        txt: "\n10.5 Herd Privacy\n\n\n    \n      When an entity is indistinguishable\
          \ from others in the herd, privacy is available. When the act of engaging\
          \ privately with another party is by itself a recognizable flag, privacy\
          \ is greatly diminished.\n\n    \n      DIDs and DID methods SHOULD work\
          \ to improve herd privacy, particularly for those who legitimately need\
          \ it most. Choose technologies and human interfaces that default to preserving\
          \ anonymity and pseudonymity. In order to reduce\n        digital fingerprints\n\
          \      , share common settings across client implementations, keep negotiated\
          \ options to a minimum on wire protocols, use encrypted transport layers,\
          \ and pad messages to standard lengths.\n\n\n\n\n\n"
  11. Future Work:
    count: 1
    mappings:
      c4a5c2615082bdc3ac5e684d168fdcfd651d0391cbc5e9fa7432b5b02a61d6d8:
      - major: '13'
        minor: '0'
        term: '13.0'
        title: 11. Future Work
        txt: "\n11. Future Work\n\n11.1 Upper Limits on DID Character Length\n\n\n\
          \    \n      The current specification does not take a position on maximum\
          \ length of a DID. The maximum interoperable URL length is currently about\
          \ 2K characters. QR codes can handle about 4K characters. Clients using\
          \ DIDs will be responsible for storing many DIDs, and some methods would\
          \ be able to externalize some of their costs onto clients by relying on\
          \ more complicated signature schemes or by adding state into DIDs intended\
          \ for temporary use. A future version of this specification should set reasonable\
          \ limits on DID character length to minimize externalities.\n\n\n\n\n\n\n\
          11.2 Equivalence\n\n\n    \n      Including an equivalence property, such\
          \ as equivID, in DDOs whose value is an array of DIDs would allow identity\
          \ owners to assert two or more DIDs that represent the same identity owner.\
          \ This capability has numerous uses, including supporting migration between\
          \ ledgers and providing forward compatibility of existing DIDs to future\
          \ DLTs. In theory, equivalent DIDs should have the same identity rights,\
          \ allowing\n        verifiable claims\n       made against one DID to apply\
          \ to equivalent DIDs.\n\n    \n      Equivalence was not included in the\
          \ current specification due to the complexity of verifying equivalence across\
          \ different DLTs and different DID methods, and also of aggregating properties\
          \ of equivalent DDOs. However equivalence should be supported in a future\
          \ version of this specification.\n\n\n\n\n\n\n11.3 Timestamps\n\n\n    \n\
          \      Verifiable timestamps have significant utility for identity records.\
          \ This is a good fit for DLTs, since most offer some type of timestamp mechanism.\
          \ Despite some transactional cost, they are the most censorship-resistant\
          \ transaction ordering systems in the world, so they are nearly ideal for\
          \ DDO timestamping. In some cases a DLT's immediate timing is approximate,\
          \ however their sense of\n        \"median time past\" (see Bitcoin BIP\
          \ 113)\n       can be precisely defined.\n\n    \n      A generic DDO timestamping\
          \ mechanism could would work across all DLTs and might operate via a mechanism\
          \ including either individual transactions or transaction batches. The generic\
          \ mechanism was deemed out of scope for this version, although it may be\
          \ included in a future version of this specification.\n\n\n\n\n\n\n11.4\
          \ Time Locks and DDO Recovery\n\n\n    \n      Section 9.7 mentions one\
          \ possible clever use of time locks to recover control of a DID after a\
          \ key compromise. The technique relies on an ability to override the most\
          \ recent update to a DDO with Proof of Control applied by an earlier version\
          \ of the DDO in order to defeat the attacker. This protection depends on\
          \ adding a\n        time lock (see Bitcoin BIP 65)\n       to protect part\
          \ of the transaction chain, enabling a Proof of Control block to be used\
          \ to recover control. We plan to add support for time locks in a future\
          \ version of this specification.\n\n\n\n\n\n\n11.5 Smart Signatures\n\n\n\
          \    \n      Not all DLTs can support the Proof of Control logic in section\
          \ 6.5. Therefore, in this version of the specification, all Proof of Control\
          \ logic must be delegated to DID method specifications. A potential future\
          \ solution is a\n        Smart Signature\n       specification that specifies\
          \ the code any conformant DLT may implement to process signature control\
          \ logic.\n\n\n\n\n\n\n11.6 Verifiable Claims\n\n\n    \n      Although DIDs\
          \ and DDOs form a foundation for decentralized identity, they are only the\
          \ first step in describing an identity owner. The rest of the descriptive\
          \ power comes through collecting and selectively using\n        verifiable\
          \ claims\n      . Future versions of the specification will describe in\
          \ more detail how DIDs and DDO can be integrated with\u2014and help enable\u2014\
          the verifiable claims ecosystem.\n\n\n\n\n\n\n11.7 Alternate Serializations\
          \ and Graph Models\n\n\n    \n      This version of the specification relies\
          \ on JSON-LD and the RDF graph model for expressing a DDO. Future versions\
          \ of this specification MAY specify other semantic graph formats for a DDO,\
          \ such as JXD (JSON XDI Data), a serialization format for the XDI graph\
          \ model as defined by the\n        OASIS XDI Core 1.0 specification\n  \
          \    .\n\n\n\n\n\n\n"
  11.1 Upper Limits on DID Character Length:
    count: 1
    mappings:
      199d0078f84ebe13b529db572c8d40b2e3ea75c73590b110d2b4e34b8b04cbbe:
      - major: '13'
        minor: '1'
        term: '13.1'
        title: 11.1 Upper Limits on DID Character Length
        txt: "\n11.1 Upper Limits on DID Character Length\n\n\n    \n      The current\
          \ specification does not take a position on maximum length of a DID. The\
          \ maximum interoperable URL length is currently about 2K characters. QR\
          \ codes can handle about 4K characters. Clients using DIDs will be responsible\
          \ for storing many DIDs, and some methods would be able to externalize some\
          \ of their costs onto clients by relying on more complicated signature schemes\
          \ or by adding state into DIDs intended for temporary use. A future version\
          \ of this specification should set reasonable limits on DID character length\
          \ to minimize externalities.\n\n\n\n\n\n"
  11.2 Equivalence:
    count: 1
    mappings:
      ce0f50d2e58359486cb1886b05f7721c444a9effa8472d578c6af3c92283d174:
      - major: '13'
        minor: '2'
        term: '13.2'
        title: 11.2 Equivalence
        txt: "\n11.2 Equivalence\n\n\n    \n      Including an equivalence property,\
          \ such as equivID, in DDOs whose value is an array of DIDs would allow identity\
          \ owners to assert two or more DIDs that represent the same identity owner.\
          \ This capability has numerous uses, including supporting migration between\
          \ ledgers and providing forward compatibility of existing DIDs to future\
          \ DLTs. In theory, equivalent DIDs should have the same identity rights,\
          \ allowing\n        verifiable claims\n       made against one DID to apply\
          \ to equivalent DIDs.\n\n    \n      Equivalence was not included in the\
          \ current specification due to the complexity of verifying equivalence across\
          \ different DLTs and different DID methods, and also of aggregating properties\
          \ of equivalent DDOs. However equivalence should be supported in a future\
          \ version of this specification.\n\n\n\n\n\n"
  11.3 Timestamps:
    count: 1
    mappings:
      453880ed9784b36db3958feab17a5dee0580e35e256262622c851a70cdcc1dfb:
      - major: '13'
        minor: '3'
        term: '13.3'
        title: 11.3 Timestamps
        txt: "\n11.3 Timestamps\n\n\n    \n      Verifiable timestamps have significant\
          \ utility for identity records. This is a good fit for DLTs, since most\
          \ offer some type of timestamp mechanism. Despite some transactional cost,\
          \ they are the most censorship-resistant transaction ordering systems in\
          \ the world, so they are nearly ideal for DDO timestamping. In some cases\
          \ a DLT's immediate timing is approximate, however their sense of\n    \
          \    \"median time past\" (see Bitcoin BIP 113)\n       can be precisely\
          \ defined.\n\n    \n      A generic DDO timestamping mechanism could would\
          \ work across all DLTs and might operate via a mechanism including either\
          \ individual transactions or transaction batches. The generic mechanism\
          \ was deemed out of scope for this version, although it may be included\
          \ in a future version of this specification.\n\n\n\n\n\n"
  11.4 Time Locks and DDO Recovery:
    count: 1
    mappings:
      bfbd81343e8263cecc10c931b7461513b390d3aa61bc9d27d9d9c9c3a7a3f163:
      - major: '13'
        minor: '4'
        term: '13.4'
        title: 11.4 Time Locks and DDO Recovery
        txt: "\n11.4 Time Locks and DDO Recovery\n\n\n    \n      Section 9.7 mentions\
          \ one possible clever use of time locks to recover control of a DID after\
          \ a key compromise. The technique relies on an ability to override the most\
          \ recent update to a DDO with Proof of Control applied by an earlier version\
          \ of the DDO in order to defeat the attacker. This protection depends on\
          \ adding a\n        time lock (see Bitcoin BIP 65)\n       to protect part\
          \ of the transaction chain, enabling a Proof of Control block to be used\
          \ to recover control. We plan to add support for time locks in a future\
          \ version of this specification.\n\n\n\n\n\n"
  11.5 Smart Signatures:
    count: 1
    mappings:
      764b9c63dfdd0ca96dbff7d10a347aac0f3fa38317afc3511a5ed759bf5f89b1:
      - major: '13'
        minor: '5'
        term: '13.5'
        title: 11.5 Smart Signatures
        txt: "\n11.5 Smart Signatures\n\n\n    \n      Not all DLTs can support the\
          \ Proof of Control logic in section 6.5. Therefore, in this version of the\
          \ specification, all Proof of Control logic must be delegated to DID method\
          \ specifications. A potential future solution is a\n        Smart Signature\n\
          \       specification that specifies the code any conformant DLT may implement\
          \ to process signature control logic.\n\n\n\n\n\n"
  11.6 Verifiable Claims:
    count: 1
    mappings:
      af83802df2566a7c2e9897a6caa5de5088308c4ce2671bfcd10cffab98471d9d:
      - major: '13'
        minor: '6'
        term: '13.6'
        title: 11.6 Verifiable Claims
        txt: "\n11.6 Verifiable Claims\n\n\n    \n      Although DIDs and DDOs form\
          \ a foundation for decentralized identity, they are only the first step\
          \ in describing an identity owner. The rest of the descriptive power comes\
          \ through collecting and selectively using\n        verifiable claims\n\
          \      . Future versions of the specification will describe in more detail\
          \ how DIDs and DDO can be integrated with\u2014and help enable\u2014the\
          \ verifiable claims ecosystem.\n\n\n\n\n\n"
  11.7 Alternate Serializations and Graph Models:
    count: 1
    mappings:
      66b61a9a335722842017e1819e38a6955018bb51e7f4536d3b6e912791bf53bc:
      - major: '13'
        minor: '7'
        term: '13.7'
        title: 11.7 Alternate Serializations and Graph Models
        txt: "\n11.7 Alternate Serializations and Graph Models\n\n\n    \n      This\
          \ version of the specification relies on JSON-LD and the RDF graph model\
          \ for expressing a DDO. Future versions of this specification MAY specify\
          \ other semantic graph formats for a DDO, such as JXD (JSON XDI Data), a\
          \ serialization format for the XDI graph model as defined by the\n     \
          \   OASIS XDI Core 1.0 specification\n      .\n\n\n\n\n\n"
  12. References:
    count: 1
    mappings:
      8faf8096a9adc1d1116650f5038c49eb0b440a6656a62cae9acca0b967013564:
      - major: '14'
        minor: '0'
        term: '14.0'
        title: 12. References
        txt: "\n12. References\n\n\n    \n      [ABNF] Augmented BNF for Syntax Specifications:\
          \ ABNF. IETF RFC 5234.\n        https://tools.ietf.org/html/rfc5234\n\n\
          \    \n      [IRI] Internationalized Resource Identifiers. IETF RFC 3987.\n\
          \        https://www.ietf.org/rfc/rfc3987.txt\n\n    \n      [JSON] The\
          \ JavaScript Object Notation (JSON) Data Interchange Format\n        https://tools.ietf.org/html/rfc7159\n\
          \n    \n      [JSON-LD] JSON-LD 1.0.\n        http://www.w3.org/TR/json-ld/\n\
          \n    \n      [LINKED-DATA-SIGNATURES] Draft Community Group Report\n  \
          \      https://w3c-dvcg.github.io/ld-signatures/\n\n    \n      [RFC 3552]\
          \ Guidelines for Writing RFC Text on Security Considerations. IETF RFC 3552.\n\
          \        https://tools.ietf.org/html/rfc3552\n\n    \n      [RFC 6973] Privacy\
          \ Considerations for Internet Protocols. IETF RFC 6973.\n        https://tools.ietf.org/html/rfc6973\n\
          \n    \n      [RFC-KEYWORDS] Key words for use in RFCs to Indicate Requirement\
          \ Levels. IETF RFC 2119.\n        https://www.ietf.org/rfc/rfc2119.txt\n\
          \n    \n      [SBIR-TOPIC] Applicability of Blockchain Technology to Privacy\
          \ Respecting Identity Management. U.S Department of Homeland Security Small\
          \ Business Innovation Research Grant.\n        https://www.sbir.gov/sbirsearch/detail/867797\n\
          \n    \n      [URI] Uniform Resource Identifiers. IETF RFC 3986.\n     \
          \   https://www.ietf.org/rfc/rfc3986.txt\n\n    \n      [URN] URN (Uniform\
          \ Resource Name) Syntax. IETF RFC 2141.\n        https://tools.ietf.org/rfc/rfc2141.txt\n\
          \n    \n      [UUID] A Universally Unique IDentifier (UUID) URN Namespace.\
          \ IETF RFC 4122.\n        https://www.ietf.org/rfc/rfc4122.txt\n\n    \n\
          \      [VCTF] W3C Verifiable Claims Task Force.\n        http://opencreds.org/specs/source/claims-data-model/#expressing-entity-credentials-in-json\n\
          \n    \n      [XDI-CORE] OASIS XDI Core 1.0 Specification Working Draft\
          \ 01\n        http://docs.oasis-open.org/xdi/xdi-core/v1.0/csd01/xdi-core-v1.0-csd01.xml\n\
          \n    \n      [XML-DATETIME] W3C XML Schema Definition Language (XSD) 1.1\
          \ Part 2: Datatypes. W3C Recommendation.\n        https://www.w3.org/TR/xmlschema11-2/\n\
          \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n"
  2. Example DIDs and DDOs:
    count: 1
    mappings:
      03d844a4f2f3c4c105e2d6950f6a779ae68a73486f7d551b1bd32c85484c0a39:
      - major: '4'
        minor: '0'
        term: '4.0'
        title: 2. Example DIDs and DDOs
        txt: "\n2. Example DIDs and DDOs\n\nThis is an example of a DID:\n\n\ndid:example:21tDAKCERh95uGgKbJNHYp\n\
          \n\n2.1. Example Owner-Managed DDO\n\nFollowing is an example of a DDO that\
          \ describes the DID above. This\nexample assumes that the identity owner\u2014\
          the entity that controls the\nprivate keys for this identity\u2014is authoritative\
          \ for the DDO. See section\n2.2 for an example of a DDO created by a guardian.\
          \ For the authoritative\nJSON-LD context definition, see Appendix B (the\
          \ URL for the @context\nproperty below is just for illustration).\n\n\n\
          \      {\n      \"@context\": \"https://example.org/did/v1\",\n        \"\
          id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n        \"owner\": [{\n \
          \           \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-1\",\n    \
          \        \"type\": [\"CryptographicKey\", \"EdDsaPublicKey\"],\n       \
          \     \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"lji9qTtkCydxtez/bt1zdLxVMMbz4SzWvlqgOBmURoM=\"\
          \n        }, {\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyPem\"\
          : \"----BEGIN PUBLIC KEY-----\\r\\nMIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\\\
          r\\n-----END PUBLIC KEY-----\"\n        }],\n        \"control\": [{\n \
          \           \"type\": \"OrControl\",\n            \"signer\": [\n      \
          \          \"did:example:21tDAKCERh95uGgKbJNHYp\",\n                \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n            ]\n        }],\n        \"service\": {\n            \"openid\"\
          : \"https://openid.example.com/456\",\n            \"xdi\": \"https://xdi.example.com/123\"\
          \n        },\n        \"created\": \"2002-10-10T17:00:00Z\",\n        \"\
          updated\": \"2016-10-17T02:41:00Z\",\n        \"signature\": {\n       \
          \     \"type\": \"RsaSignature2016\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key/1\"\
          ,\n            \"signatureValue\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }\n      }\n\n\n\n\n2.2. Example Guardian-Managed DDO\n\nFollowing\
          \ is a second example of a DDO that describes the DID above. In\nthis case\
          \ the DDO describes a dependent\u2014an entity who is not currently\nin\
          \ a position to control the private keys for this identity. This DDO\nwas\
          \ created by a guardian\u2014a separate identity owner with its own DID\n\
          that serves as a trustee for the dependent. Note that while this DDO\nasserts\
          \ a set of service endpoints, it does not yet contain a set of key\ndescriptions\
          \ because the dependent does not yet have its own set of\nprivate keys.\n\
          \n\n      {\n      \"@context\": \"https://example.org/did/v1\",\n     \
          \   \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n        \"guardian\"\
          : \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n        \"control\": [ \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \ ],\n        \"service\": {\n            \"openid\": \"https://openid.example.com/456\"\
          ,\n            \"xdi\": \"https://xdi.example.com/123\"\n        },\n  \
          \      \"type\": \"http://schema.org/Person\",\n        \"created\": \"\
          2002-10-10T17:00:00Z\",\n        \"updated\": \"2016-10-17T02:41:00Z\",\n\
          \        \"signature\": {\n            \"type\": \"RsaSignature2016\",\n\
          \            \"created\": \"2016-02-08T16:02:20Z\",\n            \"creator\"\
          : \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key-1\",\n            \"signatureValue\"\
          : \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }\n      }\n\n\n\n\n\n\n"
  2.1. Example Owner-Managed DDO:
    count: 1
    mappings:
      2b9dca7cd48a5b51e5887ff1ef47d5c42cc399d03fe71534fac53a302c875114:
      - major: '4'
        minor: '1'
        term: '4.1'
        title: 2.1. Example Owner-Managed DDO
        txt: "\n2.1. Example Owner-Managed DDO\n\nFollowing is an example of a DDO\
          \ that describes the DID above. This\nexample assumes that the identity\
          \ owner\u2014the entity that controls the\nprivate keys for this identity\u2014\
          is authoritative for the DDO. See section\n2.2 for an example of a DDO created\
          \ by a guardian. For the authoritative\nJSON-LD context definition, see\
          \ Appendix B (the URL for the @context\nproperty below is just for illustration).\n\
          \n\n      {\n      \"@context\": \"https://example.org/did/v1\",\n     \
          \   \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n        \"owner\":\
          \ [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-1\",\n\
          \            \"type\": [\"CryptographicKey\", \"EdDsaPublicKey\"],\n   \
          \         \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"lji9qTtkCydxtez/bt1zdLxVMMbz4SzWvlqgOBmURoM=\"\
          \n        }, {\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyPem\"\
          : \"----BEGIN PUBLIC KEY-----\\r\\nMIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\\\
          r\\n-----END PUBLIC KEY-----\"\n        }],\n        \"control\": [{\n \
          \           \"type\": \"OrControl\",\n            \"signer\": [\n      \
          \          \"did:example:21tDAKCERh95uGgKbJNHYp\",\n                \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n            ]\n        }],\n        \"service\": {\n            \"openid\"\
          : \"https://openid.example.com/456\",\n            \"xdi\": \"https://xdi.example.com/123\"\
          \n        },\n        \"created\": \"2002-10-10T17:00:00Z\",\n        \"\
          updated\": \"2016-10-17T02:41:00Z\",\n        \"signature\": {\n       \
          \     \"type\": \"RsaSignature2016\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key/1\"\
          ,\n            \"signatureValue\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }\n      }\n\n\n\n"
  2.2. Example Guardian-Managed DDO:
    count: 1
    mappings:
      b365abe38de5724bc1a5e96d843144a8d5d28482e5f844a5915966b8758fe941:
      - major: '4'
        minor: '2'
        term: '4.2'
        title: 2.2. Example Guardian-Managed DDO
        txt: "\n2.2. Example Guardian-Managed DDO\n\nFollowing is a second example\
          \ of a DDO that describes the DID above. In\nthis case the DDO describes\
          \ a dependent\u2014an entity who is not currently\nin a position to control\
          \ the private keys for this identity. This DDO\nwas created by a guardian\u2014\
          a separate identity owner with its own DID\nthat serves as a trustee for\
          \ the dependent. Note that while this DDO\nasserts a set of service endpoints,\
          \ it does not yet contain a set of key\ndescriptions because the dependent\
          \ does not yet have its own set of\nprivate keys.\n\n\n      {\n      \"\
          @context\": \"https://example.org/did/v1\",\n        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n        \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n      \
          \  \"control\": [ \"did:example:8uQhQMGzWxR8vw5P3UWH1j\" ],\n        \"\
          service\": {\n            \"openid\": \"https://openid.example.com/456\"\
          ,\n            \"xdi\": \"https://xdi.example.com/123\"\n        },\n  \
          \      \"type\": \"http://schema.org/Person\",\n        \"created\": \"\
          2002-10-10T17:00:00Z\",\n        \"updated\": \"2016-10-17T02:41:00Z\",\n\
          \        \"signature\": {\n            \"type\": \"RsaSignature2016\",\n\
          \            \"created\": \"2016-02-08T16:02:20Z\",\n            \"creator\"\
          : \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key-1\",\n            \"signatureValue\"\
          : \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }\n      }\n\n\n\n\n\n"
  3. Terminology and Acronyms:
    count: 1
    mappings:
      9420fe8c0e3a31beda72afe9c0675c324661b0200b3c1e729d5359c40df6b899:
      - major: '5'
        minor: '0'
        term: '5.0'
        title: 3. Terminology and Acronyms
        txt: "\n3. Terminology and Acronyms\n\nThis specification defines the requirements\
          \ of a conformant DID method\nspecification. The key words \"MUST\", \"\
          MUST NOT\", \"REQUIRED\", \"SHALL\",\n  \"SHALL NOT\", \"SHOULD\", \"SHOULD\
          \ NOT\", \"RECOMMENDED\", \"MAY\", and\n  \"OPTIONAL\" in this document\
          \ are to be interpreted as described in\n  RFC 2119 .\n\n\nAll other terms\
          \ used in this specification are defined in this glossary.\n\n\nBlockchain.\
          \ A specific type of distributed ledger technology (DLT) that\nstores ledger\
          \ entries in blocks of transactions that are grouped\ntogether and hashed\
          \ into a cryptographic chain. Because this type of DLT\nwas introduced by\
          \ Bitcoin , the term\n  \"blockchain\" is sometimes used to refer specifically\
          \ to the Bitcoin\nledger.\n\n\nDecentralized identifier (DID). A globally\
          \ unique identifier that does\nnot require a centralized registration authority\
          \ because it is\nregistered with distributed ledger technology or other\
          \ form of\ndecentralized network. The generic format of a DID is defined\
          \ in this\nspecification. A specific DID scheme is defined in a DID method\n\
          specification.\n\n\nDecentralized identity management (DIDM). Identity\n\
          management \_based on decentralized identifiers. DIDM extends\nidentifier\
          \ creation authority beyond the traditional roots of trust\nrequired by\
          \ X.500\ndirectory services , the Domain Name\nSystem , national ID systems,\
          \ etc.\n\n\nDecentralized PKI (DPKI). Public key infrastructure based on\n\
          decentralized identifiers and identity records (e.g., DDOs) containing\n\
          verifiable public key descriptions.\n\n\nDDO. Acronym for DID descriptor\
          \ object.\n\n\nDependent. A person, organization, or thing whose DID record\
          \ is\nregistered and maintained by a guardian because the dependent is not\
          \ in\na position to control the private keys. A dependent becomes an identity\n\
          owner when the dependent takes control of the private keys.\n\n\nDID. Acronym\
          \ for decentralized identifier.\n\n\nDID descriptor object (DDO). A JSON\
          \ data structure containing metadata\ndescribing an identity owner, including\
          \ the cryptographic key material\nrequired for the identity owner to prove\
          \ ownership and control of the\nDID record. A DDO may also contain other\
          \ attributes \_or\n  claims\n  \_describing the identity owner.\n\n\nDID\
          \ fragment. The portion of a DID reference that follows the first hash\n\
          sign character (\"#\"). A DID fragment uses the same syntax as a URI\nfragment.\
          \ See section 5.5. Note that a DID fragment MUST immediately\nfollow a DID.\
          \ If a DID reference includes a DID path followed by a\nfragment, that fragment\
          \ is NOT a DID fragment.\n\n\nDID method. A definition of how a specific\
          \ DID scheme can be implemented\non a specific distributed ledger or network,\
          \ including the precise\nmethod(s) by which DIDs and DDOs can be read, written,\
          \ and revoked.\n\n\nDID method conformance profile. A specification (or\
          \ section of a\nspecification) that defines the rules an implementer must\
          \ follow in\norder to conform with another DID method specification. A conformance\n\
          profile narrows the set of options that may be used in order to meet a\n\
          specific implementation goal.\n\n\nDID method specification. The specification\
          \ for a specific DID scheme\nand DID method that is conformant with the\
          \ requirements of this\nspecification.\n\n\nDID path. The portion of a DID\
          \ reference that follows the first forward\nslash character. A DID path\
          \ uses the identical syntax as a URI path. See\nsection 5.4. Note that if\
          \ a DID path is followed by a fragment, that\nfragment is NOT a DID fragment.\n\
          \n\nDID record. The combination of a DID and a DDO that forms the \"root\n\
          identity record\" for an identity owner. From the standpoint of claims-based\n\
          identity , a DID record is the \u201Cgenesis claim\u201D for an identity.\n\
          \n\nDID reference. A DID plus an optional DID path or DID fragment.\n\n\n\
          DID scheme. The formal syntax of a DID identifier. The generic DID\nscheme\
          \ is defined in this specification. A DID method specification\ndefines\
          \ a specific DID scheme that works with a specific DID method.\n\n\nDIDM.\
          \ Acronym for decentralized identity management.\n\n\nDistributed ledger\
          \ technology (DLT). A distributed\ndatabase \_in which the various nodes\
          \ use a consensus\nprotocol \_to maintain a shared ledger in which each\
          \ transaction is\ncryptographically signed and chained to the previous transaction.\
          \ See\nalso blockchain.\n\n\nDLT. Acronym for distributed ledger technology.\n\
          \n\nDPKI. Acronym for decentralized PKI.\n\n\nGuardian. An identity owner\
          \ who creates a DID record for a dependent who\ndoes not yet have the capacity\
          \ to control the private keys. The\ndependent must rely on the guardian\
          \ to safeguard the private keys until\nthe dependent can assume control\
          \ and become an identity owner.\n\n\nIdentity owner. The natural person,\
          \ party, organization, or thing whose\nidentity is represented by a DID\
          \ record and who directly controls the\nprivate keys to control that record.\
          \ (Note: this specification avoids\nthe term \"user\" since an identity\
          \ owner is not always an individual\nperson.)\n\n\nIdentity record. Another\
          \ name for a DID record.\n\n\nJSON-LD (JSON Linked Data). A method of encoding\
          \ Linked Data \_using JSON.\nThe W3C JSON-LD 1.0\nspecification \_enables\
          \ object properties in a JSON document to be\nlinked to concepts in an RDF\
          \ ontology\n  .\n\n\nKey description. A JSON object contained inside a DDO\
          \ that contains all\nthe metadata necessary to use a public key or verification\
          \ key. A list\nof standard key descriptions is included in Appendix C.\n\
          \n\nLedger. In the context of this specification, a shared database of\n\
          transactions maintained via distributed ledger technology.\n\n\nPKI. Acronym\
          \ for public key\ninfrastructure .\n\n\nRDF (Resource Description Framework).\
          \ A semantic graph model defined by\nthe W3C RDF Working Group\n  .\n\n\n\
          Service endpoint. A network address at which a service operates on\nbehalf\
          \ of an identity owner. Examples of specific DIDM services include\ndiscovery\
          \ services, authentication services, authorization services,\ninteraction\
          \ services, etc. A DIDM service endpoint may also be provided\nby a generalized\
          \ data interchange protocol such as XDI.\n\n\nUUID. Universally Unique Identifier\
          \ as specified by RFC 4122 .\n\n\nURI (Uniform Resource Identifier). The\
          \ official name for all Web\nidentifiers as defined by IETF RFC 3986 . See\
          \ section 1.2.\n\n\nURL (Uniform Resource Locator). Any URI that can be\
          \ resolved or\nde-referenced to locate a specific resource on the Web. See\
          \ section 1.2.\n\n\nURN (Uniform Resource Name). A URI intended to serve\
          \ as a persistent,\nlocation-independent identifier of a resource, i.e.,\
          \ an identifier that\nwill always represent the same resource and never\
          \ change (ideally\nforever). URN syntax is defined by IETF RFC 2141 . In\
          \ general URNs\ncannot directly be resolved or de-referenced to locate the\
          \ resource they\nidentify. See section 1.2.\n\n\nXDI (Extensible Data Interchange)\
          \ (also XRI Data Interchange)\u2014a semantic\ngraph format and semantic\
          \ data interchange protocol defined by the\n  OASIS XDI Technical\nCommittee\
          \ .\n\n\n"
  4. Design Goals & Principles:
    count: 1
    mappings:
      781344aefbc8ddb1edb31155c683554513aeafe3b5cfafa3f439ba274924cad2:
      - major: '6'
        minor: '0'
        term: '6.0'
        title: 4. Design Goals & Principles
        txt: "\n4. Design Goals & Principles\n\nThis section summarizes the design\
          \ goals and principles of DID\narchitecture.\n\n\n\n\n\n\n          #\n\
          \        \n\n\n\n          Principle\n        \n\n\n\n          Description\n\
          \        \n\n\n\n\n\n          1\n        \n\n\n\n          Decentralization\n\
          \        \n\n\n\n          DID architecture should eliminate the requirement\
          \ for\n          centralized authorities or single points of failure in\
          \ identity\n          management, including the registration of globally\
          \ unique\n          identifiers, public verification keys, service endpoints,\
          \ and\n          other metadata.\n        \n\n\n\n\n\n          2\n    \
          \    \n\n\n\n          Self-Sovereignty\n        \n\n\n\n          DID architecture\
          \ should give identity owners the power to\n          directly own and control\
          \ their own digital identities without\n          the need to rely on external\
          \ authorities.\n        \n\n\n\n\n\n          3\n        \n\n\n\n      \
          \    Privacy\n        \n\n\n\n          DID architecture should enable identity\
          \ owners to control the\n          privacy of their digital identities,\
          \ including selective\n          disclosure of attributes or other identity\
          \ data.\n        \n\n\n\n\n\n          4\n        \n\n\n\n          Security\n\
          \        \n\n\n\n          DID architecture should provide sufficient security\
          \ for relying\n          parties to rely on DID records to their required\
          \ level of\n          assurance.\n        \n\n\n\n\n\n          5\n    \
          \    \n\n\n\n          Cryptography\n        \n\n\n\n          DID architecture\
          \ should enable an identity owner to provide\n          cryptographic proof\
          \ of ownership and proof of access control\n          rights.\n        \n\
          \n\n\n\n\n          6\n        \n\n\n\n          Discoverability\n     \
          \   \n\n\n\n          DID architecture should make it possible for entities\
          \ to\n          discover DID records for other entities to learn more about\
          \ or\n          interact with those entities.\n        \n\n\n\n\n\n    \
          \      7\n        \n\n\n\n          Interoperability\n        \n\n\n\n \
          \         DID architecture should use interoperable standards so DIDs and\n\
          \          DID record infrastructure can make use of existing tools and\n\
          \          software libraries designed for interoperability.\n        \n\
          \n\n\n\n\n          8\n        \n\n\n\n          Portability\n        \n\
          \n\n\n          DID architecture should be system-independent and enable\n\
          \          identity owners to use their digital identities with any system\n\
          \          that supports DIDs and DIDM.\n        \n\n\n\n\n\n          9\n\
          \        \n\n\n\n          Simplicity\n        \n\n\n\n          To meet\
          \ these design goals, DID architecture should be (to\n          paraphrase\
          \ Albert Einstein) \"as simple as possible but no\n          simpler\".\n\
          \        \n\n\n\n\n\n          10\n        \n\n\n\n          Extensibility\n\
          \        \n\n\n\n          When possible, DID architecture should enable\
          \ extensibility\n          provided it does not hinder interoperability,\
          \ portability or\n          simplicity.\n        \n\n\n\n\n\n"
  5. DIDs (Decentralized Identifiers):
    count: 1
    mappings:
      3c4a0c6f2a92dd48954ba41388fa178d9c801e5feee46a7d9020f8619eede7f1:
      - major: '7'
        minor: '0'
        term: '7.0'
        title: 5. DIDs (Decentralized Identifiers)
        txt: "\n5. DIDs (Decentralized Identifiers)\n\nThe foundation of DID architecture\
          \ is the concept of the decentralized\nidentifier. This concept is not new;\
          \ UUIDs\n  \_(Universally Unique IDentifiers) were first developed in the\
          \ 1980s and\nlater became a standard feature of the Open Software Foundation\u2019\
          s\n  Distributed\nComputing Environment . UUIDs achieve global uniqueness\
          \ without a\ncentralized registry service by using an algorithm that generates\n\
          128-bit values with sufficient entropy that the chance of collision are\n\
          infinitesimally small. UUIDs are formally a URN namespace specified in\n\
          \  IETF RFC 4122 .\n\n\nA DID is similar to a UUID except: (a) it can be\
          \ resolved or\ndereferenced to a standard resource describing the identity\
          \ owner (a\nDDO\u2014see section 6), and (b) the DDO may contain public\
          \ key descriptions\nthat enable cryptographic verification of DID ownership.\n\
          \n\n5.1. The Generic DID Scheme\n\nThe generic DID scheme is a URI scheme\
          \ conformant with RFC 3986 . It consists of a\nDID followed by an optional\
          \ path and/or fragment. The term DID refers\nonly to the identifier conforming\
          \ to the did rule in the ABNF below;\nwhen used alone, it does not include\
          \ a path or fragment. A DID that may\noptionally include a path and/or fragment\
          \ is called a DID reference.\n\n\nFollowing is the ABNF definition using\
          \ the syntax in RFC 5234 \_(which defines ALPHA\nas upper or lowercase A-Z).\n\
          \n\n      did-reference      = did [ \"/\" did-path ] [ \"#\" did-fragment\
          \ ]did                = \"did:\" method \":\" specific-idstring        \
          \          method             = 1*methodcharmethodchar         = %x61-7A\
          \ / DIGITspecific-idstring  = idstring *( \":\" idstring )idstring     \
          \      = 1*idcharidchar             = ALPHA / DIGIT / \".\" / \"-\"\n\n\n\
          \nSee sections 5.3 and 5.4 for the ABNF rules defining DID paths and\nfragments.\n\
          \n\n\n5.2. Specific DID Method Schemes\n\nA DID method specification MUST\
          \ define exactly one specific DID scheme\nidentified by exactly one method\
          \ name (the method rule in section 5.1).\nSince DIDs are intended for decentralized\
          \ identity infrastructure, it is\nNOT RECOMMENDED to establish a registry\
          \ of unique DID method names.\nRather the uniqueness of DID method names\
          \ should be established via\nhuman consensus, i.e., a specific DID scheme\
          \ MUST use a method name that\nis unique among all DID method names known\
          \ to the specification authors\nat the time of publication.\n\n\nA list\
          \ of known DID method names is included in Appendix A.\n\n\nSince the method\
          \ name is part of the DID, it SHOULD be as short as\npractical. A method\
          \ name of five characters or less is RECOMMENDED. The\nmethod name MAY reflect\
          \ the name of the distributed ledger or network to\nwhich the DID method\
          \ specification applies.\n\n\nThe DID method specification for the specific\
          \ DID scheme MUST specify\nhow to generate the specific-idstring component\
          \ of a DID. The\nspecific-idstring value MUST be able to be generated without\
          \ the use of\na centralized registry service. The specific-idstring value\
          \ SHOULD be\nglobally unique by itself. The fully qualified DID as defined\
          \ by the did\nrule in section 5.1 MUST be globally unique.\n\n\nIf needed,\
          \ a specific DID scheme MAY define multiple specific\nspecific-idstring\
          \ formats. It is RECOMMENDED that a specific DID scheme\ndefine as few specific-idstring\
          \ formats as possible.\n\n\n\n5.3 DID Paths\n\nA generic DID path (the did-path\
          \ rule in section 5.1) is identical to a\nURI path and MUST conform to the\
          \ ABNF of the path-rootless ABNF rule in\n  RFC 3986 . A DID path\nSHOULD\
          \ be used to address resources available via a DID service\nendpoint. See\
          \ section 6.6.\n\n\nA specific DID scheme MAY specify ABNF rules for DID\
          \ paths that are more\nrestrictive than the generic rules in this section.\n\
          \n\n\n5.4 DID Fragments\n\nA generic DID fragment (the did-fragment rule\
          \ in section 5.1) is\nidentical to a URI fragment and MUST conform to the\
          \ ABNF of the fragment\nABNF rule in RFC 3986\n  . A DID fragment MUST be\
          \ used only as a method-independent pointer into\nthe DDO to identify a\
          \ unique key description or other DDO component. To\nresolve this pointer,\
          \ the complete DID reference including the DID\nfragment MUST be used as\
          \ the value of the id key for the target JSON\nobject.\n\n\nA specific DID\
          \ scheme MAY specify ABNF rules for DID fragments that are\nmore restrictive\
          \ than the generic rules in this section.\n\n\n\n5.5 DID Normalization\n\
          \nFor the broadest interoperability, DID normalization should be as simple\n\
          and universal as possible. Therefore:\n\n\nThe did: scheme name MUST be\
          \ lowercase.\n  \nThe method name MUST be lowercase.\n  \nCase sensitivity\
          \ and normalization of the value of the\nspecific-idstring rule in section\
          \ 5.1 MUST be defined by the governing\nDID method specification.\n  \n\n\
          \n\n5.6 DID Persistence\n\nA DID MUST be persistent and immutable, i.e.,\
          \ bound to an identity owner\nonce and never changed (forever). Ideally\
          \ a DID would be a completely\nabstract decentralized identifier (like a\
          \ UUID) that could be bound to\nmultiple underlying distributed ledgers\
          \ or networks over time, thus\nmaintaining its persistence independent of\
          \ any particular ledger or\nnetwork. However registering the same identifier\
          \ on multiple ledgers or\nnetworks introduces extremely hard identity ownership\
          \ and start-of-authority\n  \_(SOA) problems. It also greatly increases\
          \ implementation complexity for\ndevelopers.\n\n\nTo avoid these issues,\
          \ it is RECOMMENDED that DID method specifications\nonly produce DIDs and\
          \ DID methods bound to strong, stable ledgers or\nnetworks capable of making\
          \ the highest level of commitment to\npersistence of the DID and DID method\
          \ over time.\n\n\nNOTE: Although not included in this version, future versions\
          \ of this\nspecification may support a DDO equivID property to establish\
          \ verifiable\nequivalence relations between DID records representing the\
          \ same identity\nowner on multiple ledgers or networks. Such equivalence\
          \ relations can\nproduce the practical equivalent of a single persistent\
          \ abstract DID.\nSee Future Work (section 11).\n\n\n\n"
  5.1. The Generic DID Scheme:
    count: 1
    mappings:
      c8a16d327ae3bca1dd74900afb2d74099f3808f6e2ee8f1bd203f5d956d87593:
      - major: '7'
        minor: '1'
        term: '7.1'
        title: 5.1. The Generic DID Scheme
        txt: "\n5.1. The Generic DID Scheme\n\nThe generic DID scheme is a URI scheme\
          \ conformant with RFC 3986 . It consists of a\nDID followed by an optional\
          \ path and/or fragment. The term DID refers\nonly to the identifier conforming\
          \ to the did rule in the ABNF below;\nwhen used alone, it does not include\
          \ a path or fragment. A DID that may\noptionally include a path and/or fragment\
          \ is called a DID reference.\n\n\nFollowing is the ABNF definition using\
          \ the syntax in RFC 5234 \_(which defines ALPHA\nas upper or lowercase A-Z).\n\
          \n\n      did-reference      = did [ \"/\" did-path ] [ \"#\" did-fragment\
          \ ]did                = \"did:\" method \":\" specific-idstring        \
          \          method             = 1*methodcharmethodchar         = %x61-7A\
          \ / DIGITspecific-idstring  = idstring *( \":\" idstring )idstring     \
          \      = 1*idcharidchar             = ALPHA / DIGIT / \".\" / \"-\"\n\n\n\
          \nSee sections 5.3 and 5.4 for the ABNF rules defining DID paths and\nfragments.\n\
          \n\n"
  5.2. Specific DID Method Schemes:
    count: 1
    mappings:
      c3f2e66d82aa28355f1f63e54d9672a2fa2e03f442987d76858d039cffadb8fa:
      - major: '7'
        minor: '2'
        term: '7.2'
        title: 5.2. Specific DID Method Schemes
        txt: '

          5.2. Specific DID Method Schemes


          A DID method specification MUST define exactly one specific DID scheme

          identified by exactly one method name (the method rule in section 5.1).

          Since DIDs are intended for decentralized identity infrastructure, it is

          NOT RECOMMENDED to establish a registry of unique DID method names.

          Rather the uniqueness of DID method names should be established via

          human consensus, i.e., a specific DID scheme MUST use a method name that

          is unique among all DID method names known to the specification authors

          at the time of publication.



          A list of known DID method names is included in Appendix A.



          Since the method name is part of the DID, it SHOULD be as short as

          practical. A method name of five characters or less is RECOMMENDED. The

          method name MAY reflect the name of the distributed ledger or network to

          which the DID method specification applies.



          The DID method specification for the specific DID scheme MUST specify

          how to generate the specific-idstring component of a DID. The

          specific-idstring value MUST be able to be generated without the use of

          a centralized registry service. The specific-idstring value SHOULD be

          globally unique by itself. The fully qualified DID as defined by the did

          rule in section 5.1 MUST be globally unique.



          If needed, a specific DID scheme MAY define multiple specific

          specific-idstring formats. It is RECOMMENDED that a specific DID scheme

          define as few specific-idstring formats as possible.



          '
  5.3 DID Paths:
    count: 1
    mappings:
      4cbfa25bb68ffa671bbdeae4079ab9afa06230894911c0992a0aa4f008364b6b:
      - major: '7'
        minor: '3'
        term: '7.3'
        title: 5.3 DID Paths
        txt: "\n5.3 DID Paths\n\nA generic DID path (the did-path rule in section\
          \ 5.1) is identical to a\nURI path and MUST conform to the ABNF of the path-rootless\
          \ ABNF rule in\n  RFC 3986 . A DID path\nSHOULD be used to address resources\
          \ available via a DID service\nendpoint. See section 6.6.\n\n\nA specific\
          \ DID scheme MAY specify ABNF rules for DID paths that are more\nrestrictive\
          \ than the generic rules in this section.\n\n\n"
  5.4 DID Fragments:
    count: 1
    mappings:
      7fbd43769e8692ac433e799d4bead48605f1c3c60cc4baf6fdf85770ea2252d4:
      - major: '7'
        minor: '4'
        term: '7.4'
        title: 5.4 DID Fragments
        txt: "\n5.4 DID Fragments\n\nA generic DID fragment (the did-fragment rule\
          \ in section 5.1) is\nidentical to a URI fragment and MUST conform to the\
          \ ABNF of the fragment\nABNF rule in RFC 3986\n  . A DID fragment MUST be\
          \ used only as a method-independent pointer into\nthe DDO to identify a\
          \ unique key description or other DDO component. To\nresolve this pointer,\
          \ the complete DID reference including the DID\nfragment MUST be used as\
          \ the value of the id key for the target JSON\nobject.\n\n\nA specific DID\
          \ scheme MAY specify ABNF rules for DID fragments that are\nmore restrictive\
          \ than the generic rules in this section.\n\n\n"
  5.5 DID Normalization:
    count: 1
    mappings:
      c949ab280684b94281f8d76b2aacc621ee52dbb7dce55b82511b305addcb43b0:
      - major: '7'
        minor: '5'
        term: '7.5'
        title: 5.5 DID Normalization
        txt: "\n5.5 DID Normalization\n\nFor the broadest interoperability, DID normalization\
          \ should be as simple\nand universal as possible. Therefore:\n\n\nThe did:\
          \ scheme name MUST be lowercase.\n  \nThe method name MUST be lowercase.\n\
          \  \nCase sensitivity and normalization of the value of the\nspecific-idstring\
          \ rule in section 5.1 MUST be defined by the governing\nDID method specification.\n\
          \  \n\n\n"
  5.6 DID Persistence:
    count: 1
    mappings:
      f7c6802b8a69c0ae7fe2ba0bb70efba2d1426ad9d03f0bbaf2e24627bf4b5c6b:
      - major: '7'
        minor: '6'
        term: '7.6'
        title: 5.6 DID Persistence
        txt: "\n5.6 DID Persistence\n\nA DID MUST be persistent and immutable, i.e.,\
          \ bound to an identity owner\nonce and never changed (forever). Ideally\
          \ a DID would be a completely\nabstract decentralized identifier (like a\
          \ UUID) that could be bound to\nmultiple underlying distributed ledgers\
          \ or networks over time, thus\nmaintaining its persistence independent of\
          \ any particular ledger or\nnetwork. However registering the same identifier\
          \ on multiple ledgers or\nnetworks introduces extremely hard identity ownership\
          \ and start-of-authority\n  \_(SOA) problems. It also greatly increases\
          \ implementation complexity for\ndevelopers.\n\n\nTo avoid these issues,\
          \ it is RECOMMENDED that DID method specifications\nonly produce DIDs and\
          \ DID methods bound to strong, stable ledgers or\nnetworks capable of making\
          \ the highest level of commitment to\npersistence of the DID and DID method\
          \ over time.\n\n\nNOTE: Although not included in this version, future versions\
          \ of this\nspecification may support a DDO equivID property to establish\
          \ verifiable\nequivalence relations between DID records representing the\
          \ same identity\nowner on multiple ledgers or networks. Such equivalence\
          \ relations can\nproduce the practical equivalent of a single persistent\
          \ abstract DID.\nSee Future Work (section 11).\n\n\n"
  6. DDOs (DID Descriptor Objects):
    count: 1
    mappings:
      a5e0e1927f2f1a231bc6134043af47e6c5467d4f53e058a5de7f59b40e34d1ea:
      - major: '8'
        minor: '0'
        term: '8.0'
        title: 6. DDOs (DID Descriptor Objects)
        txt: "\n6. DDOs (DID Descriptor Objects)\n\nIf a DID is the index key in a\
          \ key-value pair, then the DDO is the value\nto which the index key points.\
          \ The combination of a DID and its\nassociated DDO forms the root identity\
          \ record for a decentralized\nidentity.\n\n\nA DDO MUST be a single JSON\
          \ object conforming to RFC 7159 . For purposes of\nthis version of the DID\
          \ specification, the format of this JSON object is\nspecified in JSON-LD\
          \ , a format for\nmapping JSON data into the RDF semantic graph model as\
          \ defined by the\n  W3C JSON-LD 1.0\nspecification . Future versions of\
          \ this specification MAY specify\nother semantic graph formats for a DDO\
          \ such as JXD (JSON XDI Data), a\nserialization format for the \nXDI graph\
          \ model .\n\n\nThe following sections define the properties of this JSON\
          \ object,\nincluding whether these properties are required or optional.\n\
          \n\n6.1. Context (Required)\n\nJSON objects in JSON-LD format must include\
          \ a JSON-LD context statement.\nThe rules for this statement are:\n\n\n\
          A DDO MUST have exactly one top-level context statement.\n  \nThis statement\
          \ MUST be the first line in the JSON object. (This is\nnot strictly necessary\
          \ under JSON-LD but required for DDOs.)\n  \nThe key for this property MUST\
          \ be @context.\n  \nThe value of this key MUST be the URL for the generic\
          \ DID context as\nspecified in Appendix B.\n  \n\n\nExample (using an example\
          \ URL):\n\n\n  {\n\n\n  \"@context\": \"https://example.org/did/v1\"\n\n\
          \n  }\n\n\nDID method specifications MAY define their own JSON-LD contexts.\
          \ However\nit is NOT RECOMMENDED to define a new context unless necessary\
          \ to\nproperly implement the method. Method-specific contexts MUST NOT\n\
          override the terms defined in the generic DID context listed in Appendix\n\
          B.\n\n\n\n6.2. Primary DID (Required)\n\nThe primary DID is the primary\
          \ index key for the DDO, i.e., it is DID\ndescribed by DDO. The rules for\
          \ a primary DID are:\n\n\nA DDO MUST have exactly one primary DID.\n  \n\
          The key for this property MUST be id.\n  \nThe value of this key MUST be\
          \ a valid DID.\n  \nWhen this DDO is registered with the target distributed\
          \ ledger or\nnetwork, the registered DID MUST match this primary DID value.\n\
          \  \n\n\nExample:\n\n\n      {\n        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          \n      }\n\n\n\n\n\n\n6.3. Guardian (Required If No Proof of Ownership)\n\
          \n\n    \n      A guardian is an identity owner who creates and maintains\
          \ an identity record for a dependent who is not in a position to hold or\
          \ control the necessary cryptographic keys (e.g., a parent creating an identity\
          \ record for a child). In this case, there are no owner keys to represent\
          \ the ultimate identity owner. So the DDO needs to assert the identity of\
          \ the guardian.\n\n    \n      The rules for a guardian are:\n\n\n\n\nA\
          \ DDO that includes an owner (section 6.4) MAY have a guardian.\n  \nA DDO\
          \ that does not include an owner MUST have a guardian.\n  \nThe key for\
          \ this property MUST be guardian.\n  \nThe value of this key MUST be a valid\
          \ DID.\n  \nThe guardian DID MUST resolve to a DDO that has an owner property,\n\
          i.e., the guardian relationships must not be nested.\n  \n\n\n\n    \n \
          \     Example:\n\n\n\n\n\n      {\n      \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n      }\n\n\n\n\n\n\n6.4. Proof of Ownership (Required If No Guardian)\n\
          \n\n    \n      Proof of Ownership is the mechanism by which an identity\
          \ owner can cryptographically prove ownership of a DID and DDO by virtue\
          \ of publishing a set of public key or verification key descriptions. See\
          \ section 9.2. Note that Proof of Ownership is separate from Proof of Control\
          \ because an identity owner may wish to enable other entities to update\
          \ the DDO (for example, to assist with key recovery as discussed in section\
          \ 6.5) without enabling them to prove ownership (and thus be able to impersonate\
          \ the identity owner).\n\n    \n      The rules for Proof of Ownership are:\n\
          \n\n\n\nA DDO that includes a guardian (section 6.3) MAY have exactly one\n\
          owner.\n  \nA DDO that does not include a guardian MUST have exactly one\
          \ owner.\n  \nThe key for this property MUST be owner.\n  \nThe value of\
          \ this key MUST be an array where each member of the\narray is a key description\
          \ of a valid public key or verification key. A\nlist of standard key descriptions\
          \ is included in Appendix C. A new key\ndescription MAY also be defined\
          \ by a DID method specification.\n  \nIf this array contains more than one\
          \ key description, each key\ndescription MUST include a property with the\
          \ key id whose value is a DID\nreference consisting of the primary DID and\
          \ a DID fragment. This DID\nreference uniquely identifies this key description.\n\
          \  \n\n\n\n    \n\n\n    \n      Example:\n\n    \n\n\n\n\n\n\n      {\n\
          \      \"owner\": [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\"\
          ,\n            \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n\
          \            \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }, {\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\"\
          : \"MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n\n    \n\n\n    \n      Note that caching and\
          \ expiration of the keys in DDO key descriptions is entirely the responsibility\
          \ of DID resolvers and other clients. See section 9.6.\n\n\n\n\n\n\n6.5.\
          \ Proof of Control (Optional and Method-Specific)\n\n\n    \n      Proof\
          \ of Control is the mechanism by which an identity owner may give itself\
          \ or other entities permission to update the DDO\u2014for example to assist\
          \ with key recovery. Note that Proof of Control is separate from Proof of\
          \ Ownership as explained in section 6.4. This is particularly important\
          \ for key recovery in the case of key loss, when the identity owner no longer\
          \ has access to the keys described using the owner property (section 6.4),\
          \ or key compromise, where the owner\u2019s trusted third parties need to\
          \ override malicious activity by an attacker. See section 9.\n\n    \n \
          \     Because the access control logic in a Proof of Control block must\
          \ be implemented by the target distributed ledger or network, a DID method\
          \ specification MUST include its own Proof of Control rules and processing\
          \ logic. It is RECOMMENDED that all DID method specifications support the\
          \ generic Proof of Control rules specified in this section. A DID method\
          \ specification MAY add its own method-specific Proof of Control rules.\n\
          \n    \n      The generic Proof of Control rules are:\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing Proof of Control.\n  \nThe key\
          \ for this property MUST be control.\n  \nThe value of this key MUST be\
          \ an array.\n  \nThe values of this array MUST be defined in a DID method\n\
          specification.\n  \nIf a Proof of Control rule accepts a DID without a fragment\
          \ as a\nvalue, then an update signature verified with any key in the owner\
          \ of\nthe DDO dereferenced from that DID MUST be considered valid for Proof\
          \ of\nControl.\n  \nIf a Proof of Control rule accepts a DID with a fragment\
          \ as a value,\nthen:\n  \n\n\n\n\n\n\nThe fragment MUST identify a key description\
          \ in the DDO dereferenced\nfrom that DID.\n  \nAn update signature verified\
          \ with the key in target key description\nMUST be considered valid for Proof\
          \ of Control.\n  \n\n\n\n\n\n\n\n6.5.1 \"Or\" Control\n\n\n\n    \n    \
          \  To assert that any single member of a group of other DID owners has permission\
          \ to update the DDO, the control block array MAY contain a single JSON object\
          \ with two properties:\n\n\n\n\nA property type whose value is the string\
          \ OrControl.\n  \nA property signers whose value is an array of DIDs with\
          \ or without\nfragments.\n  \n\n\n\n    \n      If at least one update signature\
          \ from a DID in this array is verified, it MUST be considered valid for\
          \ Proof of Control.\n\n\n\n\n\n6.5.2 \"And\" Control\n\n\n\n    \n     \
          \ To assert that only all members of a group of other DID owners must act\
          \ together to update the DDO, the control block array MAY contain a single\
          \ JSON object with two properties:\n\n\n\n\nA property type whose value\
          \ is the string AndControl.\n  \nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If update signatures\
          \ from ALL DIDs in this array are verified, it MUST be considered valid\
          \ for Proof of Control.\n\n\n\n\n\n6.5.3 \"M-of-N\" Control\n\n\n\n    \n\
          \      To assert that a minimum number of members of a group of other DID\
          \ owners must act together to update the DDO, the control block array MAY\
          \ contain a single JSON object with three properties:\n\n\n\n\nA property\
          \ type whose value is the string MofNControl.\n  \nA property minimumSignatures\
          \ whose value is an integer representing\nthe minimum threshold of signatures\
          \ required to act together.\n  \nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If the number\
          \ of verified update signatures from DIDs in this array equals or exceeds\
          \ the value of minimumSignatures, it MUST be considered valid for Proof\
          \ of Control.\n\n    \n\n\n    \n      Following is an example of a Proof\
          \ of Control property implementing these rules:\n\n    \n      {\n\n\n\n\
          \n\n      \"control\": [{\n            \"type\": \"OrControl\",\n      \
          \      \"signer\": [            \"did:example:21tDAKCERh95uGgKbJNHYp\",\n\
          \                    \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n          \
          \     ]\n        }, {\n            \"type\": \"AndControl\",\n         \
          \   \"signer\": [\n                    \"did:example:7P7xfv5AeTSSWcuq6hPptQ\"\
          ,\n                    \"did:example:X2v8rvzoCxayhYV5mhESQ1\"\n        \
          \       ]\n        }, {\n            \"type\": \"MofNControl\",\n      \
          \      \"minimumSignatures\": 2,\n            \"signer\": [\n          \
          \          \"did:example:4XirzuHiNnTrwfjCMtBEJ6\",\n                   \
          \ \"did:example:iCGjJEChRbAdfZbGqZAYT7\",\n                    \"did:example:WUoAyXB7mhfcVESjypm5ty\"\
          \n               ]\n        }]\n\n\n\n\n    \n      }\n\n\n\n\n\n\n\n\n\n\
          \n6.6. Service Endpoint References (Optional)\n\n\n    \n      In addition\
          \ to publication of cryptographic key material, the other primary purpose\
          \ of DID records is to enable discovery of service endpoints for the identity\
          \ owner. A service endpoint may represent any type of service the identity\
          \ owner wishes to advertise, including decentralized identity management\
          \ services for further discovery, authentication, authorization, or interaction.\n\
          \n    \n      The rules for service endpoints are:\n\n\n\n\nA DDO MAY have\
          \ exactly one property representing service endpoints.\n  \nThe key for\
          \ this property MUST be service.\n  \nThe value of this key MUST be a nested\
          \ JSON object.\n  \nIn this nested JSON object, each property MUST have\
          \ a key\nrepresenting the name of a service established in either the generic\n\
          JSON-LD context (see Appendix B) or a method-specific context\ndefinition.\n\
          \  \nThe value of this key MUST be a valid URI conforming to RFC 3986 \_\
          and normalized\naccording to the rules in section 6 of RFC 3986 \_and to\
          \ any\nnormalization rules in its applicable URI scheme specification.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"service\": {\n\
          \            \"openid\": \"https://openid.example.com/456\",\n         \
          \   \"xdi\": \"https://xdi.example.com/123\"\n        }\n      }\n\n\n\n\
          \n    \n      See sections 9.1 and 9.3 for further security considerations\
          \ regarding authentication service endpoints.\n\n\n\n\n\n\n6.7. Created\
          \ (Optional)\n\n\n    \n      Standard metadata for identity records includes\
          \ a timestamp of the original creation. The rules for including a creation\
          \ timestamp are:\n\n\n\n\nA DDO MUST have zero or one property representing\
          \ a creation\ntimestamp. It is RECOMMENDED to include this property.\n \
          \ \nThe key for this property MUST be created.\n  \nThe value of this key\
          \ MUST be a valid XML datetime value as defined\nin section 3.3.7 of W3C\n\
          XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes .\n  \nThis datetime\
          \ value MUST be normalized to UTC 00:00 as indicated by\nthe trailing \"\
          Z\".\n  \nMethod specifications that rely on DLTs SHOULD require time values\n\
          that are after the known \"median\ntime past\" (defined in Bitcoin BIP 113)\
          \ , when the DLT supports such\na notion.\n  \n\n\n\n    \n      Example:\n\
          \n\n\n\n\n      {\n      \"created\": \"2002-10-10T17:00:00Z\"\n      }\n\
          \n\n\n\n\n\n\n\n\n6.8. Updated (Optional)\n\n\n    \n      Standard metadata\
          \ for identity records includes a timestamp of the most recent change. The\
          \ rules for including a updated timestamp are:\n\n\n\n\nA DDO MUST have\
          \ zero or one property representing an updated\ntimestamp. It is RECOMMENDED\
          \ to include this property.\n  \nThe key for this property MUST be updated.\n\
          \  \nThe value of this key MUST follow the formatting rules (3, 4, 5)\n\
          from section 6.7.\n  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n \
          \     \"updated\": \"2016-10-17T02:41:00Z\"\n      }\n\n\n\n\n\n\n\n\n\n\
          6.9. Signature (Optional)\n\n\n    \n      A signature on a DDO is cryptographic\
          \ proof of the integrity of the DDO according to either:\n\n\n\n\nThe identity\
          \ owner as defined in section 6.4, or if not present:\n  \nThe guardian\
          \ as defined in section 6.3.\n  \n\n\n\n    \n      This signature is NOT\
          \ proof of the binding between a DID and a DDO. See section 9.2.\n\n   \
          \ \n      The rules for a signature are:\n\n\n\n\nA DDO MAY have exactly\
          \ one property representing a signature.\n  \nThe key for this property\
          \ MUST be signature.\n  \nThe value of this key MUST be a valid JSON-LD\
          \ signature as defined\nby Linked Data\nSignatures .\n  \n\n\n\n    \n \
          \     Example:\n\n\n\n\n\n      {\n      \"signature\": {\n            \"\
          type\": \"LinkedDataSignature2015\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1ja#keys-1\"\
          ,\n            \"signatureValue\": \"QNB13Y7Q9oLlDLL6AHyL31OE5fLji9DwJSA8qnv81oRaKonij8m+Jv4XdiEYvJ97iRlzKU/92/0LafSL5JftEgl960DLcbqMFxOtbAmFOIMa7eDcrgTL5ytXeYCYKLjHQG3s8a3UKDKRuEK54qK1G5hGKGoLgAVa6xgcDLjW7M19PEJV/c3HpGA7Eez6VFMoTt4yESjZvOXC97xN3KpshOx2HT/btgUbo0XjA1Oi0QHdgrLcUsQGt6w23RjeSToalrsA1G69OFeN2OiQrz9Jb4561hvKLSyWObwRmS6n5Vgr5xkvUm6MONRq0Vg33kXevoVM64KTBkISul61tzjn4w==\"\
          \n        }\n\n\n\n\n      }\n\n\n\n\n\n"
  6.1. Context (Required):
    count: 1
    mappings:
      0e9db1d068f2c41553ba9ba2722fc10d33ad7464e2834f551586d296a3473e6b:
      - major: '8'
        minor: '1'
        term: '8.1'
        title: 6.1. Context (Required)
        txt: "\n6.1. Context (Required)\n\nJSON objects in JSON-LD format must include\
          \ a JSON-LD context statement.\nThe rules for this statement are:\n\n\n\
          A DDO MUST have exactly one top-level context statement.\n  \nThis statement\
          \ MUST be the first line in the JSON object. (This is\nnot strictly necessary\
          \ under JSON-LD but required for DDOs.)\n  \nThe key for this property MUST\
          \ be @context.\n  \nThe value of this key MUST be the URL for the generic\
          \ DID context as\nspecified in Appendix B.\n  \n\n\nExample (using an example\
          \ URL):\n\n\n  {\n\n\n  \"@context\": \"https://example.org/did/v1\"\n\n\
          \n  }\n\n\nDID method specifications MAY define their own JSON-LD contexts.\
          \ However\nit is NOT RECOMMENDED to define a new context unless necessary\
          \ to\nproperly implement the method. Method-specific contexts MUST NOT\n\
          override the terms defined in the generic DID context listed in Appendix\n\
          B.\n\n\n"
  6.2. Primary DID (Required):
    count: 1
    mappings:
      59ea76a3471c9c916627cc512e17514c41f66b9db339ef0d7401f55f33740800:
      - major: '8'
        minor: '2'
        term: '8.2'
        title: 6.2. Primary DID (Required)
        txt: "\n6.2. Primary DID (Required)\n\nThe primary DID is the primary index\
          \ key for the DDO, i.e., it is DID\ndescribed by DDO. The rules for a primary\
          \ DID are:\n\n\nA DDO MUST have exactly one primary DID.\n  \nThe key for\
          \ this property MUST be id.\n  \nThe value of this key MUST be a valid DID.\n\
          \  \nWhen this DDO is registered with the target distributed ledger or\n\
          network, the registered DID MUST match this primary DID value.\n  \n\n\n\
          Example:\n\n\n      {\n        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          \n      }\n\n\n\n\n\n"
  6.3. Guardian (Required If No Proof of Ownership):
    count: 1
    mappings:
      8d403352015237b1f60987ff7f807fc7f85d8e270022af1f9946413413a782fc:
      - major: '8'
        minor: '3'
        term: '8.3'
        title: 6.3. Guardian (Required If No Proof of Ownership)
        txt: "\n6.3. Guardian (Required If No Proof of Ownership)\n\n\n    \n    \
          \  A guardian is an identity owner who creates and maintains an identity\
          \ record for a dependent who is not in a position to hold or control the\
          \ necessary cryptographic keys (e.g., a parent creating an identity record\
          \ for a child). In this case, there are no owner keys to represent the ultimate\
          \ identity owner. So the DDO needs to assert the identity of the guardian.\n\
          \n    \n      The rules for a guardian are:\n\n\n\n\nA DDO that includes\
          \ an owner (section 6.4) MAY have a guardian.\n  \nA DDO that does not include\
          \ an owner MUST have a guardian.\n  \nThe key for this property MUST be\
          \ guardian.\n  \nThe value of this key MUST be a valid DID.\n  \nThe guardian\
          \ DID MUST resolve to a DDO that has an owner property,\ni.e., the guardian\
          \ relationships must not be nested.\n  \n\n\n\n    \n      Example:\n\n\n\
          \n\n\n      {\n      \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n      }\n\n\n\n\n\n"
  6.4. Proof of Ownership (Required If No Guardian):
    count: 1
    mappings:
      94342994fc9f8bc066900f59d7ff331cfff4f9fe9acadab96e4fe243a2bfc2fe:
      - major: '8'
        minor: '4'
        term: '8.4'
        title: 6.4. Proof of Ownership (Required If No Guardian)
        txt: "\n6.4. Proof of Ownership (Required If No Guardian)\n\n\n    \n    \
          \  Proof of Ownership is the mechanism by which an identity owner can cryptographically\
          \ prove ownership of a DID and DDO by virtue of publishing a set of public\
          \ key or verification key descriptions. See section 9.2. Note that Proof\
          \ of Ownership is separate from Proof of Control because an identity owner\
          \ may wish to enable other entities to update the DDO (for example, to assist\
          \ with key recovery as discussed in section 6.5) without enabling them to\
          \ prove ownership (and thus be able to impersonate the identity owner).\n\
          \n    \n      The rules for Proof of Ownership are:\n\n\n\n\nA DDO that\
          \ includes a guardian (section 6.3) MAY have exactly one\nowner.\n  \nA\
          \ DDO that does not include a guardian MUST have exactly one owner.\n  \n\
          The key for this property MUST be owner.\n  \nThe value of this key MUST\
          \ be an array where each member of the\narray is a key description of a\
          \ valid public key or verification key. A\nlist of standard key descriptions\
          \ is included in Appendix C. A new key\ndescription MAY also be defined\
          \ by a DID method specification.\n  \nIf this array contains more than one\
          \ key description, each key\ndescription MUST include a property with the\
          \ key id whose value is a DID\nreference consisting of the primary DID and\
          \ a DID fragment. This DID\nreference uniquely identifies this key description.\n\
          \  \n\n\n\n    \n\n\n    \n      Example:\n\n    \n\n\n\n\n\n\n      {\n\
          \      \"owner\": [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\"\
          ,\n            \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n\
          \            \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }, {\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\"\
          : \"MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n\n    \n\n\n    \n      Note that caching and\
          \ expiration of the keys in DDO key descriptions is entirely the responsibility\
          \ of DID resolvers and other clients. See section 9.6.\n\n\n\n\n\n"
  6.5. Proof of Control (Optional and Method-Specific):
    count: 1
    mappings:
      4b9a2f3c2d8482cdd66ee54be620a4d304363d040cbd682e247383d8711a0b22:
      - major: '8'
        minor: '5'
        term: '8.5'
        title: 6.5. Proof of Control (Optional and Method-Specific)
        txt: "\n6.5. Proof of Control (Optional and Method-Specific)\n\n\n    \n \
          \     Proof of Control is the mechanism by which an identity owner may give\
          \ itself or other entities permission to update the DDO\u2014for example\
          \ to assist with key recovery. Note that Proof of Control is separate from\
          \ Proof of Ownership as explained in section 6.4. This is particularly important\
          \ for key recovery in the case of key loss, when the identity owner no longer\
          \ has access to the keys described using the owner property (section 6.4),\
          \ or key compromise, where the owner\u2019s trusted third parties need to\
          \ override malicious activity by an attacker. See section 9.\n\n    \n \
          \     Because the access control logic in a Proof of Control block must\
          \ be implemented by the target distributed ledger or network, a DID method\
          \ specification MUST include its own Proof of Control rules and processing\
          \ logic. It is RECOMMENDED that all DID method specifications support the\
          \ generic Proof of Control rules specified in this section. A DID method\
          \ specification MAY add its own method-specific Proof of Control rules.\n\
          \n    \n      The generic Proof of Control rules are:\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing Proof of Control.\n  \nThe key\
          \ for this property MUST be control.\n  \nThe value of this key MUST be\
          \ an array.\n  \nThe values of this array MUST be defined in a DID method\n\
          specification.\n  \nIf a Proof of Control rule accepts a DID without a fragment\
          \ as a\nvalue, then an update signature verified with any key in the owner\
          \ of\nthe DDO dereferenced from that DID MUST be considered valid for Proof\
          \ of\nControl.\n  \nIf a Proof of Control rule accepts a DID with a fragment\
          \ as a value,\nthen:\n  \n\n\n\n\n\n\nThe fragment MUST identify a key description\
          \ in the DDO dereferenced\nfrom that DID.\n  \nAn update signature verified\
          \ with the key in target key description\nMUST be considered valid for Proof\
          \ of Control.\n  \n\n\n\n\n\n\n\n6.5.1 \"Or\" Control\n\n\n\n    \n    \
          \  To assert that any single member of a group of other DID owners has permission\
          \ to update the DDO, the control block array MAY contain a single JSON object\
          \ with two properties:\n\n\n\n\nA property type whose value is the string\
          \ OrControl.\n  \nA property signers whose value is an array of DIDs with\
          \ or without\nfragments.\n  \n\n\n\n    \n      If at least one update signature\
          \ from a DID in this array is verified, it MUST be considered valid for\
          \ Proof of Control.\n\n\n\n\n\n6.5.2 \"And\" Control\n\n\n\n    \n     \
          \ To assert that only all members of a group of other DID owners must act\
          \ together to update the DDO, the control block array MAY contain a single\
          \ JSON object with two properties:\n\n\n\n\nA property type whose value\
          \ is the string AndControl.\n  \nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If update signatures\
          \ from ALL DIDs in this array are verified, it MUST be considered valid\
          \ for Proof of Control.\n\n\n\n\n\n6.5.3 \"M-of-N\" Control\n\n\n\n    \n\
          \      To assert that a minimum number of members of a group of other DID\
          \ owners must act together to update the DDO, the control block array MAY\
          \ contain a single JSON object with three properties:\n\n\n\n\nA property\
          \ type whose value is the string MofNControl.\n  \nA property minimumSignatures\
          \ whose value is an integer representing\nthe minimum threshold of signatures\
          \ required to act together.\n  \nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If the number\
          \ of verified update signatures from DIDs in this array equals or exceeds\
          \ the value of minimumSignatures, it MUST be considered valid for Proof\
          \ of Control.\n\n    \n\n\n    \n      Following is an example of a Proof\
          \ of Control property implementing these rules:\n\n    \n      {\n\n\n\n\
          \n\n      \"control\": [{\n            \"type\": \"OrControl\",\n      \
          \      \"signer\": [            \"did:example:21tDAKCERh95uGgKbJNHYp\",\n\
          \                    \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n          \
          \     ]\n        }, {\n            \"type\": \"AndControl\",\n         \
          \   \"signer\": [\n                    \"did:example:7P7xfv5AeTSSWcuq6hPptQ\"\
          ,\n                    \"did:example:X2v8rvzoCxayhYV5mhESQ1\"\n        \
          \       ]\n        }, {\n            \"type\": \"MofNControl\",\n      \
          \      \"minimumSignatures\": 2,\n            \"signer\": [\n          \
          \          \"did:example:4XirzuHiNnTrwfjCMtBEJ6\",\n                   \
          \ \"did:example:iCGjJEChRbAdfZbGqZAYT7\",\n                    \"did:example:WUoAyXB7mhfcVESjypm5ty\"\
          \n               ]\n        }]\n\n\n\n\n    \n      }\n\n\n\n\n\n\n\n\n\n"
  6.6. Service Endpoint References (Optional):
    count: 1
    mappings:
      ab5c1d8fa47779211666d4f4fcd9155fdae5c9ea0eca641b02b87178cff9aab8:
      - major: '8'
        minor: '6'
        term: '8.6'
        title: 6.6. Service Endpoint References (Optional)
        txt: "\n6.6. Service Endpoint References (Optional)\n\n\n    \n      In addition\
          \ to publication of cryptographic key material, the other primary purpose\
          \ of DID records is to enable discovery of service endpoints for the identity\
          \ owner. A service endpoint may represent any type of service the identity\
          \ owner wishes to advertise, including decentralized identity management\
          \ services for further discovery, authentication, authorization, or interaction.\n\
          \n    \n      The rules for service endpoints are:\n\n\n\n\nA DDO MAY have\
          \ exactly one property representing service endpoints.\n  \nThe key for\
          \ this property MUST be service.\n  \nThe value of this key MUST be a nested\
          \ JSON object.\n  \nIn this nested JSON object, each property MUST have\
          \ a key\nrepresenting the name of a service established in either the generic\n\
          JSON-LD context (see Appendix B) or a method-specific context\ndefinition.\n\
          \  \nThe value of this key MUST be a valid URI conforming to RFC 3986 \_\
          and normalized\naccording to the rules in section 6 of RFC 3986 \_and to\
          \ any\nnormalization rules in its applicable URI scheme specification.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"service\": {\n\
          \            \"openid\": \"https://openid.example.com/456\",\n         \
          \   \"xdi\": \"https://xdi.example.com/123\"\n        }\n      }\n\n\n\n\
          \n    \n      See sections 9.1 and 9.3 for further security considerations\
          \ regarding authentication service endpoints.\n\n\n\n\n\n"
  6.7. Created (Optional):
    count: 1
    mappings:
      89c3c7cd222cfac17ee49fcbe25e61d1f63a63c59f834349183ae4a3eb0cd432:
      - major: '8'
        minor: '7'
        term: '8.7'
        title: 6.7. Created (Optional)
        txt: "\n6.7. Created (Optional)\n\n\n    \n      Standard metadata for identity\
          \ records includes a timestamp of the original creation. The rules for including\
          \ a creation timestamp are:\n\n\n\n\nA DDO MUST have zero or one property\
          \ representing a creation\ntimestamp. It is RECOMMENDED to include this\
          \ property.\n  \nThe key for this property MUST be created.\n  \nThe value\
          \ of this key MUST be a valid XML datetime value as defined\nin section\
          \ 3.3.7 of W3C\nXML Schema Definition Language (XSD) 1.1 Part 2: Datatypes\
          \ .\n  \nThis datetime value MUST be normalized to UTC 00:00 as indicated\
          \ by\nthe trailing \"Z\".\n  \nMethod specifications that rely on DLTs SHOULD\
          \ require time values\nthat are after the known \"median\ntime past\" (defined\
          \ in Bitcoin BIP 113) , when the DLT supports such\na notion.\n  \n\n\n\n\
          \    \n      Example:\n\n\n\n\n\n      {\n      \"created\": \"2002-10-10T17:00:00Z\"\
          \n      }\n\n\n\n\n\n\n\n\n"
  6.8. Updated (Optional):
    count: 1
    mappings:
      081c248e1e4e8bf88f4515f2075331379a1a54fe2fe8c2a8845e2b7967826144:
      - major: '8'
        minor: '8'
        term: '8.8'
        title: 6.8. Updated (Optional)
        txt: "\n6.8. Updated (Optional)\n\n\n    \n      Standard metadata for identity\
          \ records includes a timestamp of the most recent change. The rules for\
          \ including a updated timestamp are:\n\n\n\n\nA DDO MUST have zero or one\
          \ property representing an updated\ntimestamp. It is RECOMMENDED to include\
          \ this property.\n  \nThe key for this property MUST be updated.\n  \nThe\
          \ value of this key MUST follow the formatting rules (3, 4, 5)\nfrom section\
          \ 6.7.\n  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"updated\"\
          : \"2016-10-17T02:41:00Z\"\n      }\n\n\n\n\n\n\n\n\n"
  6.9. Signature (Optional):
    count: 1
    mappings:
      66612429586691ec8dbc8d50653e63257f95f7c8d71435470eaa7960407e75be:
      - major: '8'
        minor: '9'
        term: '8.9'
        title: 6.9. Signature (Optional)
        txt: "\n6.9. Signature (Optional)\n\n\n    \n      A signature on a DDO is\
          \ cryptographic proof of the integrity of the DDO according to either:\n\
          \n\n\n\nThe identity owner as defined in section 6.4, or if not present:\n\
          \  \nThe guardian as defined in section 6.3.\n  \n\n\n\n    \n      This\
          \ signature is NOT proof of the binding between a DID and a DDO. See section\
          \ 9.2.\n\n    \n      The rules for a signature are:\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing a signature.\n  \nThe key for this\
          \ property MUST be signature.\n  \nThe value of this key MUST be a valid\
          \ JSON-LD signature as defined\nby Linked Data\nSignatures .\n  \n\n\n\n\
          \    \n      Example:\n\n\n\n\n\n      {\n      \"signature\": {\n     \
          \       \"type\": \"LinkedDataSignature2015\",\n            \"created\"\
          : \"2016-02-08T16:02:20Z\",\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1ja#keys-1\"\
          ,\n            \"signatureValue\": \"QNB13Y7Q9oLlDLL6AHyL31OE5fLji9DwJSA8qnv81oRaKonij8m+Jv4XdiEYvJ97iRlzKU/92/0LafSL5JftEgl960DLcbqMFxOtbAmFOIMa7eDcrgTL5ytXeYCYKLjHQG3s8a3UKDKRuEK54qK1G5hGKGoLgAVa6xgcDLjW7M19PEJV/c3HpGA7Eez6VFMoTt4yESjZvOXC97xN3KpshOx2HT/btgUbo0XjA1Oi0QHdgrLcUsQGt6w23RjeSToalrsA1G69OFeN2OiQrz9Jb4561hvKLSyWObwRmS6n5Vgr5xkvUm6MONRq0Vg33kXevoVM64KTBkISul61tzjn4w==\"\
          \n        }\n\n\n\n\n      }\n\n\n\n\n"
  7. DID Operations:
    count: 1
    mappings:
      1b1c6c510e152d0922d11d91d28ca17ca99d5cabae764a5bff31dae97c5af24d:
      - major: '9'
        minor: '0'
        term: '9.0'
        title: 7. DID Operations
        txt: "\n7. DID Operations\n\n\n    \n      To enable the full functionality\
          \ of DIDs and DDOs on a particular distributed ledger or network (called\
          \ the target system), a DID method specification MUST specify how each of\
          \ the following\n        CRUD\n       operations is performed by a client.\
          \ Each operation MUST be specified to the level of detail necessary to build\
          \ and test interoperable client implementations with the target system.\n\
          \n    \n      Note that, due to the specified contents of DDOs, these operations\
          \ can effectively be used to perform all the operations required of a CKMS\
          \ (cryptographic key management system), e.g.:\n\n\n\n\nKey registration\n\
          \  \nKey replacement\n  \nKey rotation\n  \nKey recovery\n  \nKey expiration\n\
          \  \n\n\n7.1. Create\n\n\n    \n      The DID method specification MUST\
          \ specify how a client creates a DID record\u2014the combination of a DID\
          \ and its associated DDO\u2014on the target system, including all cryptographic\
          \ operations necessary to establish proof of ownership.\n\n\n\n\n\n\n7.2.\
          \ Read/Verify\n\n\n    \n      The DID method specification MUST specify\
          \ how a client uses a DID to request a DDO from the target system, including\
          \ how the client can verify the authenticity of the response.\n\n\n\n\n\n\
          \n7.3. Update\n\n\n    \n      The DID method specification MUST specify\
          \ how a client can update a DID record on the target system, including all\
          \ cryptographic operations necessary to establish proof of control.\n\n\n\
          \n\n\n\n7.4. Delete/Revoke\n\n\n    \n      Although a core feature of distributed\
          \ ledgers is immutability, the DID method specification MUST specify how\
          \ a client can revoke a DID record on the target system, including all cryptographic\
          \ operations necessary to establish proof of revocation.\n\n\n\n\n\n\n"
  7.1. Create:
    count: 1
    mappings:
      32ff61711ef12a434ec915edf2a3c1ebb68fe19cf8e609ba6030a8f58505f500:
      - major: '9'
        minor: '1'
        term: '9.1'
        title: 7.1. Create
        txt: "\n7.1. Create\n\n\n    \n      The DID method specification MUST specify\
          \ how a client creates a DID record\u2014the combination of a DID and its\
          \ associated DDO\u2014on the target system, including all cryptographic\
          \ operations necessary to establish proof of ownership.\n\n\n\n\n\n"
  7.2. Read/Verify:
    count: 1
    mappings:
      ba86bb2d92f48030d82f7044c218886175756ee43e012b91764a442686af9453:
      - major: '9'
        minor: '2'
        term: '9.2'
        title: 7.2. Read/Verify
        txt: "\n7.2. Read/Verify\n\n\n    \n      The DID method specification MUST\
          \ specify how a client uses a DID to request a DDO from the target system,\
          \ including how the client can verify the authenticity of the response.\n\
          \n\n\n\n\n"
  7.3. Update:
    count: 1
    mappings:
      6d4c79f85ee8e4945a8c36a95009756f0da36902f116a12c25014cef8032d0f3:
      - major: '9'
        minor: '3'
        term: '9.3'
        title: 7.3. Update
        txt: "\n7.3. Update\n\n\n    \n      The DID method specification MUST specify\
          \ how a client can update a DID record on the target system, including all\
          \ cryptographic operations necessary to establish proof of control.\n\n\n\
          \n\n\n"
  7.4. Delete/Revoke:
    count: 1
    mappings:
      bd1f6c85dc318c6f9c611a2680973f3a63f3cbb1f93ed9f9225a9692c2283645:
      - major: '9'
        minor: '4'
        term: '9.4'
        title: 7.4. Delete/Revoke
        txt: "\n7.4. Delete/Revoke\n\n\n    \n      Although a core feature of distributed\
          \ ledgers is immutability, the DID method specification MUST specify how\
          \ a client can revoke a DID record on the target system, including all cryptographic\
          \ operations necessary to establish proof of revocation.\n\n\n\n\n\n"
  8. DID Resolvers:
    count: 1
    mappings:
      bb46f3cea23140e48a5a589a7fca909603f357de408b9c64d64e9ad75fbe40cf:
      - major: '10'
        minor: '0'
        term: '10.0'
        title: 8. DID Resolvers
        txt: "\n8. DID Resolvers\n\n\n    \n      A DID resolver is a software component\
          \ with an API designed to accept requests for DID lookups and execute the\
          \ corresponding DID method to retrieve the authoritative DDO. To be conformant\
          \ with this specification, a DID resolver:\n\n\n\n\nSHOULD validate that\
          \ a DID is valid according to its DID method\nspecification, otherwise it\
          \ should produce an error.\n  \nMUST conform to the requirements of the\
          \ applicable DID method\nspecification when performing DID resolution operations.\n\
          \  \nSHOULD offer the service of verifying the integrity of the DDO if it\n\
          is signed.\n  \nMAY offer the service of returning requested properties\
          \ of the DDO.\n  \n\n\n\n\n\n\n\n"
  9. Security Considerations:
    count: 1
    mappings:
      5484311b023cd1dde2ef3ba8bb6a86aac0a1a58267b8f7b09cc56dee1f9e5321:
      - major: '11'
        minor: '0'
        term: '11.0'
        title: 9. Security Considerations
        txt: "\n9. Security Considerations\n\n\n    \n      NOTE TO IMPLEMENTERS:\
          \ During the Implementer\u2019s Draft stage, this section focuses on security\
          \ topics that should be important in early implementations. The editors\
          \ are also seeking feedback on threats and threat mitigations that should\
          \ be reflected in this section or elsewhere in the spec.\n\n    \n     \
          \ As the root identity records for decentralized identities, DIDs and DDOs\
          \ are a vital component of decentralized identity management. They are also\
          \ the foundational building blocks of DPKI (decentralized public key infrastructure)\
          \ as an augmentation to conventional X.509 certificates.\n\n    \n     \
          \ As such, DIDs are designed to operate under the general Internet threat\
          \ model used by many IETF standards. We assume uncompromised endpoints,\
          \ but allow messages to be read or corrupted on the network. Protecting\
          \ against an attack when a system is compromised requires external key-signing\
          \ hardware. See also section 6.5 regarding key revocation and recovery.\n\
          \n    \n      For their part, the DLTs hosting DIDs and DDOs have special\
          \ security properties for preventing active attacks. Their design uses public/private\
          \ key cryptography to allow operation on passively monitored networks without\
          \ risking compromise of private keys. This is what makes DID architecture\
          \ and decentralized identity possible.\n\n\n\n\n9.1. Requirements of DID\
          \ Method Specifications\n\n\n\n\n\nDID method specifications MUST include\
          \ their own Security\nConsiderations sections.\n  \nThis section MUST consider\
          \ all the requirements mentioned in section\n5 of RFC 3552 \_(page\n27)\
          \ for the DID operations defined in the specification. In particular:\n\
          \  \n\n\n\n    \n      At least the following forms of attack MUST be considered:\
          \ eavesdropping, replay, message insertion, deletion, modification, and\
          \ man-in-the-middle. Potential denial of service attacks MUST be identified\
          \ as well. If the protocol incorporates cryptographic protection mechanisms,\
          \ it should be clearly indicated which portions of the data are protected\
          \ and what the protections are (i.e., integrity only, confidentiality, and/or\
          \ endpoint authentication, etc.). Some indication should also be given to\
          \ what sorts of attacks the cryptographic protection is susceptible. Data\
          \ which should be held secret (keying material, random seeds, etc.) should\
          \ be clearly labeled. If the technology involves authentication, particularly\
          \ user-host authentication, the security of the authentication method MUST\
          \ be clearly specified.\n\n\n\n\nThis section MUST also discuss, per Section\
          \ 5 of RFC 3552 , residual risks\n  (such as the risks from compromise in\
          \ a related protocol, incorrect\nimplementation, or cipher) after threat\
          \ mitigation has been deployed.\n  \nThis section MUST provide integrity\
          \ protection and update\nauthentication for all operations required by Section\
          \ 7 of this\nspecification (DID Operations).\n  \nWhere DID methods make\
          \ use of peer-to-peer computing resources (such\nas with all known DLTs),\
          \ the expected burdens of those resources SHOULD\nbe discussed in relation\
          \ to denial of service.\n  \nMethod-specific endpoint authentication MUST\
          \ be discussed. Where DID\nmethods make use of DLTs with varying network\
          \ topology, sometimes\noffered as \"light node\" or \u201C thin client \u201D\
          \nimplementations to reduce required computing resources, the security\n\
          assumptions of the topology available to implementations of the DID\nmethod\
          \ MUST be discussed.\n  \nDID methods MUST discuss the policy mechanism\
          \ by which DIDs are\nproven to be uniquely assigned. A DID fits the functional\
          \ definition of\na URN as defined in RFC\n2141 \u2014a persistent identifier\
          \ that is assigned once to a resource\nand never reassigned. In a security\
          \ context this is particularly\nimportant since a DID may be used to identify\
          \ a specific party subject\nto a specific set of authorization rights.\n\
          \  \nDID methods that introduce new authentication service endpoint types\n\
          \  (section 6.6) SHOULD consider the security requirements of the supported\n\
          authentication protocol.\n  \n\n\n\n\n\n\n\n\n9.2 Binding of Identity\n\n\
          \n\n\n\n\n9.2.1 Proving Ownership of a DID and DDO\n\n\n\n    \n      By\
          \ itself, a verified signature on self-signed DDO does not prove ownership\
          \ of a DID. It only proves the following:\n\n\n\n\nThe DDO has not been\
          \ tampered with since it was registered.\n  \nThe owner of the DDO controlled\
          \ the private key used for the\nsignature at the time the signature was\
          \ generated.\n  \n\n\n\n    \n      Proving ownership of a DID, i.e., the\
          \ binding between the DID and the DDO that describes it, requires a two\
          \ step process:\n\n\n\n\nResolving the DID to a DDO according to its DID\
          \ method\nspecification.\n  \nVerifying that the id property of the resulting\
          \ DDO matches the DID\nthat was resolved.\n  \n\n\n\n    \n      It should\
          \ be noted that this process proves ownership of a DID and DDO regardless\
          \ of whether the DDO is signed.\n\n\n\n\n\n9.2.2 Proving Ownership of a\
          \ Public Key\n\n\n\n    \n      There are two methods for proving ownership\
          \ of the private key corresponding to a public key description in the DDO:\
          \ static and dynamic.\n\n    \n      The static method is to sign the DDO\
          \ with the private key. This proves ownership of the private key at a time\
          \ no later than the DDO was registered.\n\n    \n      If the DDO is not\
          \ signed, ownership of a public key described in the DDO may still be proven\
          \ dynamically as follows:\n\n\n\n\nSend a challenge message containing a\
          \ public key description from\nthe DDO and a nonce to an appropriate service\
          \ endpoint described in the\nDDO.\n  \nVerify the signature of the response\
          \ message against the public key\ndescription.\n  \n\n\n\n\n\n\n\n9.2.3\
          \ Identity Owner Authentication and Verifiable Claims\n\n\n\n    \n    \
          \  A DID and DDO do not inherently carry any\n        PII\n       (personally-identifiable\
          \ information). The process of binding a DID to the real-world owner of\
          \ an identity using claims about the owner is out of scope for this specification.\
          \ However this topic is the focus of the\n        verifiable claims\n  \
          \     standardization work at the W3C (where the term \"DID\" originated).\n\
          \n\n\n\n\n\n9.3 Authentication Service Endpoints\n\n\n    \n      If a DDO\
          \ publishes a service endpoint intended for authentication or authorization\
          \ of an identity owner (section 6.6), it is the responsibility of the service\
          \ endpoint provider, identity owner, and/or relying party to comply with\
          \ the requirements of the authentication protocol(s) supported at that service\
          \ endpoint.\n\n\n\n\n\n\n9.4 Non-Repudiation\n\n\n    \n      Non-repudiation\
          \ of DIDs and DDO updates is supported under the assumption that: (1) the\
          \ identity owner is monitoring for unauthorized updates (see section 9.5)\
          \ and (2) the identity owner has had adequate opportunity to revoke malicious\
          \ updates according to the DID method's access control mechanism (section\
          \ 6.5). This capability is further supported if timestamps are included\
          \ (sections 6.7 and 6.8) and the target DLT system supports timestamps.\n\
          \n\n\n\n\n\n9.5 Notification of DDO Changes\n\n\n    \n      One mitigation\
          \ against unauthorized changes to a DDO is monitoring and actively notifying\
          \ the identity owner when there are changes. This is analogous to helping\
          \ prevent account takeover on conventional username/password accounts by\
          \ sending password reset notifications to the email addresses on file.\n\
          \n    \n      In the case of a DID, where there is no intermediary registrar\
          \ or account provider to generate the notification, the following approaches\
          \ are RECOMMENDED:\n\n\n\n\nSubscriptions. If the ledger or network on which\
          \ the DID is\nregistered directly supports change notifications, this service\
          \ can be\noffered to DID owners. Notifications may be sent directly to the\n\
          relevant service endpoints listed in an existing DID.\n  \nSelf-monitoring.\
          \ An identity owner may employ its own local or\nonline agent to periodically\
          \ monitor for changes to a DDO.\n  \nThird-party monitoring. An identity\
          \ owner may rely on a third party\nmonitoring service, however this introduces\
          \ another vector of attack.\n  \n\n\n\n\n\n\n\n\n9.6 Key and Signature Expiration\n\
          \n\n    \n      In a decentralized identity architecture, there are no centralized\
          \ authorities to enforce key or signature expiration policies. Therefore\
          \ DID resolvers and other client applications SHOULD validate that keys\
          \ have not expired. Since some use cases may have legitimate reasons why\
          \ already-expired keys can be extended, a key expiration SHOULD NOT prevent\
          \ any further use of the key, and implementations SHOULD attempt to update\
          \ its status upon encountering it in a signature.\n\n\n\n\n\n\n9.7 Key Revocation\
          \ and Recovery\n\n\n    \n      Section 7 specifies the DID operations that\
          \ must be supported by a DID method specification, including revocation\
          \ of a DDO by replacing it with an updated DDO. In general, checking for\
          \ key revocation on DLT-based methods is expected to be handled in a manner\
          \ similar to checking the balance of a cryptocurrency account on a distributed\
          \ ledger: if the balance is empty, the entire DID is revoked.\n\n    \n\
          \      DID method specifications SHOULD enable support for a quorum of trusted\
          \ parties to enable key recovery. Some of the facilities to do so are suggested\
          \ in section 6.5, Proof of Control. Note that not all DID method specifications\
          \ will recognize control from DIDs registered using other DID methods and\
          \ they MAY restrict third-party control to DIDs that use the same method.\n\
          \n    \n      Access control and key recovery in a DID method specification\
          \ MAY also include a time lock feature to protect against key compromise\
          \ by maintaining a second track of control for recovery. Further specification\
          \ of this type of control is a matter for future work (see section 11.4).\n\
          \n\n\n\n\n\n"
  9.1. Requirements of DID Method Specifications:
    count: 1
    mappings:
      5a377698d505479314fdee7b89b7cc69515697883b55fe6ba970dbd17b103ae7:
      - major: '11'
        minor: '1'
        term: '11.1'
        title: 9.1. Requirements of DID Method Specifications
        txt: "\n9.1. Requirements of DID Method Specifications\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Security\nConsiderations sections.\n\
          \  \nThis section MUST consider all the requirements mentioned in section\n\
          5 of RFC 3552 \_(page\n27) for the DID operations defined in the specification.\
          \ In particular:\n  \n\n\n\n    \n      At least the following forms of\
          \ attack MUST be considered: eavesdropping, replay, message insertion, deletion,\
          \ modification, and man-in-the-middle. Potential denial of service attacks\
          \ MUST be identified as well. If the protocol incorporates cryptographic\
          \ protection mechanisms, it should be clearly indicated which portions of\
          \ the data are protected and what the protections are (i.e., integrity only,\
          \ confidentiality, and/or endpoint authentication, etc.). Some indication\
          \ should also be given to what sorts of attacks the cryptographic protection\
          \ is susceptible. Data which should be held secret (keying material, random\
          \ seeds, etc.) should be clearly labeled. If the technology involves authentication,\
          \ particularly user-host authentication, the security of the authentication\
          \ method MUST be clearly specified.\n\n\n\n\nThis section MUST also discuss,\
          \ per Section 5 of RFC 3552 , residual risks\n  (such as the risks from\
          \ compromise in a related protocol, incorrect\nimplementation, or cipher)\
          \ after threat mitigation has been deployed.\n  \nThis section MUST provide\
          \ integrity protection and update\nauthentication for all operations required\
          \ by Section 7 of this\nspecification (DID Operations).\n  \nWhere DID methods\
          \ make use of peer-to-peer computing resources (such\nas with all known\
          \ DLTs), the expected burdens of those resources SHOULD\nbe discussed in\
          \ relation to denial of service.\n  \nMethod-specific endpoint authentication\
          \ MUST be discussed. Where DID\nmethods make use of DLTs with varying network\
          \ topology, sometimes\noffered as \"light node\" or \u201C thin client \u201D\
          \nimplementations to reduce required computing resources, the security\n\
          assumptions of the topology available to implementations of the DID\nmethod\
          \ MUST be discussed.\n  \nDID methods MUST discuss the policy mechanism\
          \ by which DIDs are\nproven to be uniquely assigned. A DID fits the functional\
          \ definition of\na URN as defined in RFC\n2141 \u2014a persistent identifier\
          \ that is assigned once to a resource\nand never reassigned. In a security\
          \ context this is particularly\nimportant since a DID may be used to identify\
          \ a specific party subject\nto a specific set of authorization rights.\n\
          \  \nDID methods that introduce new authentication service endpoint types\n\
          \  (section 6.6) SHOULD consider the security requirements of the supported\n\
          authentication protocol.\n  \n\n\n\n\n\n\n\n"
  9.2 Binding of Identity:
    count: 1
    mappings:
      b0c185ab58c85cdf585ee5d315d37a631c012a157fc51cd7f2de65fac5b66ee6:
      - major: '11'
        minor: '2'
        term: '11.2'
        title: 9.2 Binding of Identity
        txt: "\n9.2 Binding of Identity\n\n\n\n\n\n\n9.2.1 Proving Ownership of a\
          \ DID and DDO\n\n\n\n    \n      By itself, a verified signature on self-signed\
          \ DDO does not prove ownership of a DID. It only proves the following:\n\
          \n\n\n\nThe DDO has not been tampered with since it was registered.\n  \n\
          The owner of the DDO controlled the private key used for the\nsignature\
          \ at the time the signature was generated.\n  \n\n\n\n    \n      Proving\
          \ ownership of a DID, i.e., the binding between the DID and the DDO that\
          \ describes it, requires a two step process:\n\n\n\n\nResolving the DID\
          \ to a DDO according to its DID method\nspecification.\n  \nVerifying that\
          \ the id property of the resulting DDO matches the DID\nthat was resolved.\n\
          \  \n\n\n\n    \n      It should be noted that this process proves ownership\
          \ of a DID and DDO regardless of whether the DDO is signed.\n\n\n\n\n\n\
          9.2.2 Proving Ownership of a Public Key\n\n\n\n    \n      There are two\
          \ methods for proving ownership of the private key corresponding to a public\
          \ key description in the DDO: static and dynamic.\n\n    \n      The static\
          \ method is to sign the DDO with the private key. This proves ownership\
          \ of the private key at a time no later than the DDO was registered.\n\n\
          \    \n      If the DDO is not signed, ownership of a public key described\
          \ in the DDO may still be proven dynamically as follows:\n\n\n\n\nSend a\
          \ challenge message containing a public key description from\nthe DDO and\
          \ a nonce to an appropriate service endpoint described in the\nDDO.\n  \n\
          Verify the signature of the response message against the public key\ndescription.\n\
          \  \n\n\n\n\n\n\n\n9.2.3 Identity Owner Authentication and Verifiable Claims\n\
          \n\n\n    \n      A DID and DDO do not inherently carry any\n        PII\n\
          \       (personally-identifiable information). The process of binding a\
          \ DID to the real-world owner of an identity using claims about the owner\
          \ is out of scope for this specification. However this topic is the focus\
          \ of the\n        verifiable claims\n       standardization work at the\
          \ W3C (where the term \"DID\" originated).\n\n\n\n\n\n"
  9.3 Authentication Service Endpoints:
    count: 1
    mappings:
      b5e9ec14f0179f7fc46c5d90bd18a2c90ecf0f2fbfb0313c137459427a4b4f92:
      - major: '11'
        minor: '3'
        term: '11.3'
        title: 9.3 Authentication Service Endpoints
        txt: "\n9.3 Authentication Service Endpoints\n\n\n    \n      If a DDO publishes\
          \ a service endpoint intended for authentication or authorization of an\
          \ identity owner (section 6.6), it is the responsibility of the service\
          \ endpoint provider, identity owner, and/or relying party to comply with\
          \ the requirements of the authentication protocol(s) supported at that service\
          \ endpoint.\n\n\n\n\n\n"
  9.4 Non-Repudiation:
    count: 1
    mappings:
      76632fc7f901fda63366baf7ad620bf3182af77713151bfcdefa32af902eeaf8:
      - major: '11'
        minor: '4'
        term: '11.4'
        title: 9.4 Non-Repudiation
        txt: "\n9.4 Non-Repudiation\n\n\n    \n      Non-repudiation of DIDs and DDO\
          \ updates is supported under the assumption that: (1) the identity owner\
          \ is monitoring for unauthorized updates (see section 9.5) and (2) the identity\
          \ owner has had adequate opportunity to revoke malicious updates according\
          \ to the DID method's access control mechanism (section 6.5). This capability\
          \ is further supported if timestamps are included (sections 6.7 and 6.8)\
          \ and the target DLT system supports timestamps.\n\n\n\n\n\n"
  9.5 Notification of DDO Changes:
    count: 1
    mappings:
      747d4e5232d3bf32cb00f43b7bb4c7f3348f657739d0abe3afcca4812bfe482b:
      - major: '11'
        minor: '5'
        term: '11.5'
        title: 9.5 Notification of DDO Changes
        txt: "\n9.5 Notification of DDO Changes\n\n\n    \n      One mitigation against\
          \ unauthorized changes to a DDO is monitoring and actively notifying the\
          \ identity owner when there are changes. This is analogous to helping prevent\
          \ account takeover on conventional username/password accounts by sending\
          \ password reset notifications to the email addresses on file.\n\n    \n\
          \      In the case of a DID, where there is no intermediary registrar or\
          \ account provider to generate the notification, the following approaches\
          \ are RECOMMENDED:\n\n\n\n\nSubscriptions. If the ledger or network on which\
          \ the DID is\nregistered directly supports change notifications, this service\
          \ can be\noffered to DID owners. Notifications may be sent directly to the\n\
          relevant service endpoints listed in an existing DID.\n  \nSelf-monitoring.\
          \ An identity owner may employ its own local or\nonline agent to periodically\
          \ monitor for changes to a DDO.\n  \nThird-party monitoring. An identity\
          \ owner may rely on a third party\nmonitoring service, however this introduces\
          \ another vector of attack.\n  \n\n\n\n\n\n\n\n"
  9.6 Key and Signature Expiration:
    count: 1
    mappings:
      5d020a76cd239d7f78336173b18542c0d71744ec1cca34fe32536235c6292262:
      - major: '11'
        minor: '6'
        term: '11.6'
        title: 9.6 Key and Signature Expiration
        txt: "\n9.6 Key and Signature Expiration\n\n\n    \n      In a decentralized\
          \ identity architecture, there are no centralized authorities to enforce\
          \ key or signature expiration policies. Therefore DID resolvers and other\
          \ client applications SHOULD validate that keys have not expired. Since\
          \ some use cases may have legitimate reasons why already-expired keys can\
          \ be extended, a key expiration SHOULD NOT prevent any further use of the\
          \ key, and implementations SHOULD attempt to update its status upon encountering\
          \ it in a signature.\n\n\n\n\n\n"
  9.7 Key Revocation and Recovery:
    count: 1
    mappings:
      8a229330a140481cafa7eebe811ad3b7969c7b934b89af78867b8960e585da66:
      - major: '11'
        minor: '7'
        term: '11.7'
        title: 9.7 Key Revocation and Recovery
        txt: "\n9.7 Key Revocation and Recovery\n\n\n    \n      Section 7 specifies\
          \ the DID operations that must be supported by a DID method specification,\
          \ including revocation of a DDO by replacing it with an updated DDO. In\
          \ general, checking for key revocation on DLT-based methods is expected\
          \ to be handled in a manner similar to checking the balance of a cryptocurrency\
          \ account on a distributed ledger: if the balance is empty, the entire DID\
          \ is revoked.\n\n    \n      DID method specifications SHOULD enable support\
          \ for a quorum of trusted parties to enable key recovery. Some of the facilities\
          \ to do so are suggested in section 6.5, Proof of Control. Note that not\
          \ all DID method specifications will recognize control from DIDs registered\
          \ using other DID methods and they MAY restrict third-party control to DIDs\
          \ that use the same method.\n\n    \n      Access control and key recovery\
          \ in a DID method specification MAY also include a time lock feature to\
          \ protect against key compromise by maintaining a second track of control\
          \ for recovery. Further specification of this type of control is a matter\
          \ for future work (see section 11.4).\n\n\n\n\n\n"
2:
  'Appendix B: The Generic DID Context for JSON-LD':
    count: 2
    mappings:
      e0671376e97204071d41783dc129f244b85d9f18815667ded73ecbd6b46e50dc:
      - major: '16'
        minor: '0'
        term: '16.0'
        title: 'Appendix B: The Generic DID Context for JSON-LD'
        txt: "\nAppendix B: The Generic DID Context for JSON-LD\n\nThis JSON-LD document\
          \ is the generic context for all DDOs. See section\n6.1 for the rules for\
          \ using this context.\n\n\nFor this implementer\u2019s draft, the URL for\
          \ this context is:\n\n\n\nhttps://github.com/WebOfTrustInfo/rebooting-the-web-of-trust-fall2016/blob/master/final-documents/did-context-v1-draft-01.txt\n\
          \n\n      {\n      \"@context\": [\"https://w3id.org/identity/v1\", {\n\
          \            \"ctrl\": \"https://w3id.org/control#\",\n            \"ddo\"\
          : \"https://w3id.org/ddo#\",\n            \"control\": {\n             \
          \   \"@id\": \"ddo:control\",\n                \"@type\": \"@id\"\n    \
          \        },\n            \"curve\": \"sec:curve\",\n            \"guardian\"\
          : \"ddo:guardian\",\n            \"minimumSignatures\": {\n            \
          \    \"@id\": \"ctrl:minimumSignatures\",\n                \"@type\": \"\
          xsd:integer\"\n            },\n            \"openid\": \"ddo:openid\",\n\
          \            \"publicKeyBase64\": \"sec:publicKeyBase64\",\n           \
          \ \"service\": \"ddo:service\",\n            \"signer\": \"sec:signer\"\
          ,\n            \"updated\": {\n                \"@id\": \"ddo:updated\"\
          ,\n                \"@type\": \"xsd:dateTime\"\n            },\n       \
          \     \"xdi\": \"ddo:xdi\",\n            \"EdDsaPublicKey\": \"sec:EdDsaPublicKey\"\
          ,\n            \"RsaPublicKey\": \"sec:RsaPublicKey\",\n            \"OrControl\"\
          : \"ctrl:OrControl\",\n            \"AndControl\": \"ctrl:AndControl\",\n\
          \            \"MofNControl\": \"ctrl:MofNControl\"\n        }]\n      }\n\
          \n\n\n"
      - major: '16'
        minor: '0'
        term: '16.0'
        title: 'Appendix B: The Generic DID Context for JSON-LD'
        txt: "\nAppendix B: The Generic DID Context for JSON-LD\n\nThis JSON-LD document\
          \ is the generic context for all DDOs. See section\n6.1 for the rules for\
          \ using this context.\n\n\nFor this implementer\u2019s draft, the URL for\
          \ this context is:\n\n\n\nhttps://github.com/WebOfTrustInfo/rebooting-the-web-of-trust-fall2016/blob/master/final-documents/did-context-v1-draft-01.txt\n\
          \n\n      {\n      \"@context\": [\"https://w3id.org/identity/v1\", {\n\
          \            \"ctrl\": \"https://w3id.org/control#\",\n            \"ddo\"\
          : \"https://w3id.org/ddo#\",\n            \"control\": {\n             \
          \   \"@id\": \"ddo:control\",\n                \"@type\": \"@id\"\n    \
          \        },\n            \"curve\": \"sec:curve\",\n            \"guardian\"\
          : \"ddo:guardian\",\n            \"minimumSignatures\": {\n            \
          \    \"@id\": \"ctrl:minimumSignatures\",\n                \"@type\": \"\
          xsd:integer\"\n            },\n            \"openid\": \"ddo:openid\",\n\
          \            \"publicKeyBase64\": \"sec:publicKeyBase64\",\n           \
          \ \"service\": \"ddo:service\",\n            \"signer\": \"sec:signer\"\
          ,\n            \"updated\": {\n                \"@id\": \"ddo:updated\"\
          ,\n                \"@type\": \"xsd:dateTime\"\n            },\n       \
          \     \"xdi\": \"ddo:xdi\",\n            \"EdDsaPublicKey\": \"sec:EdDsaPublicKey\"\
          ,\n            \"RsaPublicKey\": \"sec:RsaPublicKey\",\n            \"OrControl\"\
          : \"ctrl:OrControl\",\n            \"AndControl\": \"ctrl:AndControl\",\n\
          \            \"MofNControl\": \"ctrl:MofNControl\"\n        }]\n      }\n\
          \n\n\n"
      e1fd2dededcc42fa18a9c41e845f0eb197fccc79d6bc9b8e8aa28dd7b693b45c:
      - major: '16'
        minor: '0'
        term: '16.0'
        title: 'Appendix B: The Generic DID Context for JSON-LD'
        txt: "\nAppendix B: The Generic DID Context for JSON-LD\n\nThis JSON-LD document\
          \ is the generic context for all DDOs. See section\n6.1 for the rules for\
          \ using this context.\n\n\nFor this implementer\u2019s draft, the URL for\
          \ this context is:\n\n\n\nhttps://github.com/WebOfTrustInfo/rebooting-the-web-of-trust-fall2016/blob/master/final-documents/did-context-v1-draft-01.txt\n\
          \n\n{\n  \"@context\": [\"https://w3id.org/identity/v1\", {\n    \"ctrl\"\
          : \"https://w3id.org/control#\",\n    \"ddo\": \"https://w3id.org/ddo#\"\
          ,\n    \"control\": {\n        \"@id\": \"ddo:control\",\n        \"@type\"\
          : \"@id\"\n    },\n    \"curve\": \"sec:curve\",\n    \"guardian\": \"ddo:guardian\"\
          ,\n    \"minimumSignatures\": {\n        \"@id\": \"ctrl:minimumSignatures\"\
          ,\n        \"@type\": \"xsd:integer\"\n    },\n    \"openid\": \"ddo:openid\"\
          ,\n    \"publicKeyBase64\": \"sec:publicKeyBase64\",\n    \"service\": \"\
          ddo:service\",\n    \"signer\": \"sec:signer\",\n    \"updated\": {\n  \
          \      \"@id\": \"ddo:updated\",\n        \"@type\": \"xsd:dateTime\"\n\
          \    },\n    \"xdi\": \"ddo:xdi\",\n    \"EdDsaPublicKey\": \"sec:EdDsaPublicKey\"\
          ,\n    \"RsaPublicKey\": \"sec:RsaPublicKey\",\n    \"OrControl\": \"ctrl:OrControl\"\
          ,\n    \"AndControl\": \"ctrl:AndControl\",\n    \"MofNControl\": \"ctrl:MofNControl\"\
          \n  }]\n}\n\n\n"
      - major: '16'
        minor: '0'
        term: '16.0'
        title: 'Appendix B: The Generic DID Context for JSON-LD'
        txt: "\nAppendix B: The Generic DID Context for JSON-LD\n\nThis JSON-LD document\
          \ is the generic context for all DDOs. See section\n6.1 for the rules for\
          \ using this context.\n\n\nFor this implementer\u2019s draft, the URL for\
          \ this context is:\n\n\n\nhttps://github.com/WebOfTrustInfo/rebooting-the-web-of-trust-fall2016/blob/master/final-documents/did-context-v1-draft-01.txt\n\
          \n\n{\n  \"@context\": [\"https://w3id.org/identity/v1\", {\n    \"ctrl\"\
          : \"https://w3id.org/control#\",\n    \"ddo\": \"https://w3id.org/ddo#\"\
          ,\n    \"control\": {\n        \"@id\": \"ddo:control\",\n        \"@type\"\
          : \"@id\"\n    },\n    \"curve\": \"sec:curve\",\n    \"guardian\": \"ddo:guardian\"\
          ,\n    \"minimumSignatures\": {\n        \"@id\": \"ctrl:minimumSignatures\"\
          ,\n        \"@type\": \"xsd:integer\"\n    },\n    \"openid\": \"ddo:openid\"\
          ,\n    \"publicKeyBase64\": \"sec:publicKeyBase64\",\n    \"service\": \"\
          ddo:service\",\n    \"signer\": \"sec:signer\",\n    \"updated\": {\n  \
          \      \"@id\": \"ddo:updated\",\n        \"@type\": \"xsd:dateTime\"\n\
          \    },\n    \"xdi\": \"ddo:xdi\",\n    \"EdDsaPublicKey\": \"sec:EdDsaPublicKey\"\
          ,\n    \"RsaPublicKey\": \"sec:RsaPublicKey\",\n    \"OrControl\": \"ctrl:OrControl\"\
          ,\n    \"AndControl\": \"ctrl:AndControl\",\n    \"MofNControl\": \"ctrl:MofNControl\"\
          \n  }]\n}\n\n\n"
  Binding of Identity:
    count: 2
    mappings:
      1572d5b70212b71a666398ce59e4fc91b8f4cd4fc18629631064649a1af4efcd:
      - major: '11'
        minor: '2'
        term: '11.2'
        title: Binding of Identity
        txt: "\nBinding of Identity\n\n\n\n\n\n\n9.2.1 Proving Ownership of a DID\
          \ and DDO\n\n\n\n    \n      By itself, a verified signature on self-signed\
          \ DDO does not prove ownership of a DID. It only proves the following:\n\
          \n\n\n\n\nThe DDO has not been tampered with since it was registered.\n\
          \  \n\nThe owner of the DDO controlled the private key used for the\nsignature\
          \ at the time the signature was generated.\n  \n\n\n\n    \n      Proving\
          \ ownership of a DID, i.e., the binding between the DID and the DDO that\
          \ describes it, requires a two step process:\n\n\n\n\n\nResolving the DID\
          \ to a DDO according to its DID method\nspecification.\n  \n\nVerifying\
          \ that the id property of the resulting DDO matches the DID\nthat was resolved.\n\
          \  \n\n\n\n    \n      It should be noted that this process proves ownership\
          \ of a DID and DDO regardless of whether the DDO is signed.\n\n\n\n\n\n\
          9.2.2 Proving Ownership of a Public Key\n\n\n\n    \n      There are two\
          \ methods for proving ownership of the private key corresponding to a public\
          \ key description in the DDO: static and dynamic.\n\n    \n      The static\
          \ method is to sign the DDO with the private key. This proves ownership\
          \ of the private key at a time no later than the DDO was registered.\n\n\
          \    \n      If the DDO is not signed, ownership of a public key described\
          \ in the DDO may still be proven dynamically as follows:\n\n\n\n\n\nSend\
          \ a challenge message containing a public key description from\nthe DDO\
          \ and a nonce to an appropriate service endpoint described in the\nDDO.\n\
          \  \n\nVerify the signature of the response message against the public key\n\
          description.\n  \n\n\n\n\n\n\n\n9.2.3 Identity Owner Authentication and\
          \ Verifiable Claims\n\n\n\n    \n      A DID and DDO do not inherently carry\
          \ any\n        PII\n       (personally-identifiable information). The process\
          \ of binding a DID to the real-world owner of an identity using claims about\
          \ the owner is out of scope for this specification. However this topic is\
          \ the focus of the\n        verifiable claims\n       standardization work\
          \ at the W3C (where the term \"DID\" originated).\n\n\n\n\n\n"
      - major: '11'
        minor: '2'
        term: '11.2'
        title: Binding of Identity
        txt: "\nBinding of Identity\n\n\n\n\n\n\n9.2.1 Proving Ownership of a DID\
          \ and DDO\n\n\n\n    \n      By itself, a verified signature on self-signed\
          \ DDO does not prove ownership of a DID. It only proves the following:\n\
          \n\n\n\n\nThe DDO has not been tampered with since it was registered.\n\
          \  \n\nThe owner of the DDO controlled the private key used for the\nsignature\
          \ at the time the signature was generated.\n  \n\n\n\n    \n      Proving\
          \ ownership of a DID, i.e., the binding between the DID and the DDO that\
          \ describes it, requires a two step process:\n\n\n\n\n\nResolving the DID\
          \ to a DDO according to its DID method\nspecification.\n  \n\nVerifying\
          \ that the id property of the resulting DDO matches the DID\nthat was resolved.\n\
          \  \n\n\n\n    \n      It should be noted that this process proves ownership\
          \ of a DID and DDO regardless of whether the DDO is signed.\n\n\n\n\n\n\
          9.2.2 Proving Ownership of a Public Key\n\n\n\n    \n      There are two\
          \ methods for proving ownership of the private key corresponding to a public\
          \ key description in the DDO: static and dynamic.\n\n    \n      The static\
          \ method is to sign the DDO with the private key. This proves ownership\
          \ of the private key at a time no later than the DDO was registered.\n\n\
          \    \n      If the DDO is not signed, ownership of a public key described\
          \ in the DDO may still be proven dynamically as follows:\n\n\n\n\n\nSend\
          \ a challenge message containing a public key description from\nthe DDO\
          \ and a nonce to an appropriate service endpoint described in the\nDDO.\n\
          \  \n\nVerify the signature of the response message against the public key\n\
          description.\n  \n\n\n\n\n\n\n\n9.2.3 Identity Owner Authentication and\
          \ Verifiable Claims\n\n\n\n    \n      A DID and DDO do not inherently carry\
          \ any\n        PII\n       (personally-identifiable information). The process\
          \ of binding a DID to the real-world owner of an identity using claims about\
          \ the owner is out of scope for this specification. However this topic is\
          \ the focus of the\n        verifiable claims\n       standardization work\
          \ at the W3C (where the term \"DID\" originated).\n\n\n\n\n\n"
      92106f0e0d8f133e5c661f3e1d0e0ecda34195abb3213b0dfff226c046f68855:
      - major: '11'
        minor: '2'
        term: '11.2'
        title: Binding of Identity
        txt: "\nBinding of Identity\n\n\n\n\n\n\n9.2.1 Proving Ownership of a DID\
          \ and DDO\n\n\n\n    \n      By itself, a verified signature on self-signed\
          \ DDO does not prove ownership of a DID. It only proves the following:\n\
          \n\n\n\nThe DDO has not been tampered with since it was registered.\n  \n\
          The owner of the DDO controlled the private key used for the\nsignature\
          \ at the time the signature was generated.\n  \n\n\n\n    \n      Proving\
          \ ownership of a DID, i.e., the binding between the DID and the DDO that\
          \ describes it, requires a two step process:\n\n\n\n\nResolving the DID\
          \ to a DDO according to its DID method\nspecification.\n  \nVerifying that\
          \ the id property of the resulting DDO matches the DID\nthat was resolved.\n\
          \  \n\n\n\n    \n      It should be noted that this process proves ownership\
          \ of a DID and DDO regardless of whether the DDO is signed.\n\n\n\n\n\n\
          9.2.2 Proving Ownership of a Public Key\n\n\n\n    \n      There are two\
          \ methods for proving ownership of the private key corresponding to a public\
          \ key description in the DDO: static and dynamic.\n\n    \n      The static\
          \ method is to sign the DDO with the private key. This proves ownership\
          \ of the private key at a time no later than the DDO was registered.\n\n\
          \    \n      If the DDO is not signed, ownership of a public key described\
          \ in the DDO may still be proven dynamically as follows:\n\n\n\n\nSend a\
          \ challenge message containing a public key description from\nthe DDO and\
          \ a nonce to an appropriate service endpoint described in the\nDDO.\n  \n\
          Verify the signature of the response message against the public key\ndescription.\n\
          \  \n\n\n\n\n\n\n\n9.2.3 Identity Owner Authentication and Verifiable Claims\n\
          \n\n\n    \n      A DID and DDO do not inherently carry any\n        PII\n\
          \       (personally-identifiable information). The process of binding a\
          \ DID to the real-world owner of an identity using claims about the owner\
          \ is out of scope for this specification. However this topic is the focus\
          \ of the\n        verifiable claims\n       standardization work at the\
          \ W3C (where the term \"DID\" originated).\n\n\n\n\n\n"
  Context (Required):
    count: 2
    mappings:
      29680367e8064edfe8d5851cf823cc31bb5c60d963b9013d6c6deddf9b8a983d:
      - major: '8'
        minor: '1'
        term: '8.1'
        title: Context (Required)
        txt: "\nContext (Required)\n\nJSON objects in JSON-LD format must include\
          \ a JSON-LD context statement.\nThe rules for this statement are:\n\n\n\
          A DDO MUST have exactly one top-level context statement.\n  \nThis statement\
          \ MUST be the first line in the JSON object. (This is\nnot strictly necessary\
          \ under JSON-LD but required for DDOs.)\n  \nThe key for this property MUST\
          \ be @context.\n  \nThe value of this key MUST be the URL for the generic\
          \ DID context as\nspecified in Appendix B.\n  \n\n\nExample (using an example\
          \ URL):\n\n\n  {\n\n\n  \"@context\": \"https://example.org/did/v1\"\n\n\
          \n  }\n\n\nDID method specifications MAY define their own JSON-LD contexts.\
          \ However\nit is NOT RECOMMENDED to define a new context unless necessary\
          \ to\nproperly implement the method. Method-specific contexts MUST NOT\n\
          override the terms defined in the generic DID context listed in Appendix\n\
          B.\n\n\n"
      5876de3c8adea2def8a456eacdc5c107e04d55de28910270741062fa8ede84e6:
      - major: '8'
        minor: '1'
        term: '8.1'
        title: Context (Required)
        txt: "\nContext (Required)\n\nJSON objects in JSON-LD format must include\
          \ a JSON-LD context statement.\nThe rules for this statement are:\n\n\n\n\
          A DDO MUST have exactly one top-level context statement.\n  \n\nThis statement\
          \ MUST be the first line in the JSON object. (This is\nnot strictly necessary\
          \ under JSON-LD but required for DDOs.)\n  \n\nThe key for this property\
          \ MUST be @context.\n  \n\nThe value of this key MUST be the URL for the\
          \ generic DID context as\nspecified in Appendix B.\n  \n\n\nExample (using\
          \ an example URL):\n\n\n  {\n\n\n  \"@context\": \"https://example.org/did/v1\"\
          \n\n\n  }\n\n\nDID method specifications MAY define their own JSON-LD contexts.\
          \ However\nit is NOT RECOMMENDED to define a new context unless necessary\
          \ to\nproperly implement the method. Method-specific contexts MUST NOT\n\
          override the terms defined in the generic DID context listed in Appendix\n\
          B.\n\n\n"
      - major: '8'
        minor: '1'
        term: '8.1'
        title: Context (Required)
        txt: "\nContext (Required)\n\nJSON objects in JSON-LD format must include\
          \ a JSON-LD context statement.\nThe rules for this statement are:\n\n\n\n\
          A DDO MUST have exactly one top-level context statement.\n  \n\nThis statement\
          \ MUST be the first line in the JSON object. (This is\nnot strictly necessary\
          \ under JSON-LD but required for DDOs.)\n  \n\nThe key for this property\
          \ MUST be @context.\n  \n\nThe value of this key MUST be the URL for the\
          \ generic DID context as\nspecified in Appendix B.\n  \n\n\nExample (using\
          \ an example URL):\n\n\n  {\n\n\n  \"@context\": \"https://example.org/did/v1\"\
          \n\n\n  }\n\n\nDID method specifications MAY define their own JSON-LD contexts.\
          \ However\nit is NOT RECOMMENDED to define a new context unless necessary\
          \ to\nproperly implement the method. Method-specific contexts MUST NOT\n\
          override the terms defined in the generic DID context listed in Appendix\n\
          B.\n\n\n"
  Create:
    count: 2
    mappings:
      bf635bc9e11c98ec02a9dd3dfb50e80f50a83e0f1afeba7e5c194e219851cbf5:
      - major: '9'
        minor: '1'
        term: '9.1'
        title: Create
        txt: "\nCreate\n\n\n    \n      The DID method specification MUST specify\
          \ how a client creates a DID record\u2014the combination of a DID and its\
          \ associated DDO\u2014on the target system, including all cryptographic\
          \ operations necessary to establish proof of ownership.\n\n\n\n\n\n"
      cf777964694e4975f688e348b7821da86d06dc69fa4a1d5568ad53d4bbf04a26:
      - major: '9'
        minor: '1'
        term: '9.1'
        title: Create
        txt: "\nCreate\n\nThe DID method specification MUST specify how a client creates\
          \ a\nDID record\u2014the combination of a DID and its associated DDO\u2014\
          on the\ntarget system, including all cryptographic operations necessary\n\
          to establish proof of ownership.\n\n\n"
      - major: '9'
        minor: '1'
        term: '9.1'
        title: Create
        txt: "\nCreate\n\nThe DID method specification MUST specify how a client creates\
          \ a\nDID record\u2014the combination of a DID and its associated DDO\u2014\
          on the\ntarget system, including all cryptographic operations necessary\n\
          to establish proof of ownership.\n\n\n"
  Created (Optional):
    count: 2
    mappings:
      3f2f9c3aed4a1199e20b92fb2e807d8b8064aae86ee6588ef4ca730a4ac346c0:
      - major: '8'
        minor: '7'
        term: '8.7'
        title: Created (Optional)
        txt: "\nCreated (Optional)\n\n\n    \n      Standard metadata for identity\
          \ records includes a timestamp of the original creation. The rules for including\
          \ a creation timestamp are:\n\n\n\n\nA DDO MUST have zero or one property\
          \ representing a creation\ntimestamp. It is RECOMMENDED to include this\
          \ property.\n  \nThe key for this property MUST be created.\n  \nThe value\
          \ of this key MUST be a valid XML datetime value as defined\nin section\
          \ 3.3.7 of W3C\nXML Schema Definition Language (XSD) 1.1 Part 2: Datatypes\
          \ .\n  \nThis datetime value MUST be normalized to UTC 00:00 as indicated\
          \ by\nthe trailing \"Z\".\n  \nMethod specifications that rely on DLTs SHOULD\
          \ require time values\nthat are after the known \"median\ntime past\" (defined\
          \ in Bitcoin BIP 113) , when the DLT supports such\na notion.\n  \n\n\n\n\
          \    \n      Example:\n\n\n\n\n\n      {\n      \"created\": \"2002-10-10T17:00:00Z\"\
          \n      }\n\n\n\n\n\n\n\n\n"
      f2007de583cffd701737b53e2aa7aed73eea64eb4a3e92d438f4a5545c4551d7:
      - major: '8'
        minor: '7'
        term: '8.7'
        title: Created (Optional)
        txt: "\nCreated (Optional)\n\n\n    \n      Standard metadata for identity\
          \ records includes a timestamp of the original creation. The rules for including\
          \ a creation timestamp are:\n\n\n\n\n\nA DDO MUST have zero or one property\
          \ representing a creation\ntimestamp. It is RECOMMENDED to include this\
          \ property.\n  \n\nThe key for this property MUST be created.\n  \n\nThe\
          \ value of this key MUST be a valid XML datetime value as defined\nin section\
          \ 3.3.7 of W3C\nXML Schema Definition Language (XSD) 1.1 Part 2: Datatypes\
          \ .\n  \n\nThis datetime value MUST be normalized to UTC 00:00 as indicated\
          \ by\nthe trailing \"Z\".\n  \n\nMethod specifications that rely on DLTs\
          \ SHOULD require time values\nthat are after the known \"median\ntime past\"\
          \ (defined in Bitcoin BIP 113) , when the DLT supports such\na notion.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"created\": \"\
          2002-10-10T17:00:00Z\"\n      }\n\n\n\n\n\n\n\n\n"
      - major: '8'
        minor: '7'
        term: '8.7'
        title: Created (Optional)
        txt: "\nCreated (Optional)\n\n\n    \n      Standard metadata for identity\
          \ records includes a timestamp of the original creation. The rules for including\
          \ a creation timestamp are:\n\n\n\n\n\nA DDO MUST have zero or one property\
          \ representing a creation\ntimestamp. It is RECOMMENDED to include this\
          \ property.\n  \n\nThe key for this property MUST be created.\n  \n\nThe\
          \ value of this key MUST be a valid XML datetime value as defined\nin section\
          \ 3.3.7 of W3C\nXML Schema Definition Language (XSD) 1.1 Part 2: Datatypes\
          \ .\n  \n\nThis datetime value MUST be normalized to UTC 00:00 as indicated\
          \ by\nthe trailing \"Z\".\n  \n\nMethod specifications that rely on DLTs\
          \ SHOULD require time values\nthat are after the known \"median\ntime past\"\
          \ (defined in Bitcoin BIP 113) , when the DLT supports such\na notion.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"created\": \"\
          2002-10-10T17:00:00Z\"\n      }\n\n\n\n\n\n\n\n\n"
  DDOs (DID Descriptor Objects):
    count: 2
    mappings:
      6b196fdd99571e16c3f3719197624b719a2dea302b9407363c90b511da4282eb:
      - major: '8'
        minor: '0'
        term: '8.0'
        title: DDOs (DID Descriptor Objects)
        txt: "\nDDOs (DID Descriptor Objects)\n\nIf a DID is the index key in a key-value\
          \ pair, then the DDO is the value\nto which the index key points. The combination\
          \ of a DID and its\nassociated DDO forms the root identity record for a\
          \ decentralized\nidentity.\n\n\nA DDO MUST be a single JSON object conforming\
          \ to RFC 7159 . For purposes of\nthis version of the DID specification,\
          \ the format of this JSON object is\nspecified in JSON-LD , a format for\n\
          mapping JSON data into the RDF semantic graph model as defined by the\n\
          \  W3C JSON-LD 1.0\nspecification . Future versions of this specification\
          \ MAY specify\nother semantic graph formats for a DDO such as JXD (JSON\
          \ XDI Data), a\nserialization format for the \nXDI graph model .\n\n\nThe\
          \ following sections define the properties of this JSON object,\nincluding\
          \ whether these properties are required or optional.\n\n\nContext (Required)\n\
          \nJSON objects in JSON-LD format must include a JSON-LD context statement.\n\
          The rules for this statement are:\n\n\nA DDO MUST have exactly one top-level\
          \ context statement.\n  \nThis statement MUST be the first line in the JSON\
          \ object. (This is\nnot strictly necessary under JSON-LD but required for\
          \ DDOs.)\n  \nThe key for this property MUST be @context.\n  \nThe value\
          \ of this key MUST be the URL for the generic DID context as\nspecified\
          \ in Appendix B.\n  \n\n\nExample (using an example URL):\n\n\n  {\n\n\n\
          \  \"@context\": \"https://example.org/did/v1\"\n\n\n  }\n\n\nDID method\
          \ specifications MAY define their own JSON-LD contexts. However\nit is NOT\
          \ RECOMMENDED to define a new context unless necessary to\nproperly implement\
          \ the method. Method-specific contexts MUST NOT\noverride the terms defined\
          \ in the generic DID context listed in Appendix\nB.\n\n\n\nPrimary DID (Required)\n\
          \nThe primary DID is the primary index key for the DDO, i.e., it is DID\n\
          described by DDO. The rules for a primary DID are:\n\n\nA DDO MUST have\
          \ exactly one primary DID.\n  \nThe key for this property MUST be id.\n\
          \  \nThe value of this key MUST be a valid DID.\n  \nWhen this DDO is registered\
          \ with the target distributed ledger or\nnetwork, the registered DID MUST\
          \ match this primary DID value.\n  \n\n\nExample:\n\n\n      {\n       \
          \ \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\n      }\n\n\n\n\n\n\n\
          Guardian (Required If No Proof of Ownership)\n\n\n    \n      A guardian\
          \ is an identity owner who creates and maintains an identity record for\
          \ a dependent who is not in a position to hold or control the necessary\
          \ cryptographic keys (e.g., a parent creating an identity record for a child).\
          \ In this case, there are no owner keys to represent the ultimate identity\
          \ owner. So the DDO needs to assert the identity of the guardian.\n\n  \
          \  \n      The rules for a guardian are:\n\n\n\n\nA DDO that includes an\
          \ owner (section 6.4) MAY have a guardian.\n  \nA DDO that does not include\
          \ an owner MUST have a guardian.\n  \nThe key for this property MUST be\
          \ guardian.\n  \nThe value of this key MUST be a valid DID.\n  \nThe guardian\
          \ DID MUST resolve to a DDO that has an owner property,\ni.e., the guardian\
          \ relationships must not be nested.\n  \n\n\n\n    \n      Example:\n\n\n\
          \n\n\n      {\n      \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n      }\n\n\n\n\n\n\nProof of Ownership (Required If No Guardian)\n\n\n\
          \    \n      Proof of Ownership is the mechanism by which an identity owner\
          \ can cryptographically prove ownership of a DID and DDO by virtue of publishing\
          \ a set of public key or verification key descriptions. See section 9.2.\
          \ Note that Proof of Ownership is separate from Proof of Control because\
          \ an identity owner may wish to enable other entities to update the DDO\
          \ (for example, to assist with key recovery as discussed in section 6.5)\
          \ without enabling them to prove ownership (and thus be able to impersonate\
          \ the identity owner).\n\n    \n      The rules for Proof of Ownership are:\n\
          \n\n\n\nA DDO that includes a guardian (section 6.3) MAY have exactly one\n\
          owner.\n  \nA DDO that does not include a guardian MUST have exactly one\
          \ owner.\n  \nThe key for this property MUST be owner.\n  \nThe value of\
          \ this key MUST be an array where each member of the\narray is a key description\
          \ of a valid public key or verification key. A\nlist of standard key descriptions\
          \ is included in Appendix C. A new key\ndescription MAY also be defined\
          \ by a DID method specification.\n  \nIf this array contains more than one\
          \ key description, each key\ndescription MUST include a property with the\
          \ key id whose value is a DID\nreference consisting of the primary DID and\
          \ a DID fragment. This DID\nreference uniquely identifies this key description.\n\
          \  \n\n\n\n    \n\n\n    \n      Example:\n\n    \n\n\n\n\n\n\n      {\n\
          \      \"owner\": [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\"\
          ,\n            \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n\
          \            \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }, {\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\"\
          : \"MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n\n    \n\n\n    \n      Note that caching and\
          \ expiration of the keys in DDO key descriptions is entirely the responsibility\
          \ of DID resolvers and other clients. See section 9.6.\n\n\n\n\n\n\nProof\
          \ of Control (Optional and Method-Specific)\n\n\n    \n      Proof of Control\
          \ is the mechanism by which an identity owner may give itself or other entities\
          \ permission to update the DDO\u2014for example to assist with key recovery.\
          \ Note that Proof of Control is separate from Proof of Ownership as explained\
          \ in section 6.4. This is particularly important for key recovery in the\
          \ case of key loss, when the identity owner no longer has access to the\
          \ keys described using the owner property (section 6.4), or key compromise,\
          \ where the owner\u2019s trusted third parties need to override malicious\
          \ activity by an attacker. See section 9.\n\n    \n      Because the access\
          \ control logic in a Proof of Control block must be implemented by the target\
          \ distributed ledger or network, a DID method specification MUST include\
          \ its own Proof of Control rules and processing logic. It is RECOMMENDED\
          \ that all DID method specifications support the generic Proof of Control\
          \ rules specified in this section. A DID method specification MAY add its\
          \ own method-specific Proof of Control rules.\n\n    \n      The generic\
          \ Proof of Control rules are:\n\n\n\n\nA DDO MAY have exactly one property\
          \ representing Proof of Control.\n  \nThe key for this property MUST be\
          \ control.\n  \nThe value of this key MUST be an array.\n  \nThe values\
          \ of this array MUST be defined in a DID method\nspecification.\n  \nIf\
          \ a Proof of Control rule accepts a DID without a fragment as a\nvalue,\
          \ then an update signature verified with any key in the owner of\nthe DDO\
          \ dereferenced from that DID MUST be considered valid for Proof of\nControl.\n\
          \  \nIf a Proof of Control rule accepts a DID with a fragment as a value,\n\
          then:\n  \n\n\n\n\n\n\nThe fragment MUST identify a key description in the\
          \ DDO dereferenced\nfrom that DID.\n  \nAn update signature verified with\
          \ the key in target key description\nMUST be considered valid for Proof\
          \ of Control.\n  \n\n\n\n\n\n\n\n6.5.1 \"Or\" Control\n\n\n\n    \n    \
          \  To assert that any single member of a group of other DID owners has permission\
          \ to update the DDO, the control block array MAY contain a single JSON object\
          \ with two properties:\n\n\n\n\nA property type whose value is the string\
          \ OrControl.\n  \nA property signers whose value is an array of DIDs with\
          \ or without\nfragments.\n  \n\n\n\n    \n      If at least one update signature\
          \ from a DID in this array is verified, it MUST be considered valid for\
          \ Proof of Control.\n\n\n\n\n\n6.5.2 \"And\" Control\n\n\n\n    \n     \
          \ To assert that only all members of a group of other DID owners must act\
          \ together to update the DDO, the control block array MAY contain a single\
          \ JSON object with two properties:\n\n\n\n\nA property type whose value\
          \ is the string AndControl.\n  \nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If update signatures\
          \ from ALL DIDs in this array are verified, it MUST be considered valid\
          \ for Proof of Control.\n\n\n\n\n\n6.5.3 \"M-of-N\" Control\n\n\n\n    \n\
          \      To assert that a minimum number of members of a group of other DID\
          \ owners must act together to update the DDO, the control block array MAY\
          \ contain a single JSON object with three properties:\n\n\n\n\nA property\
          \ type whose value is the string MofNControl.\n  \nA property minimumSignatures\
          \ whose value is an integer representing\nthe minimum threshold of signatures\
          \ required to act together.\n  \nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If the number\
          \ of verified update signatures from DIDs in this array equals or exceeds\
          \ the value of minimumSignatures, it MUST be considered valid for Proof\
          \ of Control.\n\n    \n\n\n    \n      Following is an example of a Proof\
          \ of Control property implementing these rules:\n\n    \n      {\n\n\n\n\
          \n\n      \"control\": [{\n            \"type\": \"OrControl\",\n      \
          \      \"signer\": [            \"did:example:21tDAKCERh95uGgKbJNHYp\",\n\
          \                    \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n          \
          \     ]\n        }, {\n            \"type\": \"AndControl\",\n         \
          \   \"signer\": [\n                    \"did:example:7P7xfv5AeTSSWcuq6hPptQ\"\
          ,\n                    \"did:example:X2v8rvzoCxayhYV5mhESQ1\"\n        \
          \       ]\n        }, {\n            \"type\": \"MofNControl\",\n      \
          \      \"minimumSignatures\": 2,\n            \"signer\": [\n          \
          \          \"did:example:4XirzuHiNnTrwfjCMtBEJ6\",\n                   \
          \ \"did:example:iCGjJEChRbAdfZbGqZAYT7\",\n                    \"did:example:WUoAyXB7mhfcVESjypm5ty\"\
          \n               ]\n        }]\n\n\n\n\n    \n      }\n\n\n\n\n\n\n\n\n\n\
          \nService Endpoint References (Optional)\n\n\n    \n      In addition to\
          \ publication of cryptographic key material, the other primary purpose of\
          \ DID records is to enable discovery of service endpoints for the identity\
          \ owner. A service endpoint may represent any type of service the identity\
          \ owner wishes to advertise, including decentralized identity management\
          \ services for further discovery, authentication, authorization, or interaction.\n\
          \n    \n      The rules for service endpoints are:\n\n\n\n\nA DDO MAY have\
          \ exactly one property representing service endpoints.\n  \nThe key for\
          \ this property MUST be service.\n  \nThe value of this key MUST be a nested\
          \ JSON object.\n  \nIn this nested JSON object, each property MUST have\
          \ a key\nrepresenting the name of a service established in either the generic\n\
          JSON-LD context (see Appendix B) or a method-specific context\ndefinition.\n\
          \  \nThe value of this key MUST be a valid URI conforming to RFC 3986 \_\
          and normalized\naccording to the rules in section 6 of RFC 3986 \_and to\
          \ any\nnormalization rules in its applicable URI scheme specification.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"service\": {\n\
          \            \"openid\": \"https://openid.example.com/456\",\n         \
          \   \"xdi\": \"https://xdi.example.com/123\"\n        }\n      }\n\n\n\n\
          \n    \n      See sections 9.1 and 9.3 for further security considerations\
          \ regarding authentication service endpoints.\n\n\n\n\n\n\nCreated (Optional)\n\
          \n\n    \n      Standard metadata for identity records includes a timestamp\
          \ of the original creation. The rules for including a creation timestamp\
          \ are:\n\n\n\n\nA DDO MUST have zero or one property representing a creation\n\
          timestamp. It is RECOMMENDED to include this property.\n  \nThe key for\
          \ this property MUST be created.\n  \nThe value of this key MUST be a valid\
          \ XML datetime value as defined\nin section 3.3.7 of W3C\nXML Schema Definition\
          \ Language (XSD) 1.1 Part 2: Datatypes .\n  \nThis datetime value MUST be\
          \ normalized to UTC 00:00 as indicated by\nthe trailing \"Z\".\n  \nMethod\
          \ specifications that rely on DLTs SHOULD require time values\nthat are\
          \ after the known \"median\ntime past\" (defined in Bitcoin BIP 113) , when\
          \ the DLT supports such\na notion.\n  \n\n\n\n    \n      Example:\n\n\n\
          \n\n\n      {\n      \"created\": \"2002-10-10T17:00:00Z\"\n      }\n\n\n\
          \n\n\n\n\n\n\nUpdated (Optional)\n\n\n    \n      Standard metadata for\
          \ identity records includes a timestamp of the most recent change. The rules\
          \ for including a updated timestamp are:\n\n\n\n\nA DDO MUST have zero or\
          \ one property representing an updated\ntimestamp. It is RECOMMENDED to\
          \ include this property.\n  \nThe key for this property MUST be updated.\n\
          \  \nThe value of this key MUST follow the formatting rules (3, 4, 5)\n\
          from section 6.7.\n  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n \
          \     \"updated\": \"2016-10-17T02:41:00Z\"\n      }\n\n\n\n\n\n\n\n\n\n\
          Signature (Optional)\n\n\n    \n      A signature on a DDO is cryptographic\
          \ proof of the integrity of the DDO according to either:\n\n\n\n\nThe identity\
          \ owner as defined in section 6.4, or if not present:\n  \nThe guardian\
          \ as defined in section 6.3.\n  \n\n\n\n    \n      This signature is NOT\
          \ proof of the binding between a DID and a DDO. See section 9.2.\n\n   \
          \ \n      The rules for a signature are:\n\n\n\n\nA DDO MAY have exactly\
          \ one property representing a signature.\n  \nThe key for this property\
          \ MUST be signature.\n  \nThe value of this key MUST be a valid JSON-LD\
          \ signature as defined\nby Linked Data\nSignatures .\n  \n\n\n\n    \n \
          \     Example:\n\n\n\n\n\n      {\n      \"signature\": {\n            \"\
          type\": \"LinkedDataSignature2015\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1ja#keys-1\"\
          ,\n            \"signatureValue\": \"QNB13Y7Q9oLlDLL6AHyL31OE5fLji9DwJSA8qnv81oRaKonij8m+Jv4XdiEYvJ97iRlzKU/92/0LafSL5JftEgl960DLcbqMFxOtbAmFOIMa7eDcrgTL5ytXeYCYKLjHQG3s8a3UKDKRuEK54qK1G5hGKGoLgAVa6xgcDLjW7M19PEJV/c3HpGA7Eez6VFMoTt4yESjZvOXC97xN3KpshOx2HT/btgUbo0XjA1Oi0QHdgrLcUsQGt6w23RjeSToalrsA1G69OFeN2OiQrz9Jb4561hvKLSyWObwRmS6n5Vgr5xkvUm6MONRq0Vg33kXevoVM64KTBkISul61tzjn4w==\"\
          \n        }\n\n\n\n\n      }\n\n\n\n\n\n"
      dab5e0109e6b8b5ec29471f8d4506ee70306135274a9ac2cda269f47d65c8e41:
      - major: '8'
        minor: '0'
        term: '8.0'
        title: DDOs (DID Descriptor Objects)
        txt: "\nDDOs (DID Descriptor Objects)\n\nIf a DID is the index key in a key-value\
          \ pair, then the DDO is the value\nto which the index key points. The combination\
          \ of a DID and its\nassociated DDO forms the root identity record for a\
          \ decentralized\nidentity.\n\n\nA DDO MUST be a single JSON object conforming\
          \ to RFC 7159 . For purposes of\nthis version of the DID specification,\
          \ the format of this JSON object is\nspecified in JSON-LD , a format for\n\
          mapping JSON data into the RDF semantic graph model as defined by the\n\
          \  W3C JSON-LD 1.0\nspecification . Future versions of this specification\
          \ MAY specify\nother semantic graph formats for a DDO such as JXD (JSON\
          \ XDI Data), a\nserialization format for the \nXDI graph model .\n\n\nThe\
          \ following sections define the properties of this JSON object,\nincluding\
          \ whether these properties are required or optional.\n\n\nContext (Required)\n\
          \nJSON objects in JSON-LD format must include a JSON-LD context statement.\n\
          The rules for this statement are:\n\n\n\nA DDO MUST have exactly one top-level\
          \ context statement.\n  \n\nThis statement MUST be the first line in the\
          \ JSON object. (This is\nnot strictly necessary under JSON-LD but required\
          \ for DDOs.)\n  \n\nThe key for this property MUST be @context.\n  \n\n\
          The value of this key MUST be the URL for the generic DID context as\nspecified\
          \ in Appendix B.\n  \n\n\nExample (using an example URL):\n\n\n  {\n\n\n\
          \  \"@context\": \"https://example.org/did/v1\"\n\n\n  }\n\n\nDID method\
          \ specifications MAY define their own JSON-LD contexts. However\nit is NOT\
          \ RECOMMENDED to define a new context unless necessary to\nproperly implement\
          \ the method. Method-specific contexts MUST NOT\noverride the terms defined\
          \ in the generic DID context listed in Appendix\nB.\n\n\n\nPrimary DID (Required)\n\
          \nThe primary DID is the primary index key for the DDO, i.e., it is DID\n\
          described by DDO. The rules for a primary DID are:\n\n\n\nA DDO MUST have\
          \ exactly one primary DID.\n  \n\nThe key for this property MUST be id.\n\
          \  \n\nThe value of this key MUST be a valid DID.\n  \n\nWhen this DDO is\
          \ registered with the target distributed ledger or\nnetwork, the registered\
          \ DID MUST match this primary DID value.\n  \n\n\nExample:\n\n\n      {\n\
          \        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\n      }\n\n\n\n\
          \n\n\nGuardian (Required If No Proof of Ownership)\n\nA guardian is an identity\
          \ owner who creates and maintains an identity record\nfor a dependent who\
          \ is not in a position to hold or control the necessary\ncryptographic keys\
          \ (e.g., a parent creating an identity record for a child).\nIn this case,\
          \ there are no owner keys to represent the ultimate identity\nowner. So\
          \ the DDO needs to assert the identity of the guardian.\n\n\nThe rules for\
          \ a guardian are:\n\n\n\nA DDO that includes an owner (section 6.4) MAY\
          \ have a guardian.\n  \n\nA DDO that does not include an owner MUST have\
          \ a guardian.\n  \n\nThe key for this property MUST be guardian.\n  \n\n\
          The value of this key MUST be a valid DID.\n  \n\nThe guardian DID MUST\
          \ resolve to a DDO that has an owner property,\ni.e., the guardian relationships\
          \ must not be nested.\n  \n\n\nExample:\n\n\n{\n  \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n}\n\n\n\nProof of Ownership (Required If No Guardian)\n\nProof of Ownership\
          \ is the mechanism by which an identity owner can\ncryptographically prove\
          \ ownership of a DID and DDO by virtue of publishing\na set of public key\
          \ or verification key descriptions. See section 9.2.\nNote that Proof of\
          \ Ownership is separate from Proof of Control because an\nidentity owner\
          \ may wish to enable other entities to update the DDO\n(for example, to\
          \ assist with key recovery as discussed in section 6.5)\nwithout enabling\
          \ them to prove ownership (and thus be able to impersonate\nthe identity\
          \ owner).\n\n\nThe rules for Proof of Ownership are:\n\n\n\nA DDO that includes\
          \ a guardian (section 6.3) MAY have exactly one\nowner.\n  \n\nA DDO that\
          \ does not include a guardian MUST have exactly one owner.\n  \n\nThe key\
          \ for this property MUST be owner.\n  \n\nThe value of this key MUST be\
          \ an array where each member of the\narray is a key description of a valid\
          \ public key or verification key. A\nlist of standard key descriptions is\
          \ included in Appendix C. A new key\ndescription MAY also be defined by\
          \ a DID method specification.\n  \n\nIf this array contains more than one\
          \ key description, each key\ndescription MUST include a property with the\
          \ key id whose value is a DID\nreference consisting of the primary DID and\
          \ a DID fragment. This DID\nreference uniquely identifies this key description.\n\
          \  \n\n\nExample:\n\n\n{\n  \"owner\": [{\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\"\
          ,\n    \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n    \"curve\"\
          : \"ed25519\",\n    \"expires\": \"2017-02-08T16:02:20Z\",\n    \"publicKeyBase64\"\
          : \"IOmA4R7TfhkY...Mq2/gi25s=\"\n  }, {\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n    \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n    \"expires\"\
          : \"2017-03-22T00:00:00Z\",\n    \"publicKeyBase64\": \"MIIBOg...mgQaRyV\"\
          \n  }]\n}\n\n\nNote that caching and expiration of the keys in DDO key descriptions\
          \ is\nentirely the responsibility of DID resolvers and other clients. See\n\
          section 9.6.\n\n\n\nProof of Control (Optional and Method-Specific)\n\n\
          Proof of Control is the mechanism by which an identity owner may give itself\
          \ \nor other entities permission to update the DDO\u2014for example to assist\
          \ with \nkey recovery. Note that Proof of Control is separate from Proof\
          \ of Ownership \nas explained in section 6.4. This is particularly important\
          \ for key recovery \nin the case of key loss, when the identity owner no\
          \ longer has access to the \nkeys described using the owner property (section\
          \ 6.4), or key compromise, \nwhere the owner\u2019s trusted third parties\
          \ need to override malicious activity \nby an attacker. See section 9.\n\
          \n\nBecause the access control logic in a Proof of Control block must be\
          \ \nimplemented by the target distributed ledger or network, a DID method\
          \ \nspecification MUST include its own Proof of Control rules and processing\
          \ \nlogic. It is RECOMMENDED that all DID method specifications support\
          \ the \ngeneric Proof of Control rules specified in this section. A DID\
          \ method \nspecification MAY add its own method-specific Proof of Control\
          \ rules.\n\n\n  The generic Proof of Control rules are:\n\n\n\nA DDO MAY\
          \ have exactly one property representing Proof of Control.\n  \n\nThe key\
          \ for this property MUST be control.\n  \n\nThe value of this key MUST be\
          \ an array.\n  \n\nThe values of this array MUST be defined in a DID method\n\
          specification.\n  \n\nIf a Proof of Control rule accepts a DID without a\
          \ fragment as a\nvalue, then an update signature verified with any key in\
          \ the owner of\nthe DDO dereferenced from that DID MUST be considered valid\
          \ for Proof of\nControl.\n  \n\nIf a Proof of Control rule accepts a DID\
          \ with a fragment as a value,\nthen:\n  \n\n\n\nThe fragment MUST identify\
          \ a key description in the DDO dereferenced\nfrom that DID.\n  \n\nAn update\
          \ signature verified with the key in target key description\nMUST be considered\
          \ valid for Proof of Control.\n  \n\n\n6.5.1 \"Or\" Control\n\n\n\n    \n\
          \      To assert that any single member of a group of other DID owners has\
          \ permission to update the DDO, the control block array MAY contain a single\
          \ JSON object with two properties:\n\n\n\n\n\nA property type whose value\
          \ is the string OrControl.\n  \n\nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If at least\
          \ one update signature from a DID in this array is verified, it MUST be\
          \ considered valid for Proof of Control.\n\n\n\n\n\n6.5.2 \"And\" Control\n\
          \n\n\n    \n      To assert that only all members of a group of other DID\
          \ owners must act together to update the DDO, the control block array MAY\
          \ contain a single JSON object with two properties:\n\n\n\n\n\nA property\
          \ type whose value is the string AndControl.\n  \n\nA property signers whose\
          \ value is an array of DIDs with or without\nfragments.\n  \n\n\n\n    \n\
          \      If update signatures from ALL DIDs in this array are verified, it\
          \ MUST be considered valid for Proof of Control.\n\n\n\n\n\n6.5.3 \"M-of-N\"\
          \ Control\n\n\n\n    \n      To assert that a minimum number of members\
          \ of a group of other DID owners must act together to update the DDO, the\
          \ control block array MAY contain a single JSON object with three properties:\n\
          \n\n\n\n\nA property type whose value is the string MofNControl.\n  \n\n\
          A property minimumSignatures whose value is an integer representing\nthe\
          \ minimum threshold of signatures required to act together.\n  \n\nA property\
          \ signers whose value is an array of DIDs with or without\nfragments.\n\
          \  \n\n\n\n    \n      If the number of verified update signatures from\
          \ DIDs in this array equals or exceeds the value of minimumSignatures, it\
          \ MUST be considered valid for Proof of Control.\n\n    \n\n\n    \n   \
          \   Following is an example of a Proof of Control property implementing\
          \ these rules:\n\n    \n      {\n\n\n\n\n\n      \"control\": [{\n     \
          \       \"type\": \"OrControl\",\n            \"signer\": [            \"\
          did:example:21tDAKCERh95uGgKbJNHYp\",\n                    \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n               ]\n        }, {\n            \"type\": \"AndControl\",\n\
          \            \"signer\": [\n                    \"did:example:7P7xfv5AeTSSWcuq6hPptQ\"\
          ,\n                    \"did:example:X2v8rvzoCxayhYV5mhESQ1\"\n        \
          \       ]\n        }, {\n            \"type\": \"MofNControl\",\n      \
          \      \"minimumSignatures\": 2,\n            \"signer\": [\n          \
          \          \"did:example:4XirzuHiNnTrwfjCMtBEJ6\",\n                   \
          \ \"did:example:iCGjJEChRbAdfZbGqZAYT7\",\n                    \"did:example:WUoAyXB7mhfcVESjypm5ty\"\
          \n               ]\n        }]\n\n\n\n\n    \n      }\n\n\n\n\n\n\n\n\n\n\
          \nService Endpoint References (Optional)\n\n\n    \n      In addition to\
          \ publication of cryptographic key material, the other primary purpose of\
          \ DID records is to enable discovery of service endpoints for the identity\
          \ owner. A service endpoint may represent any type of service the identity\
          \ owner wishes to advertise, including decentralized identity management\
          \ services for further discovery, authentication, authorization, or interaction.\n\
          \n    \n      The rules for service endpoints are:\n\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing service endpoints.\n  \n\nThe key\
          \ for this property MUST be service.\n  \n\nThe value of this key MUST be\
          \ a nested JSON object.\n  \n\nIn this nested JSON object, each property\
          \ MUST have a key\nrepresenting the name of a service established in either\
          \ the generic\nJSON-LD context (see Appendix B) or a method-specific context\n\
          definition.\n  \n\nThe value of this key MUST be a valid URI conforming\
          \ to RFC 3986 and normalized\naccording to the rules in section 6 of RFC\
          \ 3986 and to any\nnormalization rules in its applicable URI scheme specification.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"service\": {\n\
          \            \"openid\": \"https://openid.example.com/456\",\n         \
          \   \"xdi\": \"https://xdi.example.com/123\"\n        }\n      }\n\n\n\n\
          \n    \n      See sections 9.1 and 9.3 for further security considerations\
          \ regarding authentication service endpoints.\n\n\n\n\n\n\nCreated (Optional)\n\
          \n\n    \n      Standard metadata for identity records includes a timestamp\
          \ of the original creation. The rules for including a creation timestamp\
          \ are:\n\n\n\n\n\nA DDO MUST have zero or one property representing a creation\n\
          timestamp. It is RECOMMENDED to include this property.\n  \n\nThe key for\
          \ this property MUST be created.\n  \n\nThe value of this key MUST be a\
          \ valid XML datetime value as defined\nin section 3.3.7 of W3C\nXML Schema\
          \ Definition Language (XSD) 1.1 Part 2: Datatypes .\n  \n\nThis datetime\
          \ value MUST be normalized to UTC 00:00 as indicated by\nthe trailing \"\
          Z\".\n  \n\nMethod specifications that rely on DLTs SHOULD require time\
          \ values\nthat are after the known \"median\ntime past\" (defined in Bitcoin\
          \ BIP 113) , when the DLT supports such\na notion.\n  \n\n\n\n    \n   \
          \   Example:\n\n\n\n\n\n      {\n      \"created\": \"2002-10-10T17:00:00Z\"\
          \n      }\n\n\n\n\n\n\n\n\n\nUpdated (Optional)\n\n\n    \n      Standard\
          \ metadata for identity records includes a timestamp of the most recent\
          \ change. The rules for including a updated timestamp are:\n\n\n\n\n\nA\
          \ DDO MUST have zero or one property representing an updated\ntimestamp.\
          \ It is RECOMMENDED to include this property.\n  \n\nThe key for this property\
          \ MUST be updated.\n  \n\nThe value of this key MUST follow the formatting\
          \ rules (3, 4, 5)\nfrom section 6.7.\n  \n\n\n\n    \n      Example:\n\n\
          \n\n\n\n      {\n      \"updated\": \"2016-10-17T02:41:00Z\"\n      }\n\n\
          \n\n\n\n\n\n\n\nSignature (Optional)\n\n\n    \n      A signature on a DDO\
          \ is cryptographic proof of the integrity of the DDO according to either:\n\
          \n\n\n\n\nThe identity owner as defined in section 6.4, or if not present:\n\
          \  \n\nThe guardian as defined in section 6.3.\n  \n\n\n\n    \n      This\
          \ signature is NOT proof of the binding between a DID and a DDO. See section\
          \ 9.2.\n\n    \n      The rules for a signature are:\n\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing a signature.\n  \n\nThe key for\
          \ this property MUST be signature.\n  \n\nThe value of this key MUST be\
          \ a valid JSON-LD signature as defined\nby Linked Data\nSignatures .\n \
          \ \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"signature\":\
          \ {\n            \"type\": \"LinkedDataSignature2015\",\n            \"\
          created\": \"2016-02-08T16:02:20Z\",\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1ja#keys-1\"\
          ,\n            \"signatureValue\": \"QNB13Y7Q9oLlDLL6AHyL31OE5fLji9DwJSA8qnv81oRaKonij8m+Jv4XdiEYvJ97iRlzKU/92/0LafSL5JftEgl960DLcbqMFxOtbAmFOIMa7eDcrgTL5ytXeYCYKLjHQG3s8a3UKDKRuEK54qK1G5hGKGoLgAVa6xgcDLjW7M19PEJV/c3HpGA7Eez6VFMoTt4yESjZvOXC97xN3KpshOx2HT/btgUbo0XjA1Oi0QHdgrLcUsQGt6w23RjeSToalrsA1G69OFeN2OiQrz9Jb4561hvKLSyWObwRmS6n5Vgr5xkvUm6MONRq0Vg33kXevoVM64KTBkISul61tzjn4w==\"\
          \n        }\n\n\n\n\n      }\n\n\n\n\n\n"
      - major: '8'
        minor: '0'
        term: '8.0'
        title: DDOs (DID Descriptor Objects)
        txt: "\nDDOs (DID Descriptor Objects)\n\nIf a DID is the index key in a key-value\
          \ pair, then the DDO is the value\nto which the index key points. The combination\
          \ of a DID and its\nassociated DDO forms the root identity record for a\
          \ decentralized\nidentity.\n\n\nA DDO MUST be a single JSON object conforming\
          \ to RFC 7159 . For purposes of\nthis version of the DID specification,\
          \ the format of this JSON object is\nspecified in JSON-LD , a format for\n\
          mapping JSON data into the RDF semantic graph model as defined by the\n\
          \  W3C JSON-LD 1.0\nspecification . Future versions of this specification\
          \ MAY specify\nother semantic graph formats for a DDO such as JXD (JSON\
          \ XDI Data), a\nserialization format for the \nXDI graph model .\n\n\nThe\
          \ following sections define the properties of this JSON object,\nincluding\
          \ whether these properties are required or optional.\n\n\nContext (Required)\n\
          \nJSON objects in JSON-LD format must include a JSON-LD context statement.\n\
          The rules for this statement are:\n\n\n\nA DDO MUST have exactly one top-level\
          \ context statement.\n  \n\nThis statement MUST be the first line in the\
          \ JSON object. (This is\nnot strictly necessary under JSON-LD but required\
          \ for DDOs.)\n  \n\nThe key for this property MUST be @context.\n  \n\n\
          The value of this key MUST be the URL for the generic DID context as\nspecified\
          \ in Appendix B.\n  \n\n\nExample (using an example URL):\n\n\n  {\n\n\n\
          \  \"@context\": \"https://example.org/did/v1\"\n\n\n  }\n\n\nDID method\
          \ specifications MAY define their own JSON-LD contexts. However\nit is NOT\
          \ RECOMMENDED to define a new context unless necessary to\nproperly implement\
          \ the method. Method-specific contexts MUST NOT\noverride the terms defined\
          \ in the generic DID context listed in Appendix\nB.\n\n\n\nPrimary DID (Required)\n\
          \nThe primary DID is the primary index key for the DDO, i.e., it is DID\n\
          described by DDO. The rules for a primary DID are:\n\n\n\nA DDO MUST have\
          \ exactly one primary DID.\n  \n\nThe key for this property MUST be id.\n\
          \  \n\nThe value of this key MUST be a valid DID.\n  \n\nWhen this DDO is\
          \ registered with the target distributed ledger or\nnetwork, the registered\
          \ DID MUST match this primary DID value.\n  \n\n\nExample:\n\n\n      {\n\
          \        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\n      }\n\n\n\n\
          \n\n\nGuardian (Required If No Proof of Ownership)\n\nA guardian is an identity\
          \ owner who creates and maintains an identity record\nfor a dependent who\
          \ is not in a position to hold or control the necessary\ncryptographic keys\
          \ (e.g., a parent creating an identity record for a child).\nIn this case,\
          \ there are no owner keys to represent the ultimate identity\nowner. So\
          \ the DDO needs to assert the identity of the guardian.\n\n\nThe rules for\
          \ a guardian are:\n\n\n\nA DDO that includes an owner (section 6.4) MAY\
          \ have a guardian.\n  \n\nA DDO that does not include an owner MUST have\
          \ a guardian.\n  \n\nThe key for this property MUST be guardian.\n  \n\n\
          The value of this key MUST be a valid DID.\n  \n\nThe guardian DID MUST\
          \ resolve to a DDO that has an owner property,\ni.e., the guardian relationships\
          \ must not be nested.\n  \n\n\nExample:\n\n\n{\n  \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n}\n\n\n\nProof of Ownership (Required If No Guardian)\n\nProof of Ownership\
          \ is the mechanism by which an identity owner can\ncryptographically prove\
          \ ownership of a DID and DDO by virtue of publishing\na set of public key\
          \ or verification key descriptions. See section 9.2.\nNote that Proof of\
          \ Ownership is separate from Proof of Control because an\nidentity owner\
          \ may wish to enable other entities to update the DDO\n(for example, to\
          \ assist with key recovery as discussed in section 6.5)\nwithout enabling\
          \ them to prove ownership (and thus be able to impersonate\nthe identity\
          \ owner).\n\n\nThe rules for Proof of Ownership are:\n\n\n\nA DDO that includes\
          \ a guardian (section 6.3) MAY have exactly one\nowner.\n  \n\nA DDO that\
          \ does not include a guardian MUST have exactly one owner.\n  \n\nThe key\
          \ for this property MUST be owner.\n  \n\nThe value of this key MUST be\
          \ an array where each member of the\narray is a key description of a valid\
          \ public key or verification key. A\nlist of standard key descriptions is\
          \ included in Appendix C. A new key\ndescription MAY also be defined by\
          \ a DID method specification.\n  \n\nIf this array contains more than one\
          \ key description, each key\ndescription MUST include a property with the\
          \ key id whose value is a DID\nreference consisting of the primary DID and\
          \ a DID fragment. This DID\nreference uniquely identifies this key description.\n\
          \  \n\n\nExample:\n\n\n{\n  \"owner\": [{\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\"\
          ,\n    \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n    \"curve\"\
          : \"ed25519\",\n    \"expires\": \"2017-02-08T16:02:20Z\",\n    \"publicKeyBase64\"\
          : \"IOmA4R7TfhkY...Mq2/gi25s=\"\n  }, {\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n    \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n    \"expires\"\
          : \"2017-03-22T00:00:00Z\",\n    \"publicKeyBase64\": \"MIIBOg...mgQaRyV\"\
          \n  }]\n}\n\n\nNote that caching and expiration of the keys in DDO key descriptions\
          \ is\nentirely the responsibility of DID resolvers and other clients. See\n\
          section 9.6.\n\n\n\nProof of Control (Optional and Method-Specific)\n\n\
          Proof of Control is the mechanism by which an identity owner may give itself\
          \ \nor other entities permission to update the DDO\u2014for example to assist\
          \ with \nkey recovery. Note that Proof of Control is separate from Proof\
          \ of Ownership \nas explained in section 6.4. This is particularly important\
          \ for key recovery \nin the case of key loss, when the identity owner no\
          \ longer has access to the \nkeys described using the owner property (section\
          \ 6.4), or key compromise, \nwhere the owner\u2019s trusted third parties\
          \ need to override malicious activity \nby an attacker. See section 9.\n\
          \n\nBecause the access control logic in a Proof of Control block must be\
          \ \nimplemented by the target distributed ledger or network, a DID method\
          \ \nspecification MUST include its own Proof of Control rules and processing\
          \ \nlogic. It is RECOMMENDED that all DID method specifications support\
          \ the \ngeneric Proof of Control rules specified in this section. A DID\
          \ method \nspecification MAY add its own method-specific Proof of Control\
          \ rules.\n\n\n  The generic Proof of Control rules are:\n\n\n\nA DDO MAY\
          \ have exactly one property representing Proof of Control.\n  \n\nThe key\
          \ for this property MUST be control.\n  \n\nThe value of this key MUST be\
          \ an array.\n  \n\nThe values of this array MUST be defined in a DID method\n\
          specification.\n  \n\nIf a Proof of Control rule accepts a DID without a\
          \ fragment as a\nvalue, then an update signature verified with any key in\
          \ the owner of\nthe DDO dereferenced from that DID MUST be considered valid\
          \ for Proof of\nControl.\n  \n\nIf a Proof of Control rule accepts a DID\
          \ with a fragment as a value,\nthen:\n  \n\n\n\nThe fragment MUST identify\
          \ a key description in the DDO dereferenced\nfrom that DID.\n  \n\nAn update\
          \ signature verified with the key in target key description\nMUST be considered\
          \ valid for Proof of Control.\n  \n\n\n6.5.1 \"Or\" Control\n\n\n\n    \n\
          \      To assert that any single member of a group of other DID owners has\
          \ permission to update the DDO, the control block array MAY contain a single\
          \ JSON object with two properties:\n\n\n\n\n\nA property type whose value\
          \ is the string OrControl.\n  \n\nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If at least\
          \ one update signature from a DID in this array is verified, it MUST be\
          \ considered valid for Proof of Control.\n\n\n\n\n\n6.5.2 \"And\" Control\n\
          \n\n\n    \n      To assert that only all members of a group of other DID\
          \ owners must act together to update the DDO, the control block array MAY\
          \ contain a single JSON object with two properties:\n\n\n\n\n\nA property\
          \ type whose value is the string AndControl.\n  \n\nA property signers whose\
          \ value is an array of DIDs with or without\nfragments.\n  \n\n\n\n    \n\
          \      If update signatures from ALL DIDs in this array are verified, it\
          \ MUST be considered valid for Proof of Control.\n\n\n\n\n\n6.5.3 \"M-of-N\"\
          \ Control\n\n\n\n    \n      To assert that a minimum number of members\
          \ of a group of other DID owners must act together to update the DDO, the\
          \ control block array MAY contain a single JSON object with three properties:\n\
          \n\n\n\n\nA property type whose value is the string MofNControl.\n  \n\n\
          A property minimumSignatures whose value is an integer representing\nthe\
          \ minimum threshold of signatures required to act together.\n  \n\nA property\
          \ signers whose value is an array of DIDs with or without\nfragments.\n\
          \  \n\n\n\n    \n      If the number of verified update signatures from\
          \ DIDs in this array equals or exceeds the value of minimumSignatures, it\
          \ MUST be considered valid for Proof of Control.\n\n    \n\n\n    \n   \
          \   Following is an example of a Proof of Control property implementing\
          \ these rules:\n\n    \n      {\n\n\n\n\n\n      \"control\": [{\n     \
          \       \"type\": \"OrControl\",\n            \"signer\": [            \"\
          did:example:21tDAKCERh95uGgKbJNHYp\",\n                    \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n               ]\n        }, {\n            \"type\": \"AndControl\",\n\
          \            \"signer\": [\n                    \"did:example:7P7xfv5AeTSSWcuq6hPptQ\"\
          ,\n                    \"did:example:X2v8rvzoCxayhYV5mhESQ1\"\n        \
          \       ]\n        }, {\n            \"type\": \"MofNControl\",\n      \
          \      \"minimumSignatures\": 2,\n            \"signer\": [\n          \
          \          \"did:example:4XirzuHiNnTrwfjCMtBEJ6\",\n                   \
          \ \"did:example:iCGjJEChRbAdfZbGqZAYT7\",\n                    \"did:example:WUoAyXB7mhfcVESjypm5ty\"\
          \n               ]\n        }]\n\n\n\n\n    \n      }\n\n\n\n\n\n\n\n\n\n\
          \nService Endpoint References (Optional)\n\n\n    \n      In addition to\
          \ publication of cryptographic key material, the other primary purpose of\
          \ DID records is to enable discovery of service endpoints for the identity\
          \ owner. A service endpoint may represent any type of service the identity\
          \ owner wishes to advertise, including decentralized identity management\
          \ services for further discovery, authentication, authorization, or interaction.\n\
          \n    \n      The rules for service endpoints are:\n\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing service endpoints.\n  \n\nThe key\
          \ for this property MUST be service.\n  \n\nThe value of this key MUST be\
          \ a nested JSON object.\n  \n\nIn this nested JSON object, each property\
          \ MUST have a key\nrepresenting the name of a service established in either\
          \ the generic\nJSON-LD context (see Appendix B) or a method-specific context\n\
          definition.\n  \n\nThe value of this key MUST be a valid URI conforming\
          \ to RFC 3986 and normalized\naccording to the rules in section 6 of RFC\
          \ 3986 and to any\nnormalization rules in its applicable URI scheme specification.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"service\": {\n\
          \            \"openid\": \"https://openid.example.com/456\",\n         \
          \   \"xdi\": \"https://xdi.example.com/123\"\n        }\n      }\n\n\n\n\
          \n    \n      See sections 9.1 and 9.3 for further security considerations\
          \ regarding authentication service endpoints.\n\n\n\n\n\n\nCreated (Optional)\n\
          \n\n    \n      Standard metadata for identity records includes a timestamp\
          \ of the original creation. The rules for including a creation timestamp\
          \ are:\n\n\n\n\n\nA DDO MUST have zero or one property representing a creation\n\
          timestamp. It is RECOMMENDED to include this property.\n  \n\nThe key for\
          \ this property MUST be created.\n  \n\nThe value of this key MUST be a\
          \ valid XML datetime value as defined\nin section 3.3.7 of W3C\nXML Schema\
          \ Definition Language (XSD) 1.1 Part 2: Datatypes .\n  \n\nThis datetime\
          \ value MUST be normalized to UTC 00:00 as indicated by\nthe trailing \"\
          Z\".\n  \n\nMethod specifications that rely on DLTs SHOULD require time\
          \ values\nthat are after the known \"median\ntime past\" (defined in Bitcoin\
          \ BIP 113) , when the DLT supports such\na notion.\n  \n\n\n\n    \n   \
          \   Example:\n\n\n\n\n\n      {\n      \"created\": \"2002-10-10T17:00:00Z\"\
          \n      }\n\n\n\n\n\n\n\n\n\nUpdated (Optional)\n\n\n    \n      Standard\
          \ metadata for identity records includes a timestamp of the most recent\
          \ change. The rules for including a updated timestamp are:\n\n\n\n\n\nA\
          \ DDO MUST have zero or one property representing an updated\ntimestamp.\
          \ It is RECOMMENDED to include this property.\n  \n\nThe key for this property\
          \ MUST be updated.\n  \n\nThe value of this key MUST follow the formatting\
          \ rules (3, 4, 5)\nfrom section 6.7.\n  \n\n\n\n    \n      Example:\n\n\
          \n\n\n\n      {\n      \"updated\": \"2016-10-17T02:41:00Z\"\n      }\n\n\
          \n\n\n\n\n\n\n\nSignature (Optional)\n\n\n    \n      A signature on a DDO\
          \ is cryptographic proof of the integrity of the DDO according to either:\n\
          \n\n\n\n\nThe identity owner as defined in section 6.4, or if not present:\n\
          \  \n\nThe guardian as defined in section 6.3.\n  \n\n\n\n    \n      This\
          \ signature is NOT proof of the binding between a DID and a DDO. See section\
          \ 9.2.\n\n    \n      The rules for a signature are:\n\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing a signature.\n  \n\nThe key for\
          \ this property MUST be signature.\n  \n\nThe value of this key MUST be\
          \ a valid JSON-LD signature as defined\nby Linked Data\nSignatures .\n \
          \ \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"signature\":\
          \ {\n            \"type\": \"LinkedDataSignature2015\",\n            \"\
          created\": \"2016-02-08T16:02:20Z\",\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1ja#keys-1\"\
          ,\n            \"signatureValue\": \"QNB13Y7Q9oLlDLL6AHyL31OE5fLji9DwJSA8qnv81oRaKonij8m+Jv4XdiEYvJ97iRlzKU/92/0LafSL5JftEgl960DLcbqMFxOtbAmFOIMa7eDcrgTL5ytXeYCYKLjHQG3s8a3UKDKRuEK54qK1G5hGKGoLgAVa6xgcDLjW7M19PEJV/c3HpGA7Eez6VFMoTt4yESjZvOXC97xN3KpshOx2HT/btgUbo0XjA1Oi0QHdgrLcUsQGt6w23RjeSToalrsA1G69OFeN2OiQrz9Jb4561hvKLSyWObwRmS6n5Vgr5xkvUm6MONRq0Vg33kXevoVM64KTBkISul61tzjn4w==\"\
          \n        }\n\n\n\n\n      }\n\n\n\n\n\n"
  DID Normalization:
    count: 2
    mappings:
      06ca1fc52a2c3595862dd8d0473d214fe6e5f04effb4bae4f66063ca72bc0fb4:
      - major: '7'
        minor: '5'
        term: '7.5'
        title: DID Normalization
        txt: "\nDID Normalization\n\nFor the broadest interoperability, DID normalization\
          \ should be as simple\nand universal as possible. Therefore:\n\n\n\nThe\
          \ did: scheme name MUST be lowercase.\n  \n\nThe method name MUST be lowercase.\n\
          \  \n\nCase sensitivity and normalization of the value of the\nspecific-idstring\
          \ rule in section 5.1 MUST be defined by the governing\nDID method specification.\n\
          \  \n\n\n"
      - major: '7'
        minor: '5'
        term: '7.5'
        title: DID Normalization
        txt: "\nDID Normalization\n\nFor the broadest interoperability, DID normalization\
          \ should be as simple\nand universal as possible. Therefore:\n\n\n\nThe\
          \ did: scheme name MUST be lowercase.\n  \n\nThe method name MUST be lowercase.\n\
          \  \n\nCase sensitivity and normalization of the value of the\nspecific-idstring\
          \ rule in section 5.1 MUST be defined by the governing\nDID method specification.\n\
          \  \n\n\n"
      e7aa01676c91ec73de4d4b800fb240cc66e70047231bfa66e6678148c4138264:
      - major: '7'
        minor: '5'
        term: '7.5'
        title: DID Normalization
        txt: "\nDID Normalization\n\nFor the broadest interoperability, DID normalization\
          \ should be as simple\nand universal as possible. Therefore:\n\n\nThe did:\
          \ scheme name MUST be lowercase.\n  \nThe method name MUST be lowercase.\n\
          \  \nCase sensitivity and normalization of the value of the\nspecific-idstring\
          \ rule in section 5.1 MUST be defined by the governing\nDID method specification.\n\
          \  \n\n\n"
  DID Operations:
    count: 2
    mappings:
      7fec5204bb47d0d0f63e6636cd20e851c326ebb6fbc07a676ba95a5e874fe4f4:
      - major: '9'
        minor: '0'
        term: '9.0'
        title: DID Operations
        txt: "\nDID Operations\n\n\n    \n      To enable the full functionality of\
          \ DIDs and DDOs on a particular distributed ledger or network (called the\
          \ target system), a DID method specification MUST specify how each of the\
          \ following\n        CRUD\n       operations is performed by a client. Each\
          \ operation MUST be specified to the level of detail necessary to build\
          \ and test interoperable client implementations with the target system.\n\
          \n    \n      Note that, due to the specified contents of DDOs, these operations\
          \ can effectively be used to perform all the operations required of a CKMS\
          \ (cryptographic key management system), e.g.:\n\n\n\n\n\nKey registration\n\
          \  \n\nKey replacement\n  \n\nKey rotation\n  \n\nKey recovery\n  \n\nKey\
          \ expiration\n  \n\n\nCreate\n\nThe DID method specification MUST specify\
          \ how a client creates a\nDID record\u2014the combination of a DID and its\
          \ associated DDO\u2014on the\ntarget system, including all cryptographic\
          \ operations necessary\nto establish proof of ownership.\n\n\n\nRead/Verify\n\
          \n\n    \n      The DID method specification MUST specify how a client uses\
          \ a DID to request a DDO from the target system, including how the client\
          \ can verify the authenticity of the response.\n\n\n\n\n\n\nUpdate\n\n\n\
          \    \n      The DID method specification MUST specify how a client can\
          \ update a DID record on the target system, including all cryptographic\
          \ operations necessary to establish proof of control.\n\n\n\n\n\n\nDelete/Revoke\n\
          \n\n    \n      Although a core feature of distributed ledgers is immutability,\
          \ the DID method specification MUST specify how a client can revoke a DID\
          \ record on the target system, including all cryptographic operations necessary\
          \ to establish proof of revocation.\n\n\n\n\n\n\n"
      - major: '9'
        minor: '0'
        term: '9.0'
        title: DID Operations
        txt: "\nDID Operations\n\n\n    \n      To enable the full functionality of\
          \ DIDs and DDOs on a particular distributed ledger or network (called the\
          \ target system), a DID method specification MUST specify how each of the\
          \ following\n        CRUD\n       operations is performed by a client. Each\
          \ operation MUST be specified to the level of detail necessary to build\
          \ and test interoperable client implementations with the target system.\n\
          \n    \n      Note that, due to the specified contents of DDOs, these operations\
          \ can effectively be used to perform all the operations required of a CKMS\
          \ (cryptographic key management system), e.g.:\n\n\n\n\n\nKey registration\n\
          \  \n\nKey replacement\n  \n\nKey rotation\n  \n\nKey recovery\n  \n\nKey\
          \ expiration\n  \n\n\nCreate\n\nThe DID method specification MUST specify\
          \ how a client creates a\nDID record\u2014the combination of a DID and its\
          \ associated DDO\u2014on the\ntarget system, including all cryptographic\
          \ operations necessary\nto establish proof of ownership.\n\n\n\nRead/Verify\n\
          \n\n    \n      The DID method specification MUST specify how a client uses\
          \ a DID to request a DDO from the target system, including how the client\
          \ can verify the authenticity of the response.\n\n\n\n\n\n\nUpdate\n\n\n\
          \    \n      The DID method specification MUST specify how a client can\
          \ update a DID record on the target system, including all cryptographic\
          \ operations necessary to establish proof of control.\n\n\n\n\n\n\nDelete/Revoke\n\
          \n\n    \n      Although a core feature of distributed ledgers is immutability,\
          \ the DID method specification MUST specify how a client can revoke a DID\
          \ record on the target system, including all cryptographic operations necessary\
          \ to establish proof of revocation.\n\n\n\n\n\n\n"
      e9d38336f4e81d3ff1698dfa7cb5960c8e9d64b33ca145cbc8803ece19ce6c4d:
      - major: '9'
        minor: '0'
        term: '9.0'
        title: DID Operations
        txt: "\nDID Operations\n\n\n    \n      To enable the full functionality of\
          \ DIDs and DDOs on a particular distributed ledger or network (called the\
          \ target system), a DID method specification MUST specify how each of the\
          \ following\n        CRUD\n       operations is performed by a client. Each\
          \ operation MUST be specified to the level of detail necessary to build\
          \ and test interoperable client implementations with the target system.\n\
          \n    \n      Note that, due to the specified contents of DDOs, these operations\
          \ can effectively be used to perform all the operations required of a CKMS\
          \ (cryptographic key management system), e.g.:\n\n\n\n\nKey registration\n\
          \  \nKey replacement\n  \nKey rotation\n  \nKey recovery\n  \nKey expiration\n\
          \  \n\n\nCreate\n\n\n    \n      The DID method specification MUST specify\
          \ how a client creates a DID record\u2014the combination of a DID and its\
          \ associated DDO\u2014on the target system, including all cryptographic\
          \ operations necessary to establish proof of ownership.\n\n\n\n\n\n\nRead/Verify\n\
          \n\n    \n      The DID method specification MUST specify how a client uses\
          \ a DID to request a DDO from the target system, including how the client\
          \ can verify the authenticity of the response.\n\n\n\n\n\n\nUpdate\n\n\n\
          \    \n      The DID method specification MUST specify how a client can\
          \ update a DID record on the target system, including all cryptographic\
          \ operations necessary to establish proof of control.\n\n\n\n\n\n\nDelete/Revoke\n\
          \n\n    \n      Although a core feature of distributed ledgers is immutability,\
          \ the DID method specification MUST specify how a client can revoke a DID\
          \ record on the target system, including all cryptographic operations necessary\
          \ to establish proof of revocation.\n\n\n\n\n\n\n"
  DID Persistence:
    count: 2
    mappings:
      deb65f64be64f12ca67f971d6e644dda684065e8b40e538e3fe42452b9705416:
      - major: '7'
        minor: '6'
        term: '7.6'
        title: DID Persistence
        txt: "\nDID Persistence\n\nA DID MUST be persistent and immutable, i.e., bound\
          \ to an identity owner\nonce and never changed (forever). Ideally a DID\
          \ would be a completely\nabstract decentralized identifier (like a UUID)\
          \ that could be bound to\nmultiple underlying distributed ledgers or networks\
          \ over time, thus\nmaintaining its persistence independent of any particular\
          \ ledger or\nnetwork. However registering the same identifier on multiple\
          \ ledgers or\nnetworks introduces extremely hard identity ownership and\
          \ start-of-authority\n  (SOA) problems. It also greatly increases implementation\
          \ complexity for\ndevelopers.\n\n\nTo avoid these issues, it is RECOMMENDED\
          \ that DID method specifications\nonly produce DIDs and DID methods bound\
          \ to strong, stable ledgers or\nnetworks capable of making the highest level\
          \ of commitment to\npersistence of the DID and DID method over time.\n\n\
          \nNOTE: Although not included in this version, future versions of this\n\
          specification may support a DDO equivID property to establish verifiable\n\
          equivalence relations between DID records representing the same identity\n\
          owner on multiple ledgers or networks. Such equivalence relations can\n\
          produce the practical equivalent of a single persistent abstract DID.\n\
          See Future Work (section 11).\n\n\n"
      - major: '7'
        minor: '6'
        term: '7.6'
        title: DID Persistence
        txt: "\nDID Persistence\n\nA DID MUST be persistent and immutable, i.e., bound\
          \ to an identity owner\nonce and never changed (forever). Ideally a DID\
          \ would be a completely\nabstract decentralized identifier (like a UUID)\
          \ that could be bound to\nmultiple underlying distributed ledgers or networks\
          \ over time, thus\nmaintaining its persistence independent of any particular\
          \ ledger or\nnetwork. However registering the same identifier on multiple\
          \ ledgers or\nnetworks introduces extremely hard identity ownership and\
          \ start-of-authority\n  (SOA) problems. It also greatly increases implementation\
          \ complexity for\ndevelopers.\n\n\nTo avoid these issues, it is RECOMMENDED\
          \ that DID method specifications\nonly produce DIDs and DID methods bound\
          \ to strong, stable ledgers or\nnetworks capable of making the highest level\
          \ of commitment to\npersistence of the DID and DID method over time.\n\n\
          \nNOTE: Although not included in this version, future versions of this\n\
          specification may support a DDO equivID property to establish verifiable\n\
          equivalence relations between DID records representing the same identity\n\
          owner on multiple ledgers or networks. Such equivalence relations can\n\
          produce the practical equivalent of a single persistent abstract DID.\n\
          See Future Work (section 11).\n\n\n"
      eaacb0f3eae8c6dd050dfce42cae035cf54613ade0dc632fe69add1d174b15fc:
      - major: '7'
        minor: '6'
        term: '7.6'
        title: DID Persistence
        txt: "\nDID Persistence\n\nA DID MUST be persistent and immutable, i.e., bound\
          \ to an identity owner\nonce and never changed (forever). Ideally a DID\
          \ would be a completely\nabstract decentralized identifier (like a UUID)\
          \ that could be bound to\nmultiple underlying distributed ledgers or networks\
          \ over time, thus\nmaintaining its persistence independent of any particular\
          \ ledger or\nnetwork. However registering the same identifier on multiple\
          \ ledgers or\nnetworks introduces extremely hard identity ownership and\
          \ start-of-authority\n  \_(SOA) problems. It also greatly increases implementation\
          \ complexity for\ndevelopers.\n\n\nTo avoid these issues, it is RECOMMENDED\
          \ that DID method specifications\nonly produce DIDs and DID methods bound\
          \ to strong, stable ledgers or\nnetworks capable of making the highest level\
          \ of commitment to\npersistence of the DID and DID method over time.\n\n\
          \nNOTE: Although not included in this version, future versions of this\n\
          specification may support a DDO equivID property to establish verifiable\n\
          equivalence relations between DID records representing the same identity\n\
          owner on multiple ledgers or networks. Such equivalence relations can\n\
          produce the practical equivalent of a single persistent abstract DID.\n\
          See Future Work (section 11).\n\n\n"
  DID Resolvers:
    count: 2
    mappings:
      6ce66e62027d41da1810e05fe86edc249902587a057f8946cbcdea584abb7192:
      - major: '10'
        minor: '0'
        term: '10.0'
        title: DID Resolvers
        txt: "\nDID Resolvers\n\n\n    \n      A DID resolver is a software component\
          \ with an API designed to accept requests for DID lookups and execute the\
          \ corresponding DID method to retrieve the authoritative DDO. To be conformant\
          \ with this specification, a DID resolver:\n\n\n\n\nSHOULD validate that\
          \ a DID is valid according to its DID method\nspecification, otherwise it\
          \ should produce an error.\n  \nMUST conform to the requirements of the\
          \ applicable DID method\nspecification when performing DID resolution operations.\n\
          \  \nSHOULD offer the service of verifying the integrity of the DDO if it\n\
          is signed.\n  \nMAY offer the service of returning requested properties\
          \ of the DDO.\n  \n\n\n\n\n\n\n\n"
      7a7266f386cf02af6d0b23bff847025821964b43926028bd1b6e252cfc550987:
      - major: '10'
        minor: '0'
        term: '10.0'
        title: DID Resolvers
        txt: "\nDID Resolvers\n\n\n    \n      A DID resolver is a software component\
          \ with an API designed to accept requests for DID lookups and execute the\
          \ corresponding DID method to retrieve the authoritative DDO. To be conformant\
          \ with this specification, a DID resolver:\n\n\n\n\n\nSHOULD validate that\
          \ a DID is valid according to its DID method\nspecification, otherwise it\
          \ should produce an error.\n  \n\nMUST conform to the requirements of the\
          \ applicable DID method\nspecification when performing DID resolution operations.\n\
          \  \n\nSHOULD offer the service of verifying the integrity of the DDO if\
          \ it\nis signed.\n  \n\nMAY offer the service of returning requested properties\
          \ of the DDO.\n  \n\n\n\n\n\n\n\n"
      - major: '10'
        minor: '0'
        term: '10.0'
        title: DID Resolvers
        txt: "\nDID Resolvers\n\n\n    \n      A DID resolver is a software component\
          \ with an API designed to accept requests for DID lookups and execute the\
          \ corresponding DID method to retrieve the authoritative DDO. To be conformant\
          \ with this specification, a DID resolver:\n\n\n\n\n\nSHOULD validate that\
          \ a DID is valid according to its DID method\nspecification, otherwise it\
          \ should produce an error.\n  \n\nMUST conform to the requirements of the\
          \ applicable DID method\nspecification when performing DID resolution operations.\n\
          \  \n\nSHOULD offer the service of verifying the integrity of the DDO if\
          \ it\nis signed.\n  \n\nMAY offer the service of returning requested properties\
          \ of the DDO.\n  \n\n\n\n\n\n\n\n"
  DIDs (Decentralized Identifiers):
    count: 2
    mappings:
      22a20e2dfba5853e72951bcadb94e57870caacf41d8e4ac2b5669ed42762dec7:
      - major: '7'
        minor: '0'
        term: '7.0'
        title: DIDs (Decentralized Identifiers)
        txt: "\nDIDs (Decentralized Identifiers)\n\nThe foundation of DID architecture\
          \ is the concept of the decentralized\nidentifier. This concept is not new;\
          \ UUIDs\n  \_(Universally Unique IDentifiers) were first developed in the\
          \ 1980s and\nlater became a standard feature of the Open Software Foundation\u2019\
          s\n  Distributed\nComputing Environment . UUIDs achieve global uniqueness\
          \ without a\ncentralized registry service by using an algorithm that generates\n\
          128-bit values with sufficient entropy that the chance of collision are\n\
          infinitesimally small. UUIDs are formally a URN namespace specified in\n\
          \  IETF RFC 4122 .\n\n\nA DID is similar to a UUID except: (a) it can be\
          \ resolved or\ndereferenced to a standard resource describing the identity\
          \ owner (a\nDDO\u2014see section 6), and (b) the DDO may contain public\
          \ key descriptions\nthat enable cryptographic verification of DID ownership.\n\
          \n\nThe Generic DID Scheme\n\nThe generic DID scheme is a URI scheme conformant\
          \ with RFC 3986 . It consists of a\nDID followed by an optional path and/or\
          \ fragment. The term DID refers\nonly to the identifier conforming to the\
          \ did rule in the ABNF below;\nwhen used alone, it does not include a path\
          \ or fragment. A DID that may\noptionally include a path and/or fragment\
          \ is called a DID reference.\n\n\nFollowing is the ABNF definition using\
          \ the syntax in RFC 5234 \_(which defines ALPHA\nas upper or lowercase A-Z).\n\
          \n\n      did-reference      = did [ \"/\" did-path ] [ \"#\" did-fragment\
          \ ]did                = \"did:\" method \":\" specific-idstring        \
          \          method             = 1*methodcharmethodchar         = %x61-7A\
          \ / DIGITspecific-idstring  = idstring *( \":\" idstring )idstring     \
          \      = 1*idcharidchar             = ALPHA / DIGIT / \".\" / \"-\"\n\n\n\
          \nSee sections 5.3 and 5.4 for the ABNF rules defining DID paths and\nfragments.\n\
          \n\n\nSpecific DID Method Schemes\n\nA DID method specification MUST define\
          \ exactly one specific DID scheme\nidentified by exactly one method name\
          \ (the method rule in section 5.1).\nSince DIDs are intended for decentralized\
          \ identity infrastructure, it is\nNOT RECOMMENDED to establish a registry\
          \ of unique DID method names.\nRather the uniqueness of DID method names\
          \ should be established via\nhuman consensus, i.e., a specific DID scheme\
          \ MUST use a method name that\nis unique among all DID method names known\
          \ to the specification authors\nat the time of publication.\n\n\nA list\
          \ of known DID method names is included in Appendix A.\n\n\nSince the method\
          \ name is part of the DID, it SHOULD be as short as\npractical. A method\
          \ name of five characters or less is RECOMMENDED. The\nmethod name MAY reflect\
          \ the name of the distributed ledger or network to\nwhich the DID method\
          \ specification applies.\n\n\nThe DID method specification for the specific\
          \ DID scheme MUST specify\nhow to generate the specific-idstring component\
          \ of a DID. The\nspecific-idstring value MUST be able to be generated without\
          \ the use of\na centralized registry service. The specific-idstring value\
          \ SHOULD be\nglobally unique by itself. The fully qualified DID as defined\
          \ by the did\nrule in section 5.1 MUST be globally unique.\n\n\nIf needed,\
          \ a specific DID scheme MAY define multiple specific\nspecific-idstring\
          \ formats. It is RECOMMENDED that a specific DID scheme\ndefine as few specific-idstring\
          \ formats as possible.\n\n\n\nDID Paths\n\nA generic DID path (the did-path\
          \ rule in section 5.1) is identical to a\nURI path and MUST conform to the\
          \ ABNF of the path-rootless ABNF rule in\n  RFC 3986 . A DID path\nSHOULD\
          \ be used to address resources available via a DID service\nendpoint. See\
          \ section 6.6.\n\n\nA specific DID scheme MAY specify ABNF rules for DID\
          \ paths that are more\nrestrictive than the generic rules in this section.\n\
          \n\n\nDID Fragments\n\nA generic DID fragment (the did-fragment rule in\
          \ section 5.1) is\nidentical to a URI fragment and MUST conform to the ABNF\
          \ of the fragment\nABNF rule in RFC 3986\n  . A DID fragment MUST be used\
          \ only as a method-independent pointer into\nthe DDO to identify a unique\
          \ key description or other DDO component. To\nresolve this pointer, the\
          \ complete DID reference including the DID\nfragment MUST be used as the\
          \ value of the id key for the target JSON\nobject.\n\n\nA specific DID scheme\
          \ MAY specify ABNF rules for DID fragments that are\nmore restrictive than\
          \ the generic rules in this section.\n\n\n\nDID Normalization\n\nFor the\
          \ broadest interoperability, DID normalization should be as simple\nand\
          \ universal as possible. Therefore:\n\n\nThe did: scheme name MUST be lowercase.\n\
          \  \nThe method name MUST be lowercase.\n  \nCase sensitivity and normalization\
          \ of the value of the\nspecific-idstring rule in section 5.1 MUST be defined\
          \ by the governing\nDID method specification.\n  \n\n\n\nDID Persistence\n\
          \nA DID MUST be persistent and immutable, i.e., bound to an identity owner\n\
          once and never changed (forever). Ideally a DID would be a completely\n\
          abstract decentralized identifier (like a UUID) that could be bound to\n\
          multiple underlying distributed ledgers or networks over time, thus\nmaintaining\
          \ its persistence independent of any particular ledger or\nnetwork. However\
          \ registering the same identifier on multiple ledgers or\nnetworks introduces\
          \ extremely hard identity ownership and start-of-authority\n  \_(SOA) problems.\
          \ It also greatly increases implementation complexity for\ndevelopers.\n\
          \n\nTo avoid these issues, it is RECOMMENDED that DID method specifications\n\
          only produce DIDs and DID methods bound to strong, stable ledgers or\nnetworks\
          \ capable of making the highest level of commitment to\npersistence of the\
          \ DID and DID method over time.\n\n\nNOTE: Although not included in this\
          \ version, future versions of this\nspecification may support a DDO equivID\
          \ property to establish verifiable\nequivalence relations between DID records\
          \ representing the same identity\nowner on multiple ledgers or networks.\
          \ Such equivalence relations can\nproduce the practical equivalent of a\
          \ single persistent abstract DID.\nSee Future Work (section 11).\n\n\n\n"
      f2df2076589be8d67ef0c3984c9dc9033fc8034d1e40ab983448f2b014745874:
      - major: '7'
        minor: '0'
        term: '7.0'
        title: DIDs (Decentralized Identifiers)
        txt: "\nDIDs (Decentralized Identifiers)\n\nThe foundation of DID architecture\
          \ is the concept of the decentralized\nidentifier. This concept is not new;\
          \ UUIDs\n  (Universally Unique IDentifiers) were first developed in the\
          \ 1980s and\nlater became a standard feature of the Open Software Foundation\u2019\
          s\n  Distributed\nComputing Environment . UUIDs achieve global uniqueness\
          \ without a\ncentralized registry service by using an algorithm that generates\n\
          128-bit values with sufficient entropy that the chance of collision are\n\
          infinitesimally small. UUIDs are formally a URN namespace specified in\n\
          \  IETF RFC 4122 .\n\n\nA DID is similar to a UUID except: (a) it can be\
          \ resolved or\ndereferenced to a standard resource describing the identity\
          \ owner (a\nDDO\u2014see section 6), and (b) the DDO may contain public\
          \ key descriptions\nthat enable cryptographic verification of DID ownership.\n\
          \n\nThe Generic DID Scheme\n\nThe generic DID scheme is a URI scheme conformant\
          \ with RFC 3986 . It consists of a\nDID followed by an optional path and/or\
          \ fragment. The term DID refers\nonly to the identifier conforming to the\
          \ did rule in the ABNF below;\nwhen used alone, it does not include a path\
          \ or fragment. A DID that may\noptionally include a path and/or fragment\
          \ is called a DID reference.\n\n\nFollowing is the ABNF definition using\
          \ the syntax in RFC 5234 (which defines ALPHA\nas upper or lowercase A-Z).\n\
          \n\n  did-reference      = did [ \"/\" did-path ] [ \"#\" did-fragment ]\n\
          \  did                = \"did:\" method \":\" specific-idstring\n  method\
          \             = 1*methodcharmethodchar         = %x61-7A / DIGIT\n  specific-idstring\
          \  = idstring *( \":\" idstring )\n  idstring           = 1*idcharidchar\
          \             = ALPHA / DIGIT / \".\" / \"-\"\n\n\nSee sections 5.3 and\
          \ 5.4 for the ABNF rules defining DID paths and\nfragments.\n\n\n\nSpecific\
          \ DID Method Schemes\n\nA DID method specification MUST define exactly one\
          \ specific DID scheme\nidentified by exactly one method name (the method\
          \ rule in section 5.1).\nSince DIDs are intended for decentralized identity\
          \ infrastructure, it is\nNOT RECOMMENDED to establish a registry of unique\
          \ DID method names.\nRather the uniqueness of DID method names should be\
          \ established via\nhuman consensus, i.e., a specific DID scheme MUST use\
          \ a method name that\nis unique among all DID method names known to the\
          \ specification authors\nat the time of publication.\n\n\nA list of known\
          \ DID method names is included in Appendix A.\n\n\nSince the method name\
          \ is part of the DID, it SHOULD be as short as\npractical. A method name\
          \ of five characters or less is RECOMMENDED. The\nmethod name MAY reflect\
          \ the name of the distributed ledger or network to\nwhich the DID method\
          \ specification applies.\n\n\nThe DID method specification for the specific\
          \ DID scheme MUST specify\nhow to generate the specific-idstring component\
          \ of a DID. The\nspecific-idstring value MUST be able to be generated without\
          \ the use of\na centralized registry service. The specific-idstring value\
          \ SHOULD be\nglobally unique by itself. The fully qualified DID as defined\
          \ by the did\nrule in section 5.1 MUST be globally unique.\n\n\nIf needed,\
          \ a specific DID scheme MAY define multiple specific\nspecific-idstring\
          \ formats. It is RECOMMENDED that a specific DID scheme\ndefine as few specific-idstring\
          \ formats as possible.\n\n\n\nDID Paths\n\nA generic DID path (the did-path\
          \ rule in section 5.1) is identical to a\nURI path and MUST conform to the\
          \ ABNF of the path-rootless ABNF rule in\n  RFC 3986 . A DID path\nSHOULD\
          \ be used to address resources available via a DID service\nendpoint. See\
          \ section 6.6.\n\n\nA specific DID scheme MAY specify ABNF rules for DID\
          \ paths that are more\nrestrictive than the generic rules in this section.\n\
          \n\n\nDID Fragments\n\nA generic DID fragment (the did-fragment rule in\
          \ section 5.1) is\nidentical to a URI fragment and MUST conform to the ABNF\
          \ of the fragment\nABNF rule in RFC 3986\n  . A DID fragment MUST be used\
          \ only as a method-independent pointer into\nthe DDO to identify a unique\
          \ key description or other DDO component. To\nresolve this pointer, the\
          \ complete DID reference including the DID\nfragment MUST be used as the\
          \ value of the id key for the target JSON\nobject.\n\n\nA specific DID scheme\
          \ MAY specify ABNF rules for DID fragments that are\nmore restrictive than\
          \ the generic rules in this section.\n\n\n\nDID Normalization\n\nFor the\
          \ broadest interoperability, DID normalization should be as simple\nand\
          \ universal as possible. Therefore:\n\n\n\nThe did: scheme name MUST be\
          \ lowercase.\n  \n\nThe method name MUST be lowercase.\n  \n\nCase sensitivity\
          \ and normalization of the value of the\nspecific-idstring rule in section\
          \ 5.1 MUST be defined by the governing\nDID method specification.\n  \n\n\
          \n\nDID Persistence\n\nA DID MUST be persistent and immutable, i.e., bound\
          \ to an identity owner\nonce and never changed (forever). Ideally a DID\
          \ would be a completely\nabstract decentralized identifier (like a UUID)\
          \ that could be bound to\nmultiple underlying distributed ledgers or networks\
          \ over time, thus\nmaintaining its persistence independent of any particular\
          \ ledger or\nnetwork. However registering the same identifier on multiple\
          \ ledgers or\nnetworks introduces extremely hard identity ownership and\
          \ start-of-authority\n  (SOA) problems. It also greatly increases implementation\
          \ complexity for\ndevelopers.\n\n\nTo avoid these issues, it is RECOMMENDED\
          \ that DID method specifications\nonly produce DIDs and DID methods bound\
          \ to strong, stable ledgers or\nnetworks capable of making the highest level\
          \ of commitment to\npersistence of the DID and DID method over time.\n\n\
          \nNOTE: Although not included in this version, future versions of this\n\
          specification may support a DDO equivID property to establish verifiable\n\
          equivalence relations between DID records representing the same identity\n\
          owner on multiple ledgers or networks. Such equivalence relations can\n\
          produce the practical equivalent of a single persistent abstract DID.\n\
          See Future Work (section 11).\n\n\n\n"
      - major: '7'
        minor: '0'
        term: '7.0'
        title: DIDs (Decentralized Identifiers)
        txt: "\nDIDs (Decentralized Identifiers)\n\nThe foundation of DID architecture\
          \ is the concept of the decentralized\nidentifier. This concept is not new;\
          \ UUIDs\n  (Universally Unique IDentifiers) were first developed in the\
          \ 1980s and\nlater became a standard feature of the Open Software Foundation\u2019\
          s\n  Distributed\nComputing Environment . UUIDs achieve global uniqueness\
          \ without a\ncentralized registry service by using an algorithm that generates\n\
          128-bit values with sufficient entropy that the chance of collision are\n\
          infinitesimally small. UUIDs are formally a URN namespace specified in\n\
          \  IETF RFC 4122 .\n\n\nA DID is similar to a UUID except: (a) it can be\
          \ resolved or\ndereferenced to a standard resource describing the identity\
          \ owner (a\nDDO\u2014see section 6), and (b) the DDO may contain public\
          \ key descriptions\nthat enable cryptographic verification of DID ownership.\n\
          \n\nThe Generic DID Scheme\n\nThe generic DID scheme is a URI scheme conformant\
          \ with RFC 3986 . It consists of a\nDID followed by an optional path and/or\
          \ fragment. The term DID refers\nonly to the identifier conforming to the\
          \ did rule in the ABNF below;\nwhen used alone, it does not include a path\
          \ or fragment. A DID that may\noptionally include a path and/or fragment\
          \ is called a DID reference.\n\n\nFollowing is the ABNF definition using\
          \ the syntax in RFC 5234 (which defines ALPHA\nas upper or lowercase A-Z).\n\
          \n\n  did-reference      = did [ \"/\" did-path ] [ \"#\" did-fragment ]\n\
          \  did                = \"did:\" method \":\" specific-idstring\n  method\
          \             = 1*methodcharmethodchar         = %x61-7A / DIGIT\n  specific-idstring\
          \  = idstring *( \":\" idstring )\n  idstring           = 1*idcharidchar\
          \             = ALPHA / DIGIT / \".\" / \"-\"\n\n\nSee sections 5.3 and\
          \ 5.4 for the ABNF rules defining DID paths and\nfragments.\n\n\n\nSpecific\
          \ DID Method Schemes\n\nA DID method specification MUST define exactly one\
          \ specific DID scheme\nidentified by exactly one method name (the method\
          \ rule in section 5.1).\nSince DIDs are intended for decentralized identity\
          \ infrastructure, it is\nNOT RECOMMENDED to establish a registry of unique\
          \ DID method names.\nRather the uniqueness of DID method names should be\
          \ established via\nhuman consensus, i.e., a specific DID scheme MUST use\
          \ a method name that\nis unique among all DID method names known to the\
          \ specification authors\nat the time of publication.\n\n\nA list of known\
          \ DID method names is included in Appendix A.\n\n\nSince the method name\
          \ is part of the DID, it SHOULD be as short as\npractical. A method name\
          \ of five characters or less is RECOMMENDED. The\nmethod name MAY reflect\
          \ the name of the distributed ledger or network to\nwhich the DID method\
          \ specification applies.\n\n\nThe DID method specification for the specific\
          \ DID scheme MUST specify\nhow to generate the specific-idstring component\
          \ of a DID. The\nspecific-idstring value MUST be able to be generated without\
          \ the use of\na centralized registry service. The specific-idstring value\
          \ SHOULD be\nglobally unique by itself. The fully qualified DID as defined\
          \ by the did\nrule in section 5.1 MUST be globally unique.\n\n\nIf needed,\
          \ a specific DID scheme MAY define multiple specific\nspecific-idstring\
          \ formats. It is RECOMMENDED that a specific DID scheme\ndefine as few specific-idstring\
          \ formats as possible.\n\n\n\nDID Paths\n\nA generic DID path (the did-path\
          \ rule in section 5.1) is identical to a\nURI path and MUST conform to the\
          \ ABNF of the path-rootless ABNF rule in\n  RFC 3986 . A DID path\nSHOULD\
          \ be used to address resources available via a DID service\nendpoint. See\
          \ section 6.6.\n\n\nA specific DID scheme MAY specify ABNF rules for DID\
          \ paths that are more\nrestrictive than the generic rules in this section.\n\
          \n\n\nDID Fragments\n\nA generic DID fragment (the did-fragment rule in\
          \ section 5.1) is\nidentical to a URI fragment and MUST conform to the ABNF\
          \ of the fragment\nABNF rule in RFC 3986\n  . A DID fragment MUST be used\
          \ only as a method-independent pointer into\nthe DDO to identify a unique\
          \ key description or other DDO component. To\nresolve this pointer, the\
          \ complete DID reference including the DID\nfragment MUST be used as the\
          \ value of the id key for the target JSON\nobject.\n\n\nA specific DID scheme\
          \ MAY specify ABNF rules for DID fragments that are\nmore restrictive than\
          \ the generic rules in this section.\n\n\n\nDID Normalization\n\nFor the\
          \ broadest interoperability, DID normalization should be as simple\nand\
          \ universal as possible. Therefore:\n\n\n\nThe did: scheme name MUST be\
          \ lowercase.\n  \n\nThe method name MUST be lowercase.\n  \n\nCase sensitivity\
          \ and normalization of the value of the\nspecific-idstring rule in section\
          \ 5.1 MUST be defined by the governing\nDID method specification.\n  \n\n\
          \n\nDID Persistence\n\nA DID MUST be persistent and immutable, i.e., bound\
          \ to an identity owner\nonce and never changed (forever). Ideally a DID\
          \ would be a completely\nabstract decentralized identifier (like a UUID)\
          \ that could be bound to\nmultiple underlying distributed ledgers or networks\
          \ over time, thus\nmaintaining its persistence independent of any particular\
          \ ledger or\nnetwork. However registering the same identifier on multiple\
          \ ledgers or\nnetworks introduces extremely hard identity ownership and\
          \ start-of-authority\n  (SOA) problems. It also greatly increases implementation\
          \ complexity for\ndevelopers.\n\n\nTo avoid these issues, it is RECOMMENDED\
          \ that DID method specifications\nonly produce DIDs and DID methods bound\
          \ to strong, stable ledgers or\nnetworks capable of making the highest level\
          \ of commitment to\npersistence of the DID and DID method over time.\n\n\
          \nNOTE: Although not included in this version, future versions of this\n\
          specification may support a DDO equivID property to establish verifiable\n\
          equivalence relations between DID records representing the same identity\n\
          owner on multiple ledgers or networks. Such equivalence relations can\n\
          produce the practical equivalent of a single persistent abstract DID.\n\
          See Future Work (section 11).\n\n\n\n"
  Example DIDs and DDOs:
    count: 2
    mappings:
      591a4f4da48e723b1bc2ab9b410f88451d19f359a0525a042a140552f73d1930:
      - major: '4'
        minor: '0'
        term: '4.0'
        title: Example DIDs and DDOs
        txt: "\nExample DIDs and DDOs\n\nThis is an example of a DID:\n\n\ndid:example:21tDAKCERh95uGgKbJNHYp\n\
          \n\nExample Owner-Managed DDO\n\nFollowing is an example of a DDO that describes\
          \ the DID above. This\nexample assumes that the identity owner\u2014the\
          \ entity that controls the\nprivate keys for this identity\u2014is authoritative\
          \ for the DDO. See section\n2.2 for an example of a DDO created by a guardian.\
          \ For the authoritative\nJSON-LD context definition, see Appendix B (the\
          \ URL for the @context\nproperty below is just for illustration).\n\n\n\
          \      {\n      \"@context\": \"https://example.org/did/v1\",\n        \"\
          id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n        \"owner\": [{\n \
          \           \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-1\",\n    \
          \        \"type\": [\"CryptographicKey\", \"EdDsaPublicKey\"],\n       \
          \     \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"lji9qTtkCydxtez/bt1zdLxVMMbz4SzWvlqgOBmURoM=\"\
          \n        }, {\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyPem\"\
          : \"----BEGIN PUBLIC KEY-----\\r\\nMIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\\\
          r\\n-----END PUBLIC KEY-----\"\n        }],\n        \"control\": [{\n \
          \           \"type\": \"OrControl\",\n            \"signer\": [\n      \
          \          \"did:example:21tDAKCERh95uGgKbJNHYp\",\n                \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n            ]\n        }],\n        \"service\": {\n            \"openid\"\
          : \"https://openid.example.com/456\",\n            \"xdi\": \"https://xdi.example.com/123\"\
          \n        },\n        \"created\": \"2002-10-10T17:00:00Z\",\n        \"\
          updated\": \"2016-10-17T02:41:00Z\",\n        \"signature\": {\n       \
          \     \"type\": \"RsaSignature2016\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key/1\"\
          ,\n            \"signatureValue\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }\n      }\n\n\n\n\nExample Guardian-Managed DDO\n\nFollowing\
          \ is a second example of a DDO that describes the DID above. In\nthis case\
          \ the DDO describes a dependent\u2014an entity who is not currently\nin\
          \ a position to control the private keys for this identity. This DDO\nwas\
          \ created by a guardian\u2014a separate identity owner with its own DID\n\
          that serves as a trustee for the dependent. Note that while this DDO\nasserts\
          \ a set of service endpoints, it does not yet contain a set of key\ndescriptions\
          \ because the dependent does not yet have its own set of\nprivate keys.\n\
          \n\n      {\n      \"@context\": \"https://example.org/did/v1\",\n     \
          \   \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n        \"guardian\"\
          : \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n        \"control\": [ \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \ ],\n        \"service\": {\n            \"openid\": \"https://openid.example.com/456\"\
          ,\n            \"xdi\": \"https://xdi.example.com/123\"\n        },\n  \
          \      \"type\": \"http://schema.org/Person\",\n        \"created\": \"\
          2002-10-10T17:00:00Z\",\n        \"updated\": \"2016-10-17T02:41:00Z\",\n\
          \        \"signature\": {\n            \"type\": \"RsaSignature2016\",\n\
          \            \"created\": \"2016-02-08T16:02:20Z\",\n            \"creator\"\
          : \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key-1\",\n            \"signatureValue\"\
          : \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }\n      }\n\n\n\n\n\n\n"
      897c717c6daaa6ec0030323e05284efee89847de3c4684b501daaa97dd903c69:
      - major: '4'
        minor: '0'
        term: '4.0'
        title: Example DIDs and DDOs
        txt: "\nExample DIDs and DDOs\n\nThis is an example of a DID:\n\n\ndid:example:21tDAKCERh95uGgKbJNHYp\n\
          \n\nExample Owner-Managed DDO\n\nFollowing is an example of a DDO that describes\
          \ the DID above. This\nexample assumes that the identity owner\u2014the\
          \ entity that controls the\nprivate keys for this identity\u2014is authoritative\
          \ for the DDO. See section\n2.2 for an example of a DDO created by a guardian.\
          \ For the authoritative\nJSON-LD context definition, see Appendix B (the\
          \ URL for the @context\nproperty below is just for illustration).\n\n\n\
          {\n  \"@context\": \"https://example.org/did/v1\",\n  \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n  \"owner\": [{\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-1\"\
          ,\n    \"type\": [\"CryptographicKey\", \"EdDsaPublicKey\"],\n    \"curve\"\
          : \"ed25519\",\n    \"expires\": \"2017-02-08T16:02:20Z\",\n    \"publicKeyBase64\"\
          : \"lji9qTtkCydxtez/bt1zdLxVMMbz4SzWvlqgOBmURoM=\"\n  }, {\n    \"id\":\
          \ \"did:example:21tDAKCERh95uGgKbJNHYp#key-2\",\n    \"type\": [\"CryptographicKey\"\
          , \"RsaPublicKey\"],\n    \"expires\": \"2017-03-22T00:00:00Z\",\n    \"\
          publicKeyPem\": \"----BEGIN PUBLIC KEY-----\\r\\nMIIB..\n      ... sGbFmgQaRyV\\\
          r\\n-----END PUBLIC KEY-----\"\n  }],\n  \"control\": [{\n    \"type\":\
          \ \"OrControl\",\n    \"signer\": [\n        \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n        \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n    ]\n  }],\n  \"service\"\
          : {\n    \"openid\": \"https://openid.example.com/456\",\n    \"xdi\": \"\
          https://xdi.example.com/123\"\n  },\n  \"created\": \"2002-10-10T17:00:00Z\"\
          ,\n  \"updated\": \"2016-10-17T02:41:00Z\",\n  \"signature\": {\n    \"\
          type\": \"RsaSignature2016\",\n    \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n    \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key/1\",\n    \"\
          signatureValue\": \"IOmA4R7TfhkYTYW8...CBMq2/gi25s=\"\n  }\n}\n\n\n\n\n\
          Example Guardian-Managed DDO\n\nFollowing is a second example of a DDO that\
          \ describes the DID above. In\nthis case the DDO describes a dependent\u2014\
          an entity who is not currently\nin a position to control the private keys\
          \ for this identity. This DDO\nwas created by a guardian\u2014a separate\
          \ identity owner with its own DID\nthat serves as a trustee for the dependent.\
          \ Note that while this DDO\nasserts a set of service endpoints, it does\
          \ not yet contain a set of key\ndescriptions because the dependent does\
          \ not yet have its own set of\nprivate keys.\n\n\n{\n\"@context\": \"https://example.org/did/v1\"\
          ,\n  \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n  \"guardian\": \"\
          did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n  \"control\": [ \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \ ],\n  \"service\": {\n    \"openid\": \"https://openid.example.com/456\"\
          ,\n    \"xdi\": \"https://xdi.example.com/123\"\n  },\n  \"type\": \"http://schema.org/Person\"\
          ,\n  \"created\": \"2002-10-10T17:00:00Z\",\n  \"updated\": \"2016-10-17T02:41:00Z\"\
          ,\n  \"signature\": {\n    \"type\": \"RsaSignature2016\",\n    \"created\"\
          : \"2016-02-08T16:02:20Z\",\n    \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key-1\"\
          ,\n    \"signatureValue\": \"IOmA4R7Tf...3CBMq2/gi25s=\"\n  }\n}\n\n\n\n\
          \n\n"
      - major: '4'
        minor: '0'
        term: '4.0'
        title: Example DIDs and DDOs
        txt: "\nExample DIDs and DDOs\n\nThis is an example of a DID:\n\n\ndid:example:21tDAKCERh95uGgKbJNHYp\n\
          \n\nExample Owner-Managed DDO\n\nFollowing is an example of a DDO that describes\
          \ the DID above. This\nexample assumes that the identity owner\u2014the\
          \ entity that controls the\nprivate keys for this identity\u2014is authoritative\
          \ for the DDO. See section\n2.2 for an example of a DDO created by a guardian.\
          \ For the authoritative\nJSON-LD context definition, see Appendix B (the\
          \ URL for the @context\nproperty below is just for illustration).\n\n\n\
          {\n  \"@context\": \"https://example.org/did/v1\",\n  \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n  \"owner\": [{\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-1\"\
          ,\n    \"type\": [\"CryptographicKey\", \"EdDsaPublicKey\"],\n    \"curve\"\
          : \"ed25519\",\n    \"expires\": \"2017-02-08T16:02:20Z\",\n    \"publicKeyBase64\"\
          : \"lji9qTtkCydxtez/bt1zdLxVMMbz4SzWvlqgOBmURoM=\"\n  }, {\n    \"id\":\
          \ \"did:example:21tDAKCERh95uGgKbJNHYp#key-2\",\n    \"type\": [\"CryptographicKey\"\
          , \"RsaPublicKey\"],\n    \"expires\": \"2017-03-22T00:00:00Z\",\n    \"\
          publicKeyPem\": \"----BEGIN PUBLIC KEY-----\\r\\nMIIB..\n      ... sGbFmgQaRyV\\\
          r\\n-----END PUBLIC KEY-----\"\n  }],\n  \"control\": [{\n    \"type\":\
          \ \"OrControl\",\n    \"signer\": [\n        \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n        \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n    ]\n  }],\n  \"service\"\
          : {\n    \"openid\": \"https://openid.example.com/456\",\n    \"xdi\": \"\
          https://xdi.example.com/123\"\n  },\n  \"created\": \"2002-10-10T17:00:00Z\"\
          ,\n  \"updated\": \"2016-10-17T02:41:00Z\",\n  \"signature\": {\n    \"\
          type\": \"RsaSignature2016\",\n    \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n    \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key/1\",\n    \"\
          signatureValue\": \"IOmA4R7TfhkYTYW8...CBMq2/gi25s=\"\n  }\n}\n\n\n\n\n\
          Example Guardian-Managed DDO\n\nFollowing is a second example of a DDO that\
          \ describes the DID above. In\nthis case the DDO describes a dependent\u2014\
          an entity who is not currently\nin a position to control the private keys\
          \ for this identity. This DDO\nwas created by a guardian\u2014a separate\
          \ identity owner with its own DID\nthat serves as a trustee for the dependent.\
          \ Note that while this DDO\nasserts a set of service endpoints, it does\
          \ not yet contain a set of key\ndescriptions because the dependent does\
          \ not yet have its own set of\nprivate keys.\n\n\n{\n\"@context\": \"https://example.org/did/v1\"\
          ,\n  \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n  \"guardian\": \"\
          did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n  \"control\": [ \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \ ],\n  \"service\": {\n    \"openid\": \"https://openid.example.com/456\"\
          ,\n    \"xdi\": \"https://xdi.example.com/123\"\n  },\n  \"type\": \"http://schema.org/Person\"\
          ,\n  \"created\": \"2002-10-10T17:00:00Z\",\n  \"updated\": \"2016-10-17T02:41:00Z\"\
          ,\n  \"signature\": {\n    \"type\": \"RsaSignature2016\",\n    \"created\"\
          : \"2016-02-08T16:02:20Z\",\n    \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key-1\"\
          ,\n    \"signatureValue\": \"IOmA4R7Tf...3CBMq2/gi25s=\"\n  }\n}\n\n\n\n\
          \n\n"
  Example Guardian-Managed DDO:
    count: 2
    mappings:
      4aa7dd90fdfa217e93ab12667170ad3ffc179ab272c56782cb96a293fdcd972b:
      - major: '4'
        minor: '2'
        term: '4.2'
        title: Example Guardian-Managed DDO
        txt: "\nExample Guardian-Managed DDO\n\nFollowing is a second example of a\
          \ DDO that describes the DID above. In\nthis case the DDO describes a dependent\u2014\
          an entity who is not currently\nin a position to control the private keys\
          \ for this identity. This DDO\nwas created by a guardian\u2014a separate\
          \ identity owner with its own DID\nthat serves as a trustee for the dependent.\
          \ Note that while this DDO\nasserts a set of service endpoints, it does\
          \ not yet contain a set of key\ndescriptions because the dependent does\
          \ not yet have its own set of\nprivate keys.\n\n\n      {\n      \"@context\"\
          : \"https://example.org/did/v1\",\n        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n        \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n      \
          \  \"control\": [ \"did:example:8uQhQMGzWxR8vw5P3UWH1j\" ],\n        \"\
          service\": {\n            \"openid\": \"https://openid.example.com/456\"\
          ,\n            \"xdi\": \"https://xdi.example.com/123\"\n        },\n  \
          \      \"type\": \"http://schema.org/Person\",\n        \"created\": \"\
          2002-10-10T17:00:00Z\",\n        \"updated\": \"2016-10-17T02:41:00Z\",\n\
          \        \"signature\": {\n            \"type\": \"RsaSignature2016\",\n\
          \            \"created\": \"2016-02-08T16:02:20Z\",\n            \"creator\"\
          : \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key-1\",\n            \"signatureValue\"\
          : \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }\n      }\n\n\n\n\n\n"
      bdb76132e772be706f1c9bfa00c00f49a4348a9130d0929d493936fc318a12e6:
      - major: '4'
        minor: '2'
        term: '4.2'
        title: Example Guardian-Managed DDO
        txt: "\nExample Guardian-Managed DDO\n\nFollowing is a second example of a\
          \ DDO that describes the DID above. In\nthis case the DDO describes a dependent\u2014\
          an entity who is not currently\nin a position to control the private keys\
          \ for this identity. This DDO\nwas created by a guardian\u2014a separate\
          \ identity owner with its own DID\nthat serves as a trustee for the dependent.\
          \ Note that while this DDO\nasserts a set of service endpoints, it does\
          \ not yet contain a set of key\ndescriptions because the dependent does\
          \ not yet have its own set of\nprivate keys.\n\n\n{\n\"@context\": \"https://example.org/did/v1\"\
          ,\n  \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n  \"guardian\": \"\
          did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n  \"control\": [ \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \ ],\n  \"service\": {\n    \"openid\": \"https://openid.example.com/456\"\
          ,\n    \"xdi\": \"https://xdi.example.com/123\"\n  },\n  \"type\": \"http://schema.org/Person\"\
          ,\n  \"created\": \"2002-10-10T17:00:00Z\",\n  \"updated\": \"2016-10-17T02:41:00Z\"\
          ,\n  \"signature\": {\n    \"type\": \"RsaSignature2016\",\n    \"created\"\
          : \"2016-02-08T16:02:20Z\",\n    \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key-1\"\
          ,\n    \"signatureValue\": \"IOmA4R7Tf...3CBMq2/gi25s=\"\n  }\n}\n\n\n\n\
          \n"
      - major: '4'
        minor: '2'
        term: '4.2'
        title: Example Guardian-Managed DDO
        txt: "\nExample Guardian-Managed DDO\n\nFollowing is a second example of a\
          \ DDO that describes the DID above. In\nthis case the DDO describes a dependent\u2014\
          an entity who is not currently\nin a position to control the private keys\
          \ for this identity. This DDO\nwas created by a guardian\u2014a separate\
          \ identity owner with its own DID\nthat serves as a trustee for the dependent.\
          \ Note that while this DDO\nasserts a set of service endpoints, it does\
          \ not yet contain a set of key\ndescriptions because the dependent does\
          \ not yet have its own set of\nprivate keys.\n\n\n{\n\"@context\": \"https://example.org/did/v1\"\
          ,\n  \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n  \"guardian\": \"\
          did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n  \"control\": [ \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \ ],\n  \"service\": {\n    \"openid\": \"https://openid.example.com/456\"\
          ,\n    \"xdi\": \"https://xdi.example.com/123\"\n  },\n  \"type\": \"http://schema.org/Person\"\
          ,\n  \"created\": \"2002-10-10T17:00:00Z\",\n  \"updated\": \"2016-10-17T02:41:00Z\"\
          ,\n  \"signature\": {\n    \"type\": \"RsaSignature2016\",\n    \"created\"\
          : \"2016-02-08T16:02:20Z\",\n    \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key-1\"\
          ,\n    \"signatureValue\": \"IOmA4R7Tf...3CBMq2/gi25s=\"\n  }\n}\n\n\n\n\
          \n"
  Example Owner-Managed DDO:
    count: 2
    mappings:
      a34db19d5bb433405c2493a864c619106460d68022647e25c5667019e28eca17:
      - major: '4'
        minor: '1'
        term: '4.1'
        title: Example Owner-Managed DDO
        txt: "\nExample Owner-Managed DDO\n\nFollowing is an example of a DDO that\
          \ describes the DID above. This\nexample assumes that the identity owner\u2014\
          the entity that controls the\nprivate keys for this identity\u2014is authoritative\
          \ for the DDO. See section\n2.2 for an example of a DDO created by a guardian.\
          \ For the authoritative\nJSON-LD context definition, see Appendix B (the\
          \ URL for the @context\nproperty below is just for illustration).\n\n\n\
          {\n  \"@context\": \"https://example.org/did/v1\",\n  \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n  \"owner\": [{\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-1\"\
          ,\n    \"type\": [\"CryptographicKey\", \"EdDsaPublicKey\"],\n    \"curve\"\
          : \"ed25519\",\n    \"expires\": \"2017-02-08T16:02:20Z\",\n    \"publicKeyBase64\"\
          : \"lji9qTtkCydxtez/bt1zdLxVMMbz4SzWvlqgOBmURoM=\"\n  }, {\n    \"id\":\
          \ \"did:example:21tDAKCERh95uGgKbJNHYp#key-2\",\n    \"type\": [\"CryptographicKey\"\
          , \"RsaPublicKey\"],\n    \"expires\": \"2017-03-22T00:00:00Z\",\n    \"\
          publicKeyPem\": \"----BEGIN PUBLIC KEY-----\\r\\nMIIB..\n      ... sGbFmgQaRyV\\\
          r\\n-----END PUBLIC KEY-----\"\n  }],\n  \"control\": [{\n    \"type\":\
          \ \"OrControl\",\n    \"signer\": [\n        \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n        \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n    ]\n  }],\n  \"service\"\
          : {\n    \"openid\": \"https://openid.example.com/456\",\n    \"xdi\": \"\
          https://xdi.example.com/123\"\n  },\n  \"created\": \"2002-10-10T17:00:00Z\"\
          ,\n  \"updated\": \"2016-10-17T02:41:00Z\",\n  \"signature\": {\n    \"\
          type\": \"RsaSignature2016\",\n    \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n    \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key/1\",\n    \"\
          signatureValue\": \"IOmA4R7TfhkYTYW8...CBMq2/gi25s=\"\n  }\n}\n\n\n\n"
      - major: '4'
        minor: '1'
        term: '4.1'
        title: Example Owner-Managed DDO
        txt: "\nExample Owner-Managed DDO\n\nFollowing is an example of a DDO that\
          \ describes the DID above. This\nexample assumes that the identity owner\u2014\
          the entity that controls the\nprivate keys for this identity\u2014is authoritative\
          \ for the DDO. See section\n2.2 for an example of a DDO created by a guardian.\
          \ For the authoritative\nJSON-LD context definition, see Appendix B (the\
          \ URL for the @context\nproperty below is just for illustration).\n\n\n\
          {\n  \"@context\": \"https://example.org/did/v1\",\n  \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n  \"owner\": [{\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-1\"\
          ,\n    \"type\": [\"CryptographicKey\", \"EdDsaPublicKey\"],\n    \"curve\"\
          : \"ed25519\",\n    \"expires\": \"2017-02-08T16:02:20Z\",\n    \"publicKeyBase64\"\
          : \"lji9qTtkCydxtez/bt1zdLxVMMbz4SzWvlqgOBmURoM=\"\n  }, {\n    \"id\":\
          \ \"did:example:21tDAKCERh95uGgKbJNHYp#key-2\",\n    \"type\": [\"CryptographicKey\"\
          , \"RsaPublicKey\"],\n    \"expires\": \"2017-03-22T00:00:00Z\",\n    \"\
          publicKeyPem\": \"----BEGIN PUBLIC KEY-----\\r\\nMIIB..\n      ... sGbFmgQaRyV\\\
          r\\n-----END PUBLIC KEY-----\"\n  }],\n  \"control\": [{\n    \"type\":\
          \ \"OrControl\",\n    \"signer\": [\n        \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          ,\n        \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n    ]\n  }],\n  \"service\"\
          : {\n    \"openid\": \"https://openid.example.com/456\",\n    \"xdi\": \"\
          https://xdi.example.com/123\"\n  },\n  \"created\": \"2002-10-10T17:00:00Z\"\
          ,\n  \"updated\": \"2016-10-17T02:41:00Z\",\n  \"signature\": {\n    \"\
          type\": \"RsaSignature2016\",\n    \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n    \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key/1\",\n    \"\
          signatureValue\": \"IOmA4R7TfhkYTYW8...CBMq2/gi25s=\"\n  }\n}\n\n\n\n"
      a4c93da138ab8f8b2ee38ea827410c781108f4b8f93a80253aa5185534c30cae:
      - major: '4'
        minor: '1'
        term: '4.1'
        title: Example Owner-Managed DDO
        txt: "\nExample Owner-Managed DDO\n\nFollowing is an example of a DDO that\
          \ describes the DID above. This\nexample assumes that the identity owner\u2014\
          the entity that controls the\nprivate keys for this identity\u2014is authoritative\
          \ for the DDO. See section\n2.2 for an example of a DDO created by a guardian.\
          \ For the authoritative\nJSON-LD context definition, see Appendix B (the\
          \ URL for the @context\nproperty below is just for illustration).\n\n\n\
          \      {\n      \"@context\": \"https://example.org/did/v1\",\n        \"\
          id\": \"did:example:21tDAKCERh95uGgKbJNHYp\",\n        \"owner\": [{\n \
          \           \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-1\",\n    \
          \        \"type\": [\"CryptographicKey\", \"EdDsaPublicKey\"],\n       \
          \     \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"lji9qTtkCydxtez/bt1zdLxVMMbz4SzWvlqgOBmURoM=\"\
          \n        }, {\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key-2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyPem\"\
          : \"----BEGIN PUBLIC KEY-----\\r\\nMIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\\\
          r\\n-----END PUBLIC KEY-----\"\n        }],\n        \"control\": [{\n \
          \           \"type\": \"OrControl\",\n            \"signer\": [\n      \
          \          \"did:example:21tDAKCERh95uGgKbJNHYp\",\n                \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n            ]\n        }],\n        \"service\": {\n            \"openid\"\
          : \"https://openid.example.com/456\",\n            \"xdi\": \"https://xdi.example.com/123\"\
          \n        },\n        \"created\": \"2002-10-10T17:00:00Z\",\n        \"\
          updated\": \"2016-10-17T02:41:00Z\",\n        \"signature\": {\n       \
          \     \"type\": \"RsaSignature2016\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j#key/1\"\
          ,\n            \"signatureValue\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }\n      }\n\n\n\n"
  Future Work:
    count: 2
    mappings:
      325fc5d6b9579e24c5bf28dfa2a9ee38d05cc0e26310ebb006923acc485b9fc5:
      - major: '13'
        minor: '0'
        term: '13.0'
        title: Future Work
        txt: "\nFuture Work\n\nUpper Limits on DID Character Length\n\n\n    \n  \
          \    The current specification does not take a position on maximum length\
          \ of a DID. The maximum interoperable URL length is currently about 2K characters.\
          \ QR codes can handle about 4K characters. Clients using DIDs will be responsible\
          \ for storing many DIDs, and some methods would be able to externalize some\
          \ of their costs onto clients by relying on more complicated signature schemes\
          \ or by adding state into DIDs intended for temporary use. A future version\
          \ of this specification should set reasonable limits on DID character length\
          \ to minimize externalities.\n\n\n\n\n\n\nEquivalence\n\n\n    \n      Including\
          \ an equivalence property, such as equivID, in DDOs whose value is an array\
          \ of DIDs would allow identity owners to assert two or more DIDs that represent\
          \ the same identity owner. This capability has numerous uses, including\
          \ supporting migration between ledgers and providing forward compatibility\
          \ of existing DIDs to future DLTs. In theory, equivalent DIDs should have\
          \ the same identity rights, allowing\n        verifiable claims\n      \
          \ made against one DID to apply to equivalent DIDs.\n\n    \n      Equivalence\
          \ was not included in the current specification due to the complexity of\
          \ verifying equivalence across different DLTs and different DID methods,\
          \ and also of aggregating properties of equivalent DDOs. However equivalence\
          \ should be supported in a future version of this specification.\n\n\n\n\
          \n\n\nTimestamps\n\n\n    \n      Verifiable timestamps have significant\
          \ utility for identity records. This is a good fit for DLTs, since most\
          \ offer some type of timestamp mechanism. Despite some transactional cost,\
          \ they are the most censorship-resistant transaction ordering systems in\
          \ the world, so they are nearly ideal for DDO timestamping. In some cases\
          \ a DLT's immediate timing is approximate, however their sense of\n    \
          \    \"median time past\" (see Bitcoin BIP 113)\n       can be precisely\
          \ defined.\n\n    \n      A generic DDO timestamping mechanism could would\
          \ work across all DLTs and might operate via a mechanism including either\
          \ individual transactions or transaction batches. The generic mechanism\
          \ was deemed out of scope for this version, although it may be included\
          \ in a future version of this specification.\n\n\n\n\n\n\nTime Locks and\
          \ DDO Recovery\n\n\n    \n      Section 9.7 mentions one possible clever\
          \ use of time locks to recover control of a DID after a key compromise.\
          \ The technique relies on an ability to override the most recent update\
          \ to a DDO with Proof of Control applied by an earlier version of the DDO\
          \ in order to defeat the attacker. This protection depends on adding a\n\
          \        time lock (see Bitcoin BIP 65)\n       to protect part of the transaction\
          \ chain, enabling a Proof of Control block to be used to recover control.\
          \ We plan to add support for time locks in a future version of this specification.\n\
          \n\n\n\n\n\nSmart Signatures\n\n\n    \n      Not all DLTs can support the\
          \ Proof of Control logic in section 6.5. Therefore, in this version of the\
          \ specification, all Proof of Control logic must be delegated to DID method\
          \ specifications. A potential future solution is a\n        Smart Signature\n\
          \       specification that specifies the code any conformant DLT may implement\
          \ to process signature control logic.\n\n\n\n\n\n\nVerifiable Claims\n\n\
          \n    \n      Although DIDs and DDOs form a foundation for decentralized\
          \ identity, they are only the first step in describing an identity owner.\
          \ The rest of the descriptive power comes through collecting and selectively\
          \ using\n        verifiable claims\n      . Future versions of the specification\
          \ will describe in more detail how DIDs and DDO can be integrated with\u2014\
          and help enable\u2014the verifiable claims ecosystem.\n\n\n\n\n\n\nAlternate\
          \ Serializations and Graph Models\n\n\n    \n      This version of the specification\
          \ relies on JSON-LD and the RDF graph model for expressing a DDO. Future\
          \ versions of this specification MAY specify other semantic graph formats\
          \ for a DDO, such as JXD (JSON XDI Data), a serialization format for the\
          \ XDI graph model as defined by the\n        OASIS XDI Core 1.0 specification\n\
          \      .\n\n\n\n\n\n\n"
      a77ff2e9e8e106c8f251452aa97509c86d25a1e7d631ada777a92a4f64c9ad5b:
      - major: '13'
        minor: '0'
        term: '13.0'
        title: Future Work
        txt: "\nFuture Work\n\nUpper Limits on DID Character Length\n\n\n    \n  \
          \    The current specification does not take a position on maximum length\
          \ of a DID. The maximum interoperable URL length is currently about 2K characters.\
          \ QR codes can handle about 4K characters. Clients using DIDs will be responsible\
          \ for storing many DIDs, and some methods would be able to externalize some\
          \ of their costs onto clients by relying on more complicated signature schemes\
          \ or by adding state into DIDs intended for temporary use. A future version\
          \ of this specification should set reasonable limits on DID character length\
          \ to minimize externalities.\n\n\n\n\n\n\nEquivalence\n\n\n    \n      Including\
          \ an equivalence property, such as equivID, in DDOs whose value is an array\
          \ of DIDs would allow identity owners to assert two or more DIDs that represent\
          \ the same identity owner. This capability has numerous uses, including\
          \ supporting migration between ledgers and providing forward compatibility\
          \ of existing DIDs to future DLTs. In theory, equivalent DIDs should have\
          \ the same identity rights, allowing\n        verifiable claims\n      \
          \ made against one DID to apply to equivalent DIDs.\n\n    \n      Equivalence\
          \ was not included in the current specification due to the complexity of\
          \ verifying equivalence across different DLTs and different DID methods,\
          \ and also of aggregating properties of equivalent DDOs. However equivalence\
          \ should be supported in a future version of this specification.\n\n\n\n\
          \n\n\nTimestamps\n\n\n    \n      Verifiable timestamps have significant\
          \ utility for identity records. This is a good fit for DLTs, since most\
          \ offer some type of timestamp mechanism. Despite some transactional cost,\
          \ they are the most censorship-resistant transaction ordering systems in\
          \ the world, so they are nearly ideal for DDO timestamping. In some cases\
          \ a DLT's immediate timing is approximate, however their sense of\n    \
          \    \"median time past\" (see Bitcoin BIP 113)\n       can be precisely\
          \ defined.\n\n    \n      A generic DDO timestamping mechanism could would\
          \ work across all DLTs and might operate via a mechanism including either\
          \ individual transactions or transaction batches. The generic mechanism\
          \ was deemed out of scope for this version, although it may be included\
          \ in a future version of this specification.\n\n\n\n\n\n\nTime Locks and\
          \ DDO Recovery\n\n\n    \n      Section 9.7 mentions one possible clever\
          \ use of time locks to recover control of a DID after a key compromise.\
          \ The technique relies on an ability to override the most recent update\
          \ to a DDO with Proof of Control applied by an earlier version of the DDO\
          \ in order to defeat the attacker. This protection depends on adding a\n\
          \        time lock (see Bitcoin BIP 65)\n       to protect part of the transaction\
          \ chain, enabling a Proof of Control block to be used to recover control.\
          \ We plan to add support for time locks in a future version of this specification.\n\
          \n\n\n\n\n\nSmart Signatures\n\n\n    \n      Not all DLTs can support the\
          \ Proof of Control logic in section 6.5. Therefore, in this version of the\
          \ specification, all Proof of Control logic must be delegated to DID method\
          \ specifications. A potential future solution is a\n        Smart Signature\n\
          \       specification that specifies the code any conformant DLT may implement\
          \ to process signature control logic.\n\n\n\n\n\n\nVerifiable Claims\n\n\
          \n      Although DIDs and DDOs form a foundation for decentralized identity,\
          \ they are only the first step in describing an identity owner. The rest\
          \ of the descriptive power comes through collecting and selectively using\n\
          \        verifiable claims\n      . Future versions of the specification\
          \ will describe in more detail how DIDs and DDO can be integrated with\u2014\
          and help enable\u2014the verifiable claims ecosystem.\n\n\n\n\n\n\nAlternate\
          \ Serializations and Graph Models\n\n\n    \n      This version of the specification\
          \ relies on JSON-LD and the RDF graph model for expressing a DDO. Future\
          \ versions of this specification MAY specify other semantic graph formats\
          \ for a DDO, such as JXD (JSON XDI Data), a serialization format for the\
          \ XDI graph model as defined by the\n        OASIS XDI Core 1.0 specification\n\
          \      .\n\n\n\n\n\n\n"
      - major: '13'
        minor: '0'
        term: '13.0'
        title: Future Work
        txt: "\nFuture Work\n\nUpper Limits on DID Character Length\n\n\n    \n  \
          \    The current specification does not take a position on maximum length\
          \ of a DID. The maximum interoperable URL length is currently about 2K characters.\
          \ QR codes can handle about 4K characters. Clients using DIDs will be responsible\
          \ for storing many DIDs, and some methods would be able to externalize some\
          \ of their costs onto clients by relying on more complicated signature schemes\
          \ or by adding state into DIDs intended for temporary use. A future version\
          \ of this specification should set reasonable limits on DID character length\
          \ to minimize externalities.\n\n\n\n\n\n\nEquivalence\n\n\n    \n      Including\
          \ an equivalence property, such as equivID, in DDOs whose value is an array\
          \ of DIDs would allow identity owners to assert two or more DIDs that represent\
          \ the same identity owner. This capability has numerous uses, including\
          \ supporting migration between ledgers and providing forward compatibility\
          \ of existing DIDs to future DLTs. In theory, equivalent DIDs should have\
          \ the same identity rights, allowing\n        verifiable claims\n      \
          \ made against one DID to apply to equivalent DIDs.\n\n    \n      Equivalence\
          \ was not included in the current specification due to the complexity of\
          \ verifying equivalence across different DLTs and different DID methods,\
          \ and also of aggregating properties of equivalent DDOs. However equivalence\
          \ should be supported in a future version of this specification.\n\n\n\n\
          \n\n\nTimestamps\n\n\n    \n      Verifiable timestamps have significant\
          \ utility for identity records. This is a good fit for DLTs, since most\
          \ offer some type of timestamp mechanism. Despite some transactional cost,\
          \ they are the most censorship-resistant transaction ordering systems in\
          \ the world, so they are nearly ideal for DDO timestamping. In some cases\
          \ a DLT's immediate timing is approximate, however their sense of\n    \
          \    \"median time past\" (see Bitcoin BIP 113)\n       can be precisely\
          \ defined.\n\n    \n      A generic DDO timestamping mechanism could would\
          \ work across all DLTs and might operate via a mechanism including either\
          \ individual transactions or transaction batches. The generic mechanism\
          \ was deemed out of scope for this version, although it may be included\
          \ in a future version of this specification.\n\n\n\n\n\n\nTime Locks and\
          \ DDO Recovery\n\n\n    \n      Section 9.7 mentions one possible clever\
          \ use of time locks to recover control of a DID after a key compromise.\
          \ The technique relies on an ability to override the most recent update\
          \ to a DDO with Proof of Control applied by an earlier version of the DDO\
          \ in order to defeat the attacker. This protection depends on adding a\n\
          \        time lock (see Bitcoin BIP 65)\n       to protect part of the transaction\
          \ chain, enabling a Proof of Control block to be used to recover control.\
          \ We plan to add support for time locks in a future version of this specification.\n\
          \n\n\n\n\n\nSmart Signatures\n\n\n    \n      Not all DLTs can support the\
          \ Proof of Control logic in section 6.5. Therefore, in this version of the\
          \ specification, all Proof of Control logic must be delegated to DID method\
          \ specifications. A potential future solution is a\n        Smart Signature\n\
          \       specification that specifies the code any conformant DLT may implement\
          \ to process signature control logic.\n\n\n\n\n\n\nVerifiable Claims\n\n\
          \n      Although DIDs and DDOs form a foundation for decentralized identity,\
          \ they are only the first step in describing an identity owner. The rest\
          \ of the descriptive power comes through collecting and selectively using\n\
          \        verifiable claims\n      . Future versions of the specification\
          \ will describe in more detail how DIDs and DDO can be integrated with\u2014\
          and help enable\u2014the verifiable claims ecosystem.\n\n\n\n\n\n\nAlternate\
          \ Serializations and Graph Models\n\n\n    \n      This version of the specification\
          \ relies on JSON-LD and the RDF graph model for expressing a DDO. Future\
          \ versions of this specification MAY specify other semantic graph formats\
          \ for a DDO, such as JXD (JSON XDI Data), a serialization format for the\
          \ XDI graph model as defined by the\n        OASIS XDI Core 1.0 specification\n\
          \      .\n\n\n\n\n\n\n"
  Guardian (Required If No Proof of Ownership):
    count: 2
    mappings:
      08d5f2ee4ae8e42fa5405d52ca86966d75e58a9b9024fe48aef5136e9caf2e92:
      - major: '8'
        minor: '3'
        term: '8.3'
        title: Guardian (Required If No Proof of Ownership)
        txt: "\nGuardian (Required If No Proof of Ownership)\n\nA guardian is an identity\
          \ owner who creates and maintains an identity record\nfor a dependent who\
          \ is not in a position to hold or control the necessary\ncryptographic keys\
          \ (e.g., a parent creating an identity record for a child).\nIn this case,\
          \ there are no owner keys to represent the ultimate identity\nowner. So\
          \ the DDO needs to assert the identity of the guardian.\n\n\nThe rules for\
          \ a guardian are:\n\n\n\nA DDO that includes an owner (section 6.4) MAY\
          \ have a guardian.\n  \n\nA DDO that does not include an owner MUST have\
          \ a guardian.\n  \n\nThe key for this property MUST be guardian.\n  \n\n\
          The value of this key MUST be a valid DID.\n  \n\nThe guardian DID MUST\
          \ resolve to a DDO that has an owner property,\ni.e., the guardian relationships\
          \ must not be nested.\n  \n\n\nExample:\n\n\n{\n  \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n}\n\n\n"
      - major: '8'
        minor: '3'
        term: '8.3'
        title: Guardian (Required If No Proof of Ownership)
        txt: "\nGuardian (Required If No Proof of Ownership)\n\nA guardian is an identity\
          \ owner who creates and maintains an identity record\nfor a dependent who\
          \ is not in a position to hold or control the necessary\ncryptographic keys\
          \ (e.g., a parent creating an identity record for a child).\nIn this case,\
          \ there are no owner keys to represent the ultimate identity\nowner. So\
          \ the DDO needs to assert the identity of the guardian.\n\n\nThe rules for\
          \ a guardian are:\n\n\n\nA DDO that includes an owner (section 6.4) MAY\
          \ have a guardian.\n  \n\nA DDO that does not include an owner MUST have\
          \ a guardian.\n  \n\nThe key for this property MUST be guardian.\n  \n\n\
          The value of this key MUST be a valid DID.\n  \n\nThe guardian DID MUST\
          \ resolve to a DDO that has an owner property,\ni.e., the guardian relationships\
          \ must not be nested.\n  \n\n\nExample:\n\n\n{\n  \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n}\n\n\n"
      716ba298ed47a2c5529fc9580f5a1054707ba21932ccc32c7d52d26cb66743b4:
      - major: '8'
        minor: '3'
        term: '8.3'
        title: Guardian (Required If No Proof of Ownership)
        txt: "\nGuardian (Required If No Proof of Ownership)\n\n\n    \n      A guardian\
          \ is an identity owner who creates and maintains an identity record for\
          \ a dependent who is not in a position to hold or control the necessary\
          \ cryptographic keys (e.g., a parent creating an identity record for a child).\
          \ In this case, there are no owner keys to represent the ultimate identity\
          \ owner. So the DDO needs to assert the identity of the guardian.\n\n  \
          \  \n      The rules for a guardian are:\n\n\n\n\nA DDO that includes an\
          \ owner (section 6.4) MAY have a guardian.\n  \nA DDO that does not include\
          \ an owner MUST have a guardian.\n  \nThe key for this property MUST be\
          \ guardian.\n  \nThe value of this key MUST be a valid DID.\n  \nThe guardian\
          \ DID MUST resolve to a DDO that has an owner property,\ni.e., the guardian\
          \ relationships must not be nested.\n  \n\n\n\n    \n      Example:\n\n\n\
          \n\n\n      {\n      \"guardian\": \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n      }\n\n\n\n\n\n"
  Introduction:
    count: 2
    mappings:
      1e6a1a8cb11a25f4bdf2a011a8730dc05fb010b4def0a34c04a68543cac982e3:
      - major: '3'
        minor: '0'
        term: '3.0'
        title: Introduction
        txt: "\nIntroduction\n\nOverview\n\nConventional identity\nmanagement systems\
          \ are based on centralized authorities such as\ncorporate directory services\n\
          \  , certificate\nauthorities , or domain name\nregistries . From the standpoint\
          \ of cryptographic trust\nverification, each of these centralized authorities\
          \ serves as its own\n  root of trust .\nTo make identity management work\
          \ across these systems requires\nimplementing federated identity\nmanagement\
          \ .\n\n\nThe emergence of distributed ledger technology (DLT), sometimes\
          \ referred\nto as blockchain technology, provides the opportunity to implement\
          \ fully\ndecentralized identity management. In this ecosystem, all participants\n\
          with identities (called identity owners) share a common root of trust in\n\
          the form of a globally distributed ledger (or a decentralized P2P\nnetwork\
          \ that provides similar capabilities).\n\n\nEach identity owner can be identified\
          \ on a ledger with a key-value\npair . The index key is a DID (decentralized\
          \ identifier) and the\nvalue is its associated DDO (DID description object).\
          \ Together these\nform a DID record. Each DID record is cryptographically\
          \ secured by\nprivate keys under the control of an identity owner (in the\
          \ case of an\nowner-managed identity) or a guardian (in the case of a guardian-managed\n\
          identity). A corresponding public key is published in the DDO using a\n\
          key description. A DDO may also contain a set of service endpoints for\n\
          interacting with the identity owner. Following the dictums of Privacy by\
          \ Design\n  , each identity owner may have as many DID records as necessary,\
          \ to\nrespect the identity owner\u2019s desired separation of identities,\
          \ personas,\nand contexts.\n\n\nTo use a DID with a particular distributed\
          \ ledger or network requires\ndefining a DID method in a separate DID method\
          \ specification. A DID\nmethod specifies the set of rules for how a DID\
          \ is registered, resolved,\nupdated, and revoked on that specific ledger\
          \ or network.\n\n\nThis design eliminates dependence on centralized registries\
          \ for\nidentifiers as well as centralized certificate authorities for key\n\
          management\u2014the standard pattern in hierarchical PKI (public\nkey infrastructure\
          \ ). Because DID records are on a distributed\nledger, each identity owner\
          \ may serve as its own root authority\u2014an\narchitecture referred to\
          \ as \nDPKI (decentralized PKI) .\n\n\nNote that DID methods may also be\
          \ developed for identities registered in\nfederated identity management\
          \ systems. For their part, federated\nidentity systems may add support for\
          \ DIDs. This creates an\ninteroperability bridge between the worlds of centralized,\
          \ federated,\nand decentralized identity.\n\n\n\nURIs, URLs, and URNs\n\n\
          DIDs have a foundation in URIs, so it's important to understand how the\n\
          W3C clarified\n  \_the terms URI (Uniform Resource Identifier), URL (Uniform\
          \ Resource\nLocator), and URN (Uniform Resource Name) in September 2001.\
          \ The key\ndifference between these three categories of identifiers are:\n\
          \n\nURI is the term for any type of identifier used to identify a\nresource\
          \ on the Web.\n  \nURL is the term for any type of URI that can be resolved\
          \ or\nde-referenced to locate a representation of a resource on the Web\
          \ (e.g.,\nWeb page, file, image, etc.)\n  \nURN is the term for a specific\
          \ type of URI intended to persistently\nidentify a resource, i.e., an identifier\
          \ that will never change no\nmatter how often the resource moves, changes\
          \ names, changes owners, etc.\nURNs are intended to last forever.\n  \n\n\
          \n\nMotivations for DIDs\n\nThe growing need for decentralized identity\
          \ has produced three specific\nrequirements for a new type of URI that still\
          \ fits within URI/URL/URN\narchitecture but in a less than traditional way:\n\
          \n\nA URI that is persistent like a URN yet can be resolved or\nde-referenced\
          \ to locate a resource like a URL. In essence, a DID is a\nURI that serves\
          \ both functions.\n  \nA URI that does not require a centralized authority\
          \ to register,\nresolve, update, or revoke. The overwhelming majority of\
          \ URIs today are\nbased on DNS names or IP addresses that depend on centralized\n\
          authorities for registration and ultimate control. DIDs can be created\n\
          and managed without any such authority.\n  \nA URI whose ownership and associated\
          \ metadata, including public\nkeys, can be cryptographically verified. Control\
          \ of DIDs and DDOs\nleverages the same public/private key cryptography as\
          \ distributed\nledgers.\n  \n\n\n\nThe Role of Human-Friendly Identifiers\n\
          \nDIDs achieve global uniqueness without the need for a central\nregistration\
          \ authority. This comes, however, at the cost of human\nmemorability. The\
          \ algorithms capable of generating globally unique\nidentifiers automatically\
          \ produce random strings of characters that have\nno human meaning. This\
          \ demonstrates the axiom about identifiers known as\n  Zooko\u2019s\nTriangle\
          \ : \"human-meaningful, decentralized, secure\u2014pick any two\".\n\n\n\
          There are of course many use cases where it is desirable to discover a\n\
          DID when starting from a human-friendly identifier\u2014a natural language\n\
          name, a domain name, or a conventional address for a DID owner such as a\n\
          mobile telephone number, email address, Twitter handle, or blog URL.\nHowever,\
          \ the problem of mapping human-friendly identifiers to DIDs (and\ndoing\
          \ so in a way that can be verified and trusted) is out-of-scope for\nthis\
          \ specification.\n\n\nSolutions to this problem (and there are many) should\
          \ be defined in\nseparate specifications that reference this specification.\
          \ It is\nstrongly recommended that such specifications carefully consider:\
          \ (a)\nthe numerous security attacks based on deceiving users about the\
          \ true\nhuman-friendly identifier for a target entity, and (b) the privacy\n\
          consequences of using human-friendly identifiers that are inherently\ncorrelatable,\
          \ especially if they are globally unique.\n\n\n\nPurpose of This Specification\n\
          \nThe first purpose of this specification is to define the generic DID\n\
          scheme and a generic set of operations on DID records that can be\nimplemented\
          \ for any distributed ledger or network capable of accepting\nDID records.\
          \ The second purpose of this specification to define the\nconformance requirements\
          \ for a DID method specification\u2014a separate\nspecification that defines\
          \ a specific DID scheme and specific set of DID\nrecord operations for a\
          \ specific distributed ledger or network.\n\n\nConceptually, the relationship\
          \ of this specification and a DID method\nspecification is similar to the\
          \ relationship of the IETF generic URI\nspecification ( RFC\n3986 ) and\
          \ a specific URI\nscheme \_(such as the http: and https: schemes specified\
          \ in RFC 7230 ). It is also similar to\nthe relationship of the IETF generic\
          \ URN specification ( RFC 2141 ) and a specific URN\nnamespace definition\
          \ (such as the UUID URN namespace defined in RFC 4122 ). The difference\
          \ is\nthat a DID method specification, in addition to defining a specific\
          \ DID\nscheme, must also specify the methods for reading, writing, and revoking\n\
          DID records on the network for which it is written.\n\n\nFor a list of DID\
          \ method specifications, see Appendix A.\n\n\n\n"
      b0af15e9f96cce1caabf024861098467f4a592b5768ffb391c8ad775f8d0d61b:
      - major: '3'
        minor: '0'
        term: '3.0'
        title: Introduction
        txt: "\nIntroduction\n\nOverview\n\nConventional identity\nmanagement systems\
          \ are based on centralized authorities such as\ncorporate directory services\n\
          \  , certificate\nauthorities , or domain name\nregistries . From the standpoint\
          \ of cryptographic trust\nverification, each of these centralized authorities\
          \ serves as its own\n  root of trust .\nTo make identity management work\
          \ across these systems requires\nimplementing federated identity\nmanagement\
          \ .\n\n\nThe emergence of distributed ledger technology (DLT), sometimes\
          \ referred\nto as blockchain technology, provides the opportunity to implement\
          \ fully\ndecentralized identity management. In this ecosystem, all participants\n\
          with identities (called identity owners) share a common root of trust in\n\
          the form of a globally distributed ledger (or a decentralized P2P\nnetwork\
          \ that provides similar capabilities).\n\n\nEach identity owner can be identified\
          \ on a ledger with a key-value\npair . The index key is a DID (decentralized\
          \ identifier) and the\nvalue is its associated DDO (DID description object).\
          \ Together these\nform a DID record. Each DID record is cryptographically\
          \ secured by\nprivate keys under the control of an identity owner (in the\
          \ case of an\nowner-managed identity) or a guardian (in the case of a guardian-managed\n\
          identity). A corresponding public key is published in the DDO using a\n\
          key description. A DDO may also contain a set of service endpoints for\n\
          interacting with the identity owner. Following the dictums of Privacy by\
          \ Design\n  , each identity owner may have as many DID records as necessary,\
          \ to\nrespect the identity owner\u2019s desired separation of identities,\
          \ personas,\nand contexts.\n\n\nTo use a DID with a particular distributed\
          \ ledger or network requires\ndefining a DID method in a separate DID method\
          \ specification. A DID\nmethod specifies the set of rules for how a DID\
          \ is registered, resolved,\nupdated, and revoked on that specific ledger\
          \ or network.\n\n\nThis design eliminates dependence on centralized registries\
          \ for\nidentifiers as well as centralized certificate authorities for key\n\
          management\u2014the standard pattern in hierarchical PKI (public\nkey infrastructure\
          \ ). Because DID records are on a distributed\nledger, each identity owner\
          \ may serve as its own root authority\u2014an\narchitecture referred to\
          \ as \nDPKI (decentralized PKI) .\n\n\nNote that DID methods may also be\
          \ developed for identities registered in\nfederated identity management\
          \ systems. For their part, federated\nidentity systems may add support for\
          \ DIDs. This creates an\ninteroperability bridge between the worlds of centralized,\
          \ federated,\nand decentralized identity.\n\n\n\nURIs, URLs, and URNs\n\n\
          DIDs have a foundation in URIs, so it's important to understand how the\n\
          W3C clarified\n  the terms URI (Uniform Resource Identifier), URL (Uniform\
          \ Resource\nLocator), and URN (Uniform Resource Name) in September 2001.\
          \ The key\ndifference between these three categories of identifiers are:\n\
          \n\n\nURI is the term for any type of identifier used to identify a\nresource\
          \ on the Web.\n  \n\nURL is the term for any type of URI that can be resolved\
          \ or\nde-referenced to locate a representation of a resource on the Web\
          \ (e.g.,\nWeb page, file, image, etc.)\n  \n\nURN is the term for a specific\
          \ type of URI intended to persistently\nidentify a resource, i.e., an identifier\
          \ that will never change no\nmatter how often the resource moves, changes\
          \ names, changes owners, etc.\nURNs are intended to last forever.\n  \n\n\
          \n\nMotivations for DIDs\n\nThe growing need for decentralized identity\
          \ has produced three specific\nrequirements for a new type of URI that still\
          \ fits within URI/URL/URN\narchitecture but in a less than traditional way:\n\
          \n\n\nA URI that is persistent like a URN yet can be resolved or\nde-referenced\
          \ to locate a resource like a URL. In essence, a DID is a\nURI that serves\
          \ both functions.\n  \n\nA URI that does not require a centralized authority\
          \ to register,\nresolve, update, or revoke. The overwhelming majority of\
          \ URIs today are\nbased on DNS names or IP addresses that depend on centralized\n\
          authorities for registration and ultimate control. DIDs can be created\n\
          and managed without any such authority.\n  \n\nA URI whose ownership and\
          \ associated metadata, including public\nkeys, can be cryptographically\
          \ verified. Control of DIDs and DDOs\nleverages the same public/private\
          \ key cryptography as distributed\nledgers.\n  \n\n\n\nThe Role of Human-Friendly\
          \ Identifiers\n\nDIDs achieve global uniqueness without the need for a central\n\
          registration authority. This comes, however, at the cost of human\nmemorability.\
          \ The algorithms capable of generating globally unique\nidentifiers automatically\
          \ produce random strings of characters that have\nno human meaning. This\
          \ demonstrates the axiom about identifiers known as\n  Zooko\u2019s\nTriangle\
          \ : \"human-meaningful, decentralized, secure\u2014pick any two\".\n\n\n\
          There are of course many use cases where it is desirable to discover a\n\
          DID when starting from a human-friendly identifier\u2014a natural language\n\
          name, a domain name, or a conventional address for a DID owner such as a\n\
          mobile telephone number, email address, Twitter handle, or blog URL.\nHowever,\
          \ the problem of mapping human-friendly identifiers to DIDs (and\ndoing\
          \ so in a way that can be verified and trusted) is out-of-scope for\nthis\
          \ specification.\n\n\nSolutions to this problem (and there are many) should\
          \ be defined in\nseparate specifications that reference this specification.\
          \ It is\nstrongly recommended that such specifications carefully consider:\
          \ (a)\nthe numerous security attacks based on deceiving users about the\
          \ true\nhuman-friendly identifier for a target entity, and (b) the privacy\n\
          consequences of using human-friendly identifiers that are inherently\ncorrelatable,\
          \ especially if they are globally unique.\n\n\n\nPurpose of This Specification\n\
          \nThe first purpose of this specification is to define the generic DID\n\
          scheme and a generic set of operations on DID records that can be\nimplemented\
          \ for any distributed ledger or network capable of accepting\nDID records.\
          \ The second purpose of this specification to define the\nconformance requirements\
          \ for a DID method specification\u2014a separate\nspecification that defines\
          \ a specific DID scheme and specific set of DID\nrecord operations for a\
          \ specific distributed ledger or network.\n\n\nConceptually, the relationship\
          \ of this specification and a DID method\nspecification is similar to the\
          \ relationship of the IETF generic URI\nspecification ( RFC\n3986 ) and\
          \ a specific URI\nscheme (such as the http: and https: schemes specified\
          \ in RFC 7230 ). It is also similar to\nthe relationship of the IETF generic\
          \ URN specification ( RFC 2141 ) and a specific URN\nnamespace definition\
          \ (such as the UUID URN namespace defined in RFC 4122 ). The difference\
          \ is\nthat a DID method specification, in addition to defining a specific\
          \ DID\nscheme, must also specify the methods for reading, writing, and revoking\n\
          DID records on the network for which it is written.\n\n\nFor a list of DID\
          \ method specifications, see Appendix A.\n\n\n\n"
      - major: '3'
        minor: '0'
        term: '3.0'
        title: Introduction
        txt: "\nIntroduction\n\nOverview\n\nConventional identity\nmanagement systems\
          \ are based on centralized authorities such as\ncorporate directory services\n\
          \  , certificate\nauthorities , or domain name\nregistries . From the standpoint\
          \ of cryptographic trust\nverification, each of these centralized authorities\
          \ serves as its own\n  root of trust .\nTo make identity management work\
          \ across these systems requires\nimplementing federated identity\nmanagement\
          \ .\n\n\nThe emergence of distributed ledger technology (DLT), sometimes\
          \ referred\nto as blockchain technology, provides the opportunity to implement\
          \ fully\ndecentralized identity management. In this ecosystem, all participants\n\
          with identities (called identity owners) share a common root of trust in\n\
          the form of a globally distributed ledger (or a decentralized P2P\nnetwork\
          \ that provides similar capabilities).\n\n\nEach identity owner can be identified\
          \ on a ledger with a key-value\npair . The index key is a DID (decentralized\
          \ identifier) and the\nvalue is its associated DDO (DID description object).\
          \ Together these\nform a DID record. Each DID record is cryptographically\
          \ secured by\nprivate keys under the control of an identity owner (in the\
          \ case of an\nowner-managed identity) or a guardian (in the case of a guardian-managed\n\
          identity). A corresponding public key is published in the DDO using a\n\
          key description. A DDO may also contain a set of service endpoints for\n\
          interacting with the identity owner. Following the dictums of Privacy by\
          \ Design\n  , each identity owner may have as many DID records as necessary,\
          \ to\nrespect the identity owner\u2019s desired separation of identities,\
          \ personas,\nand contexts.\n\n\nTo use a DID with a particular distributed\
          \ ledger or network requires\ndefining a DID method in a separate DID method\
          \ specification. A DID\nmethod specifies the set of rules for how a DID\
          \ is registered, resolved,\nupdated, and revoked on that specific ledger\
          \ or network.\n\n\nThis design eliminates dependence on centralized registries\
          \ for\nidentifiers as well as centralized certificate authorities for key\n\
          management\u2014the standard pattern in hierarchical PKI (public\nkey infrastructure\
          \ ). Because DID records are on a distributed\nledger, each identity owner\
          \ may serve as its own root authority\u2014an\narchitecture referred to\
          \ as \nDPKI (decentralized PKI) .\n\n\nNote that DID methods may also be\
          \ developed for identities registered in\nfederated identity management\
          \ systems. For their part, federated\nidentity systems may add support for\
          \ DIDs. This creates an\ninteroperability bridge between the worlds of centralized,\
          \ federated,\nand decentralized identity.\n\n\n\nURIs, URLs, and URNs\n\n\
          DIDs have a foundation in URIs, so it's important to understand how the\n\
          W3C clarified\n  the terms URI (Uniform Resource Identifier), URL (Uniform\
          \ Resource\nLocator), and URN (Uniform Resource Name) in September 2001.\
          \ The key\ndifference between these three categories of identifiers are:\n\
          \n\n\nURI is the term for any type of identifier used to identify a\nresource\
          \ on the Web.\n  \n\nURL is the term for any type of URI that can be resolved\
          \ or\nde-referenced to locate a representation of a resource on the Web\
          \ (e.g.,\nWeb page, file, image, etc.)\n  \n\nURN is the term for a specific\
          \ type of URI intended to persistently\nidentify a resource, i.e., an identifier\
          \ that will never change no\nmatter how often the resource moves, changes\
          \ names, changes owners, etc.\nURNs are intended to last forever.\n  \n\n\
          \n\nMotivations for DIDs\n\nThe growing need for decentralized identity\
          \ has produced three specific\nrequirements for a new type of URI that still\
          \ fits within URI/URL/URN\narchitecture but in a less than traditional way:\n\
          \n\n\nA URI that is persistent like a URN yet can be resolved or\nde-referenced\
          \ to locate a resource like a URL. In essence, a DID is a\nURI that serves\
          \ both functions.\n  \n\nA URI that does not require a centralized authority\
          \ to register,\nresolve, update, or revoke. The overwhelming majority of\
          \ URIs today are\nbased on DNS names or IP addresses that depend on centralized\n\
          authorities for registration and ultimate control. DIDs can be created\n\
          and managed without any such authority.\n  \n\nA URI whose ownership and\
          \ associated metadata, including public\nkeys, can be cryptographically\
          \ verified. Control of DIDs and DDOs\nleverages the same public/private\
          \ key cryptography as distributed\nledgers.\n  \n\n\n\nThe Role of Human-Friendly\
          \ Identifiers\n\nDIDs achieve global uniqueness without the need for a central\n\
          registration authority. This comes, however, at the cost of human\nmemorability.\
          \ The algorithms capable of generating globally unique\nidentifiers automatically\
          \ produce random strings of characters that have\nno human meaning. This\
          \ demonstrates the axiom about identifiers known as\n  Zooko\u2019s\nTriangle\
          \ : \"human-meaningful, decentralized, secure\u2014pick any two\".\n\n\n\
          There are of course many use cases where it is desirable to discover a\n\
          DID when starting from a human-friendly identifier\u2014a natural language\n\
          name, a domain name, or a conventional address for a DID owner such as a\n\
          mobile telephone number, email address, Twitter handle, or blog URL.\nHowever,\
          \ the problem of mapping human-friendly identifiers to DIDs (and\ndoing\
          \ so in a way that can be verified and trusted) is out-of-scope for\nthis\
          \ specification.\n\n\nSolutions to this problem (and there are many) should\
          \ be defined in\nseparate specifications that reference this specification.\
          \ It is\nstrongly recommended that such specifications carefully consider:\
          \ (a)\nthe numerous security attacks based on deceiving users about the\
          \ true\nhuman-friendly identifier for a target entity, and (b) the privacy\n\
          consequences of using human-friendly identifiers that are inherently\ncorrelatable,\
          \ especially if they are globally unique.\n\n\n\nPurpose of This Specification\n\
          \nThe first purpose of this specification is to define the generic DID\n\
          scheme and a generic set of operations on DID records that can be\nimplemented\
          \ for any distributed ledger or network capable of accepting\nDID records.\
          \ The second purpose of this specification to define the\nconformance requirements\
          \ for a DID method specification\u2014a separate\nspecification that defines\
          \ a specific DID scheme and specific set of DID\nrecord operations for a\
          \ specific distributed ledger or network.\n\n\nConceptually, the relationship\
          \ of this specification and a DID method\nspecification is similar to the\
          \ relationship of the IETF generic URI\nspecification ( RFC\n3986 ) and\
          \ a specific URI\nscheme (such as the http: and https: schemes specified\
          \ in RFC 7230 ). It is also similar to\nthe relationship of the IETF generic\
          \ URN specification ( RFC 2141 ) and a specific URN\nnamespace definition\
          \ (such as the UUID URN namespace defined in RFC 4122 ). The difference\
          \ is\nthat a DID method specification, in addition to defining a specific\
          \ DID\nscheme, must also specify the methods for reading, writing, and revoking\n\
          DID records on the network for which it is written.\n\n\nFor a list of DID\
          \ method specifications, see Appendix A.\n\n\n\n"
  Motivations for DIDs:
    count: 2
    mappings:
      055b8eae04e8bed9dbf39f658bb41871e8658c2e24a115bed70dfd2bfa2a011d:
      - major: '3'
        minor: '3'
        term: '3.3'
        title: Motivations for DIDs
        txt: "\nMotivations for DIDs\n\nThe growing need for decentralized identity\
          \ has produced three specific\nrequirements for a new type of URI that still\
          \ fits within URI/URL/URN\narchitecture but in a less than traditional way:\n\
          \n\n\nA URI that is persistent like a URN yet can be resolved or\nde-referenced\
          \ to locate a resource like a URL. In essence, a DID is a\nURI that serves\
          \ both functions.\n  \n\nA URI that does not require a centralized authority\
          \ to register,\nresolve, update, or revoke. The overwhelming majority of\
          \ URIs today are\nbased on DNS names or IP addresses that depend on centralized\n\
          authorities for registration and ultimate control. DIDs can be created\n\
          and managed without any such authority.\n  \n\nA URI whose ownership and\
          \ associated metadata, including public\nkeys, can be cryptographically\
          \ verified. Control of DIDs and DDOs\nleverages the same public/private\
          \ key cryptography as distributed\nledgers.\n  \n\n\n"
      - major: '3'
        minor: '3'
        term: '3.3'
        title: Motivations for DIDs
        txt: "\nMotivations for DIDs\n\nThe growing need for decentralized identity\
          \ has produced three specific\nrequirements for a new type of URI that still\
          \ fits within URI/URL/URN\narchitecture but in a less than traditional way:\n\
          \n\n\nA URI that is persistent like a URN yet can be resolved or\nde-referenced\
          \ to locate a resource like a URL. In essence, a DID is a\nURI that serves\
          \ both functions.\n  \n\nA URI that does not require a centralized authority\
          \ to register,\nresolve, update, or revoke. The overwhelming majority of\
          \ URIs today are\nbased on DNS names or IP addresses that depend on centralized\n\
          authorities for registration and ultimate control. DIDs can be created\n\
          and managed without any such authority.\n  \n\nA URI whose ownership and\
          \ associated metadata, including public\nkeys, can be cryptographically\
          \ verified. Control of DIDs and DDOs\nleverages the same public/private\
          \ key cryptography as distributed\nledgers.\n  \n\n\n"
      1d470f6a6e5a0dff71ccaf935f5740392e06da15c84182f3524160e4f0478cbf:
      - major: '3'
        minor: '3'
        term: '3.3'
        title: Motivations for DIDs
        txt: "\nMotivations for DIDs\n\nThe growing need for decentralized identity\
          \ has produced three specific\nrequirements for a new type of URI that still\
          \ fits within URI/URL/URN\narchitecture but in a less than traditional way:\n\
          \n\nA URI that is persistent like a URN yet can be resolved or\nde-referenced\
          \ to locate a resource like a URL. In essence, a DID is a\nURI that serves\
          \ both functions.\n  \nA URI that does not require a centralized authority\
          \ to register,\nresolve, update, or revoke. The overwhelming majority of\
          \ URIs today are\nbased on DNS names or IP addresses that depend on centralized\n\
          authorities for registration and ultimate control. DIDs can be created\n\
          and managed without any such authority.\n  \nA URI whose ownership and associated\
          \ metadata, including public\nkeys, can be cryptographically verified. Control\
          \ of DIDs and DDOs\nleverages the same public/private key cryptography as\
          \ distributed\nledgers.\n  \n\n\n"
  Notification of DDO Changes:
    count: 2
    mappings:
      1ee05bbfabc5edd67a81cc8015f6cf0b948667cdc59da7c493edcde0f2be6d64:
      - major: '11'
        minor: '5'
        term: '11.5'
        title: Notification of DDO Changes
        txt: "\nNotification of DDO Changes\n\n\n    \n      One mitigation against\
          \ unauthorized changes to a DDO is monitoring and actively notifying the\
          \ identity owner when there are changes. This is analogous to helping prevent\
          \ account takeover on conventional username/password accounts by sending\
          \ password reset notifications to the email addresses on file.\n\n    \n\
          \      In the case of a DID, where there is no intermediary registrar or\
          \ account provider to generate the notification, the following approaches\
          \ are RECOMMENDED:\n\n\n\n\n\nSubscriptions. If the ledger or network on\
          \ which the DID is\nregistered directly supports change notifications, this\
          \ service can be\noffered to DID owners. Notifications may be sent directly\
          \ to the\nrelevant service endpoints listed in an existing DID.\n  \n\n\
          Self-monitoring. An identity owner may employ its own local or\nonline agent\
          \ to periodically monitor for changes to a DDO.\n  \n\nThird-party monitoring.\
          \ An identity owner may rely on a third party\nmonitoring service, however\
          \ this introduces another vector of attack.\n  \n\n\n\n\n\n\n\n"
      - major: '11'
        minor: '5'
        term: '11.5'
        title: Notification of DDO Changes
        txt: "\nNotification of DDO Changes\n\n\n    \n      One mitigation against\
          \ unauthorized changes to a DDO is monitoring and actively notifying the\
          \ identity owner when there are changes. This is analogous to helping prevent\
          \ account takeover on conventional username/password accounts by sending\
          \ password reset notifications to the email addresses on file.\n\n    \n\
          \      In the case of a DID, where there is no intermediary registrar or\
          \ account provider to generate the notification, the following approaches\
          \ are RECOMMENDED:\n\n\n\n\n\nSubscriptions. If the ledger or network on\
          \ which the DID is\nregistered directly supports change notifications, this\
          \ service can be\noffered to DID owners. Notifications may be sent directly\
          \ to the\nrelevant service endpoints listed in an existing DID.\n  \n\n\
          Self-monitoring. An identity owner may employ its own local or\nonline agent\
          \ to periodically monitor for changes to a DDO.\n  \n\nThird-party monitoring.\
          \ An identity owner may rely on a third party\nmonitoring service, however\
          \ this introduces another vector of attack.\n  \n\n\n\n\n\n\n\n"
      5167ba952e26f7d0629d4af87fc79d18c36f9947e22b3f456489a73603f9b05d:
      - major: '11'
        minor: '5'
        term: '11.5'
        title: Notification of DDO Changes
        txt: "\nNotification of DDO Changes\n\n\n    \n      One mitigation against\
          \ unauthorized changes to a DDO is monitoring and actively notifying the\
          \ identity owner when there are changes. This is analogous to helping prevent\
          \ account takeover on conventional username/password accounts by sending\
          \ password reset notifications to the email addresses on file.\n\n    \n\
          \      In the case of a DID, where there is no intermediary registrar or\
          \ account provider to generate the notification, the following approaches\
          \ are RECOMMENDED:\n\n\n\n\nSubscriptions. If the ledger or network on which\
          \ the DID is\nregistered directly supports change notifications, this service\
          \ can be\noffered to DID owners. Notifications may be sent directly to the\n\
          relevant service endpoints listed in an existing DID.\n  \nSelf-monitoring.\
          \ An identity owner may employ its own local or\nonline agent to periodically\
          \ monitor for changes to a DDO.\n  \nThird-party monitoring. An identity\
          \ owner may rely on a third party\nmonitoring service, however this introduces\
          \ another vector of attack.\n  \n\n\n\n\n\n\n\n"
  Primary DID (Required):
    count: 2
    mappings:
      008eb18122107111a0f1cdb7e6132d54926a1afd4a8f0c49a8da82024240d682:
      - major: '8'
        minor: '2'
        term: '8.2'
        title: Primary DID (Required)
        txt: "\nPrimary DID (Required)\n\nThe primary DID is the primary index key\
          \ for the DDO, i.e., it is DID\ndescribed by DDO. The rules for a primary\
          \ DID are:\n\n\n\nA DDO MUST have exactly one primary DID.\n  \n\nThe key\
          \ for this property MUST be id.\n  \n\nThe value of this key MUST be a valid\
          \ DID.\n  \n\nWhen this DDO is registered with the target distributed ledger\
          \ or\nnetwork, the registered DID MUST match this primary DID value.\n \
          \ \n\n\nExample:\n\n\n      {\n        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          \n      }\n\n\n\n\n\n"
      - major: '8'
        minor: '2'
        term: '8.2'
        title: Primary DID (Required)
        txt: "\nPrimary DID (Required)\n\nThe primary DID is the primary index key\
          \ for the DDO, i.e., it is DID\ndescribed by DDO. The rules for a primary\
          \ DID are:\n\n\n\nA DDO MUST have exactly one primary DID.\n  \n\nThe key\
          \ for this property MUST be id.\n  \n\nThe value of this key MUST be a valid\
          \ DID.\n  \n\nWhen this DDO is registered with the target distributed ledger\
          \ or\nnetwork, the registered DID MUST match this primary DID value.\n \
          \ \n\n\nExample:\n\n\n      {\n        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          \n      }\n\n\n\n\n\n"
      e954413e9e05177be6d5b9ed8a8b95ba08dff26362d82bbcad26a039b88c7bf2:
      - major: '8'
        minor: '2'
        term: '8.2'
        title: Primary DID (Required)
        txt: "\nPrimary DID (Required)\n\nThe primary DID is the primary index key\
          \ for the DDO, i.e., it is DID\ndescribed by DDO. The rules for a primary\
          \ DID are:\n\n\nA DDO MUST have exactly one primary DID.\n  \nThe key for\
          \ this property MUST be id.\n  \nThe value of this key MUST be a valid DID.\n\
          \  \nWhen this DDO is registered with the target distributed ledger or\n\
          network, the registered DID MUST match this primary DID value.\n  \n\n\n\
          Example:\n\n\n      {\n        \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp\"\
          \n      }\n\n\n\n\n\n"
  Privacy Considerations:
    count: 2
    mappings:
      4c03d28edb2ef7b8ef82e07a24410c63755cf5f4342abc0ab893565dc2c83f95:
      - major: '12'
        minor: '0'
        term: '12.0'
        title: Privacy Considerations
        txt: "\nPrivacy Considerations\n\n\n    \n      It is critically important\
          \ to apply the principles of Privacy by Design to all aspects of decentralized\
          \ identity architecture, because DIDs and DDOs are\u2014by design\u2014\
          administered directly by their owners. There is no registrar, hosting company,\
          \ or other intermediate service provider to recommend or apply additional\
          \ privacy safeguards.\n\n    \n      The authors of this specification have\
          \ applied all seven Privacy by Design principles throughout its development.\
          \ For example, privacy in this specification is preventative not remedial,\
          \ and privacy is an embedded default. Furthermore, decentralized identity\
          \ architecture by itself embodies principle #7, \"Respect for user privacy\u2014\
          keep it user-centric.\"\n\n    \n      This section lists additional privacy\
          \ considerations that implementers, guardians, and identity owners should\
          \ bear in mind.\n\n\n\n\n\nRequirements of DID Method Specifications\n\n\
          \n\n\n\n\nDID method specifications MUST include their own Privacy\nConsiderations\
          \ sections, if only to point to the general privacy\nconsiderations in this\
          \ section.\n  \n\nThe DID method privacy section MUST discuss any subsection\
          \ of\nsection 5 of RFC 6973t\n  that could apply in a method-specific manner.\
          \ The subsections to\nconsider are: surveillance, stored data compromise,\
          \ unsolicited traffic,\nmisattribution, correlation, identification, secondary\
          \ use, disclosure,\nexclusion.\n  \n\n\n\n\n\n\n\n\nKeep Personally-Identifiable\
          \ Information (PII) Off-Ledger\n\n\n    \n      If a DID method specification\
          \ is written for a public ledger or network where all DIDs and DDOs will\
          \ be publicly available, it is STRONGLY RECOMMENDED that DDOs contain no\
          \ PII. All PII should be kept off-ledger behind service endpoints under\
          \ the control of the identity owner. With this privacy architecture, PII\
          \ may be exchanged on a private, peer-to-peer basis using communications\
          \ channels identified and secured by key descriptions in DID records. This\
          \ also enables identity owners and relying parties to implement the\n  \
          \      GDPR\n\n        right to be forgotten\n      , as no PII will be\
          \ written to an immutable ledger.\n\n\n\n\n\n\nDID Correlation Risks and\
          \ Pseudonymous DIDs\n\n\n    \n      Like any type of globally unique identifier,\
          \ DIDs may be used for correlation. Identity owners can mitigate this privacy\
          \ risk by using pairwise unique DIDs, i.e., by sharing a different private\
          \ DID for every relationship. In effect, each DID acts as a pseudonym. A\
          \ pseudonymous DID need only be shared with more than one party when the\
          \ identity owner explicitly authorizes correlation between those parties.\n\
          \n    \n      If pseudonymous DIDs are the default, then the only need for\
          \ a public DID\u2014a DID published openly or shared with a large number\
          \ of parties\u2014is when the identity owner explicitly desires public identification.\n\
          \n\n\n\n\n\nDDO Correlation Risks\n\n\n    \n      The anti-correlation\
          \ protections of pseudonymous DIDs are easily defeated if the data in the\
          \ corresponding DDOs can be correlated. For example, using same public key\
          \ descriptions or bespoke service endpoints in multiple DDOs can provide\
          \ as much correlation information as using the same DID. Therefore the DDO\
          \ for a pseudonymous DID SHOULD also use pairwise-unique public keys and\
          \ pairwise-unique service endpoints.\n\n\n\n\n\n\nHerd Privacy\n\n\n   \
          \ \n      When an entity is indistinguishable from others in the herd, privacy\
          \ is available. When the act of engaging privately with another party is\
          \ by itself a recognizable flag, privacy is greatly diminished.\n\n    \n\
          \      DIDs and DID methods SHOULD work to improve herd privacy, particularly\
          \ for those who legitimately need it most. Choose technologies and human\
          \ interfaces that default to preserving anonymity and pseudonymity. In order\
          \ to reduce\n        digital fingerprints\n      , share common settings\
          \ across client implementations, keep negotiated options to a minimum on\
          \ wire protocols, use encrypted transport layers, and pad messages to standard\
          \ lengths.\n\n\n\n\n\n\n"
      - major: '12'
        minor: '0'
        term: '12.0'
        title: Privacy Considerations
        txt: "\nPrivacy Considerations\n\n\n    \n      It is critically important\
          \ to apply the principles of Privacy by Design to all aspects of decentralized\
          \ identity architecture, because DIDs and DDOs are\u2014by design\u2014\
          administered directly by their owners. There is no registrar, hosting company,\
          \ or other intermediate service provider to recommend or apply additional\
          \ privacy safeguards.\n\n    \n      The authors of this specification have\
          \ applied all seven Privacy by Design principles throughout its development.\
          \ For example, privacy in this specification is preventative not remedial,\
          \ and privacy is an embedded default. Furthermore, decentralized identity\
          \ architecture by itself embodies principle #7, \"Respect for user privacy\u2014\
          keep it user-centric.\"\n\n    \n      This section lists additional privacy\
          \ considerations that implementers, guardians, and identity owners should\
          \ bear in mind.\n\n\n\n\n\nRequirements of DID Method Specifications\n\n\
          \n\n\n\n\nDID method specifications MUST include their own Privacy\nConsiderations\
          \ sections, if only to point to the general privacy\nconsiderations in this\
          \ section.\n  \n\nThe DID method privacy section MUST discuss any subsection\
          \ of\nsection 5 of RFC 6973t\n  that could apply in a method-specific manner.\
          \ The subsections to\nconsider are: surveillance, stored data compromise,\
          \ unsolicited traffic,\nmisattribution, correlation, identification, secondary\
          \ use, disclosure,\nexclusion.\n  \n\n\n\n\n\n\n\n\nKeep Personally-Identifiable\
          \ Information (PII) Off-Ledger\n\n\n    \n      If a DID method specification\
          \ is written for a public ledger or network where all DIDs and DDOs will\
          \ be publicly available, it is STRONGLY RECOMMENDED that DDOs contain no\
          \ PII. All PII should be kept off-ledger behind service endpoints under\
          \ the control of the identity owner. With this privacy architecture, PII\
          \ may be exchanged on a private, peer-to-peer basis using communications\
          \ channels identified and secured by key descriptions in DID records. This\
          \ also enables identity owners and relying parties to implement the\n  \
          \      GDPR\n\n        right to be forgotten\n      , as no PII will be\
          \ written to an immutable ledger.\n\n\n\n\n\n\nDID Correlation Risks and\
          \ Pseudonymous DIDs\n\n\n    \n      Like any type of globally unique identifier,\
          \ DIDs may be used for correlation. Identity owners can mitigate this privacy\
          \ risk by using pairwise unique DIDs, i.e., by sharing a different private\
          \ DID for every relationship. In effect, each DID acts as a pseudonym. A\
          \ pseudonymous DID need only be shared with more than one party when the\
          \ identity owner explicitly authorizes correlation between those parties.\n\
          \n    \n      If pseudonymous DIDs are the default, then the only need for\
          \ a public DID\u2014a DID published openly or shared with a large number\
          \ of parties\u2014is when the identity owner explicitly desires public identification.\n\
          \n\n\n\n\n\nDDO Correlation Risks\n\n\n    \n      The anti-correlation\
          \ protections of pseudonymous DIDs are easily defeated if the data in the\
          \ corresponding DDOs can be correlated. For example, using same public key\
          \ descriptions or bespoke service endpoints in multiple DDOs can provide\
          \ as much correlation information as using the same DID. Therefore the DDO\
          \ for a pseudonymous DID SHOULD also use pairwise-unique public keys and\
          \ pairwise-unique service endpoints.\n\n\n\n\n\n\nHerd Privacy\n\n\n   \
          \ \n      When an entity is indistinguishable from others in the herd, privacy\
          \ is available. When the act of engaging privately with another party is\
          \ by itself a recognizable flag, privacy is greatly diminished.\n\n    \n\
          \      DIDs and DID methods SHOULD work to improve herd privacy, particularly\
          \ for those who legitimately need it most. Choose technologies and human\
          \ interfaces that default to preserving anonymity and pseudonymity. In order\
          \ to reduce\n        digital fingerprints\n      , share common settings\
          \ across client implementations, keep negotiated options to a minimum on\
          \ wire protocols, use encrypted transport layers, and pad messages to standard\
          \ lengths.\n\n\n\n\n\n\n"
      4c7c6a87a8eb2a0dd8ad2bfafbaf27296b7cc8007ecab74b9f67e8cbe6ca70a9:
      - major: '12'
        minor: '0'
        term: '12.0'
        title: Privacy Considerations
        txt: "\nPrivacy Considerations\n\n\n    \n      It is critically important\
          \ to apply the principles of Privacy by Design to all aspects of decentralized\
          \ identity architecture, because DIDs and DDOs are\u2014by design\u2014\
          administered directly by their owners. There is no registrar, hosting company,\
          \ or other intermediate service provider to recommend or apply additional\
          \ privacy safeguards.\n\n    \n      The authors of this specification have\
          \ applied all seven Privacy by Design principles throughout its development.\
          \ For example, privacy in this specification is preventative not remedial,\
          \ and privacy is an embedded default. Furthermore, decentralized identity\
          \ architecture by itself embodies principle #7, \"Respect for user privacy\u2014\
          keep it user-centric.\"\n\n    \n      This section lists additional privacy\
          \ considerations that implementers, guardians, and identity owners should\
          \ bear in mind.\n\n\n\n\n\nRequirements of DID Method Specifications\n\n\
          \n\n\n\nDID method specifications MUST include their own Privacy\nConsiderations\
          \ sections, if only to point to the general privacy\nconsiderations in this\
          \ section.\n  \nThe DID method privacy section MUST discuss any subsection\
          \ of\nsection 5 of RFC 6973t\n  \_that could apply in a method-specific\
          \ manner. The subsections to\nconsider are: surveillance, stored data compromise,\
          \ unsolicited traffic,\nmisattribution, correlation, identification, secondary\
          \ use, disclosure,\nexclusion.\n  \n\n\n\n\n\n\n\n\nKeep Personally-Identifiable\
          \ Information (PII) Off-Ledger\n\n\n    \n      If a DID method specification\
          \ is written for a public ledger or network where all DIDs and DDOs will\
          \ be publicly available, it is STRONGLY RECOMMENDED that DDOs contain no\
          \ PII. All PII should be kept off-ledger behind service endpoints under\
          \ the control of the identity owner. With this privacy architecture, PII\
          \ may be exchanged on a private, peer-to-peer basis using communications\
          \ channels identified and secured by key descriptions in DID records. This\
          \ also enables identity owners and relying parties to implement the\n  \
          \      GDPR\n\n        right to be forgotten\n      , as no PII will be\
          \ written to an immutable ledger.\n\n\n\n\n\n\nDID Correlation Risks and\
          \ Pseudonymous DIDs\n\n\n    \n      Like any type of globally unique identifier,\
          \ DIDs may be used for correlation. Identity owners can mitigate this privacy\
          \ risk by using pairwise unique DIDs, i.e., by sharing a different private\
          \ DID for every relationship. In effect, each DID acts as a pseudonym. A\
          \ pseudonymous DID need only be shared with more than one party when the\
          \ identity owner explicitly authorizes correlation between those parties.\n\
          \n    \n      If pseudonymous DIDs are the default, then the only need for\
          \ a public DID\u2014a DID published openly or shared with a large number\
          \ of parties\u2014is when the identity owner explicitly desires public identification.\n\
          \n\n\n\n\n\nDDO Correlation Risks\n\n\n    \n      The anti-correlation\
          \ protections of pseudonymous DIDs are easily defeated if the data in the\
          \ corresponding DDOs can be correlated. For example, using same public key\
          \ descriptions or bespoke service endpoints in multiple DDOs can provide\
          \ as much correlation information as using the same DID. Therefore the DDO\
          \ for a pseudonymous DID SHOULD also use pairwise-unique public keys and\
          \ pairwise-unique service endpoints.\n\n\n\n\n\n\nHerd Privacy\n\n\n   \
          \ \n      When an entity is indistinguishable from others in the herd, privacy\
          \ is available. When the act of engaging privately with another party is\
          \ by itself a recognizable flag, privacy is greatly diminished.\n\n    \n\
          \      DIDs and DID methods SHOULD work to improve herd privacy, particularly\
          \ for those who legitimately need it most. Choose technologies and human\
          \ interfaces that default to preserving anonymity and pseudonymity. In order\
          \ to reduce\n        digital fingerprints\n      , share common settings\
          \ across client implementations, keep negotiated options to a minimum on\
          \ wire protocols, use encrypted transport layers, and pad messages to standard\
          \ lengths.\n\n\n\n\n\n\n"
  Proof of Control (Optional and Method-Specific):
    count: 2
    mappings:
      16c53c92473f35d04870fe498c4cc31263b17f3f74074eb077f9f1b63c87adcf:
      - major: '8'
        minor: '5'
        term: '8.5'
        title: Proof of Control (Optional and Method-Specific)
        txt: "\nProof of Control (Optional and Method-Specific)\n\nProof of Control\
          \ is the mechanism by which an identity owner may give itself \nor other\
          \ entities permission to update the DDO\u2014for example to assist with\
          \ \nkey recovery. Note that Proof of Control is separate from Proof of Ownership\
          \ \nas explained in section 6.4. This is particularly important for key\
          \ recovery \nin the case of key loss, when the identity owner no longer\
          \ has access to the \nkeys described using the owner property (section 6.4),\
          \ or key compromise, \nwhere the owner\u2019s trusted third parties need\
          \ to override malicious activity \nby an attacker. See section 9.\n\n\n\
          Because the access control logic in a Proof of Control block must be \n\
          implemented by the target distributed ledger or network, a DID method \n\
          specification MUST include its own Proof of Control rules and processing\
          \ \nlogic. It is RECOMMENDED that all DID method specifications support\
          \ the \ngeneric Proof of Control rules specified in this section. A DID\
          \ method \nspecification MAY add its own method-specific Proof of Control\
          \ rules.\n\n\n  The generic Proof of Control rules are:\n\n\n\nA DDO MAY\
          \ have exactly one property representing Proof of Control.\n  \n\nThe key\
          \ for this property MUST be control.\n  \n\nThe value of this key MUST be\
          \ an array.\n  \n\nThe values of this array MUST be defined in a DID method\n\
          specification.\n  \n\nIf a Proof of Control rule accepts a DID without a\
          \ fragment as a\nvalue, then an update signature verified with any key in\
          \ the owner of\nthe DDO dereferenced from that DID MUST be considered valid\
          \ for Proof of\nControl.\n  \n\nIf a Proof of Control rule accepts a DID\
          \ with a fragment as a value,\nthen:\n  \n\n\n\nThe fragment MUST identify\
          \ a key description in the DDO dereferenced\nfrom that DID.\n  \n\nAn update\
          \ signature verified with the key in target key description\nMUST be considered\
          \ valid for Proof of Control.\n  \n\n\n6.5.1 \"Or\" Control\n\n\n\n    \n\
          \      To assert that any single member of a group of other DID owners has\
          \ permission to update the DDO, the control block array MAY contain a single\
          \ JSON object with two properties:\n\n\n\n\n\nA property type whose value\
          \ is the string OrControl.\n  \n\nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If at least\
          \ one update signature from a DID in this array is verified, it MUST be\
          \ considered valid for Proof of Control.\n\n\n\n\n\n6.5.2 \"And\" Control\n\
          \n\n\n    \n      To assert that only all members of a group of other DID\
          \ owners must act together to update the DDO, the control block array MAY\
          \ contain a single JSON object with two properties:\n\n\n\n\n\nA property\
          \ type whose value is the string AndControl.\n  \n\nA property signers whose\
          \ value is an array of DIDs with or without\nfragments.\n  \n\n\n\n    \n\
          \      If update signatures from ALL DIDs in this array are verified, it\
          \ MUST be considered valid for Proof of Control.\n\n\n\n\n\n6.5.3 \"M-of-N\"\
          \ Control\n\n\n\n    \n      To assert that a minimum number of members\
          \ of a group of other DID owners must act together to update the DDO, the\
          \ control block array MAY contain a single JSON object with three properties:\n\
          \n\n\n\n\nA property type whose value is the string MofNControl.\n  \n\n\
          A property minimumSignatures whose value is an integer representing\nthe\
          \ minimum threshold of signatures required to act together.\n  \n\nA property\
          \ signers whose value is an array of DIDs with or without\nfragments.\n\
          \  \n\n\n\n    \n      If the number of verified update signatures from\
          \ DIDs in this array equals or exceeds the value of minimumSignatures, it\
          \ MUST be considered valid for Proof of Control.\n\n    \n\n\n    \n   \
          \   Following is an example of a Proof of Control property implementing\
          \ these rules:\n\n    \n      {\n\n\n\n\n\n      \"control\": [{\n     \
          \       \"type\": \"OrControl\",\n            \"signer\": [            \"\
          did:example:21tDAKCERh95uGgKbJNHYp\",\n                    \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n               ]\n        }, {\n            \"type\": \"AndControl\",\n\
          \            \"signer\": [\n                    \"did:example:7P7xfv5AeTSSWcuq6hPptQ\"\
          ,\n                    \"did:example:X2v8rvzoCxayhYV5mhESQ1\"\n        \
          \       ]\n        }, {\n            \"type\": \"MofNControl\",\n      \
          \      \"minimumSignatures\": 2,\n            \"signer\": [\n          \
          \          \"did:example:4XirzuHiNnTrwfjCMtBEJ6\",\n                   \
          \ \"did:example:iCGjJEChRbAdfZbGqZAYT7\",\n                    \"did:example:WUoAyXB7mhfcVESjypm5ty\"\
          \n               ]\n        }]\n\n\n\n\n    \n      }\n\n\n\n\n\n\n\n\n\n"
      - major: '8'
        minor: '5'
        term: '8.5'
        title: Proof of Control (Optional and Method-Specific)
        txt: "\nProof of Control (Optional and Method-Specific)\n\nProof of Control\
          \ is the mechanism by which an identity owner may give itself \nor other\
          \ entities permission to update the DDO\u2014for example to assist with\
          \ \nkey recovery. Note that Proof of Control is separate from Proof of Ownership\
          \ \nas explained in section 6.4. This is particularly important for key\
          \ recovery \nin the case of key loss, when the identity owner no longer\
          \ has access to the \nkeys described using the owner property (section 6.4),\
          \ or key compromise, \nwhere the owner\u2019s trusted third parties need\
          \ to override malicious activity \nby an attacker. See section 9.\n\n\n\
          Because the access control logic in a Proof of Control block must be \n\
          implemented by the target distributed ledger or network, a DID method \n\
          specification MUST include its own Proof of Control rules and processing\
          \ \nlogic. It is RECOMMENDED that all DID method specifications support\
          \ the \ngeneric Proof of Control rules specified in this section. A DID\
          \ method \nspecification MAY add its own method-specific Proof of Control\
          \ rules.\n\n\n  The generic Proof of Control rules are:\n\n\n\nA DDO MAY\
          \ have exactly one property representing Proof of Control.\n  \n\nThe key\
          \ for this property MUST be control.\n  \n\nThe value of this key MUST be\
          \ an array.\n  \n\nThe values of this array MUST be defined in a DID method\n\
          specification.\n  \n\nIf a Proof of Control rule accepts a DID without a\
          \ fragment as a\nvalue, then an update signature verified with any key in\
          \ the owner of\nthe DDO dereferenced from that DID MUST be considered valid\
          \ for Proof of\nControl.\n  \n\nIf a Proof of Control rule accepts a DID\
          \ with a fragment as a value,\nthen:\n  \n\n\n\nThe fragment MUST identify\
          \ a key description in the DDO dereferenced\nfrom that DID.\n  \n\nAn update\
          \ signature verified with the key in target key description\nMUST be considered\
          \ valid for Proof of Control.\n  \n\n\n6.5.1 \"Or\" Control\n\n\n\n    \n\
          \      To assert that any single member of a group of other DID owners has\
          \ permission to update the DDO, the control block array MAY contain a single\
          \ JSON object with two properties:\n\n\n\n\n\nA property type whose value\
          \ is the string OrControl.\n  \n\nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If at least\
          \ one update signature from a DID in this array is verified, it MUST be\
          \ considered valid for Proof of Control.\n\n\n\n\n\n6.5.2 \"And\" Control\n\
          \n\n\n    \n      To assert that only all members of a group of other DID\
          \ owners must act together to update the DDO, the control block array MAY\
          \ contain a single JSON object with two properties:\n\n\n\n\n\nA property\
          \ type whose value is the string AndControl.\n  \n\nA property signers whose\
          \ value is an array of DIDs with or without\nfragments.\n  \n\n\n\n    \n\
          \      If update signatures from ALL DIDs in this array are verified, it\
          \ MUST be considered valid for Proof of Control.\n\n\n\n\n\n6.5.3 \"M-of-N\"\
          \ Control\n\n\n\n    \n      To assert that a minimum number of members\
          \ of a group of other DID owners must act together to update the DDO, the\
          \ control block array MAY contain a single JSON object with three properties:\n\
          \n\n\n\n\nA property type whose value is the string MofNControl.\n  \n\n\
          A property minimumSignatures whose value is an integer representing\nthe\
          \ minimum threshold of signatures required to act together.\n  \n\nA property\
          \ signers whose value is an array of DIDs with or without\nfragments.\n\
          \  \n\n\n\n    \n      If the number of verified update signatures from\
          \ DIDs in this array equals or exceeds the value of minimumSignatures, it\
          \ MUST be considered valid for Proof of Control.\n\n    \n\n\n    \n   \
          \   Following is an example of a Proof of Control property implementing\
          \ these rules:\n\n    \n      {\n\n\n\n\n\n      \"control\": [{\n     \
          \       \"type\": \"OrControl\",\n            \"signer\": [            \"\
          did:example:21tDAKCERh95uGgKbJNHYp\",\n                    \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\
          \n               ]\n        }, {\n            \"type\": \"AndControl\",\n\
          \            \"signer\": [\n                    \"did:example:7P7xfv5AeTSSWcuq6hPptQ\"\
          ,\n                    \"did:example:X2v8rvzoCxayhYV5mhESQ1\"\n        \
          \       ]\n        }, {\n            \"type\": \"MofNControl\",\n      \
          \      \"minimumSignatures\": 2,\n            \"signer\": [\n          \
          \          \"did:example:4XirzuHiNnTrwfjCMtBEJ6\",\n                   \
          \ \"did:example:iCGjJEChRbAdfZbGqZAYT7\",\n                    \"did:example:WUoAyXB7mhfcVESjypm5ty\"\
          \n               ]\n        }]\n\n\n\n\n    \n      }\n\n\n\n\n\n\n\n\n\n"
      cca0f99b7eddbf5e4965d54ce06213ae49cbcf114df998fee8ed94e528a845ee:
      - major: '8'
        minor: '5'
        term: '8.5'
        title: Proof of Control (Optional and Method-Specific)
        txt: "\nProof of Control (Optional and Method-Specific)\n\n\n    \n      Proof\
          \ of Control is the mechanism by which an identity owner may give itself\
          \ or other entities permission to update the DDO\u2014for example to assist\
          \ with key recovery. Note that Proof of Control is separate from Proof of\
          \ Ownership as explained in section 6.4. This is particularly important\
          \ for key recovery in the case of key loss, when the identity owner no longer\
          \ has access to the keys described using the owner property (section 6.4),\
          \ or key compromise, where the owner\u2019s trusted third parties need to\
          \ override malicious activity by an attacker. See section 9.\n\n    \n \
          \     Because the access control logic in a Proof of Control block must\
          \ be implemented by the target distributed ledger or network, a DID method\
          \ specification MUST include its own Proof of Control rules and processing\
          \ logic. It is RECOMMENDED that all DID method specifications support the\
          \ generic Proof of Control rules specified in this section. A DID method\
          \ specification MAY add its own method-specific Proof of Control rules.\n\
          \n    \n      The generic Proof of Control rules are:\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing Proof of Control.\n  \nThe key\
          \ for this property MUST be control.\n  \nThe value of this key MUST be\
          \ an array.\n  \nThe values of this array MUST be defined in a DID method\n\
          specification.\n  \nIf a Proof of Control rule accepts a DID without a fragment\
          \ as a\nvalue, then an update signature verified with any key in the owner\
          \ of\nthe DDO dereferenced from that DID MUST be considered valid for Proof\
          \ of\nControl.\n  \nIf a Proof of Control rule accepts a DID with a fragment\
          \ as a value,\nthen:\n  \n\n\n\n\n\n\nThe fragment MUST identify a key description\
          \ in the DDO dereferenced\nfrom that DID.\n  \nAn update signature verified\
          \ with the key in target key description\nMUST be considered valid for Proof\
          \ of Control.\n  \n\n\n\n\n\n\n\n6.5.1 \"Or\" Control\n\n\n\n    \n    \
          \  To assert that any single member of a group of other DID owners has permission\
          \ to update the DDO, the control block array MAY contain a single JSON object\
          \ with two properties:\n\n\n\n\nA property type whose value is the string\
          \ OrControl.\n  \nA property signers whose value is an array of DIDs with\
          \ or without\nfragments.\n  \n\n\n\n    \n      If at least one update signature\
          \ from a DID in this array is verified, it MUST be considered valid for\
          \ Proof of Control.\n\n\n\n\n\n6.5.2 \"And\" Control\n\n\n\n    \n     \
          \ To assert that only all members of a group of other DID owners must act\
          \ together to update the DDO, the control block array MAY contain a single\
          \ JSON object with two properties:\n\n\n\n\nA property type whose value\
          \ is the string AndControl.\n  \nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If update signatures\
          \ from ALL DIDs in this array are verified, it MUST be considered valid\
          \ for Proof of Control.\n\n\n\n\n\n6.5.3 \"M-of-N\" Control\n\n\n\n    \n\
          \      To assert that a minimum number of members of a group of other DID\
          \ owners must act together to update the DDO, the control block array MAY\
          \ contain a single JSON object with three properties:\n\n\n\n\nA property\
          \ type whose value is the string MofNControl.\n  \nA property minimumSignatures\
          \ whose value is an integer representing\nthe minimum threshold of signatures\
          \ required to act together.\n  \nA property signers whose value is an array\
          \ of DIDs with or without\nfragments.\n  \n\n\n\n    \n      If the number\
          \ of verified update signatures from DIDs in this array equals or exceeds\
          \ the value of minimumSignatures, it MUST be considered valid for Proof\
          \ of Control.\n\n    \n\n\n    \n      Following is an example of a Proof\
          \ of Control property implementing these rules:\n\n    \n      {\n\n\n\n\
          \n\n      \"control\": [{\n            \"type\": \"OrControl\",\n      \
          \      \"signer\": [            \"did:example:21tDAKCERh95uGgKbJNHYp\",\n\
          \                    \"did:example:8uQhQMGzWxR8vw5P3UWH1j\"\n          \
          \     ]\n        }, {\n            \"type\": \"AndControl\",\n         \
          \   \"signer\": [\n                    \"did:example:7P7xfv5AeTSSWcuq6hPptQ\"\
          ,\n                    \"did:example:X2v8rvzoCxayhYV5mhESQ1\"\n        \
          \       ]\n        }, {\n            \"type\": \"MofNControl\",\n      \
          \      \"minimumSignatures\": 2,\n            \"signer\": [\n          \
          \          \"did:example:4XirzuHiNnTrwfjCMtBEJ6\",\n                   \
          \ \"did:example:iCGjJEChRbAdfZbGqZAYT7\",\n                    \"did:example:WUoAyXB7mhfcVESjypm5ty\"\
          \n               ]\n        }]\n\n\n\n\n    \n      }\n\n\n\n\n\n\n\n\n\n"
  Proof of Ownership (Required If No Guardian):
    count: 2
    mappings:
      2a0432f4616a36f24c9fa1276dd61755cbe08e9666662da1774f05e99a5a7c9e:
      - major: '8'
        minor: '4'
        term: '8.4'
        title: Proof of Ownership (Required If No Guardian)
        txt: "\nProof of Ownership (Required If No Guardian)\n\n\n    \n      Proof\
          \ of Ownership is the mechanism by which an identity owner can cryptographically\
          \ prove ownership of a DID and DDO by virtue of publishing a set of public\
          \ key or verification key descriptions. See section 9.2. Note that Proof\
          \ of Ownership is separate from Proof of Control because an identity owner\
          \ may wish to enable other entities to update the DDO (for example, to assist\
          \ with key recovery as discussed in section 6.5) without enabling them to\
          \ prove ownership (and thus be able to impersonate the identity owner).\n\
          \n    \n      The rules for Proof of Ownership are:\n\n\n\n\nA DDO that\
          \ includes a guardian (section 6.3) MAY have exactly one\nowner.\n  \nA\
          \ DDO that does not include a guardian MUST have exactly one owner.\n  \n\
          The key for this property MUST be owner.\n  \nThe value of this key MUST\
          \ be an array where each member of the\narray is a key description of a\
          \ valid public key or verification key. A\nlist of standard key descriptions\
          \ is included in Appendix C. A new key\ndescription MAY also be defined\
          \ by a DID method specification.\n  \nIf this array contains more than one\
          \ key description, each key\ndescription MUST include a property with the\
          \ key id whose value is a DID\nreference consisting of the primary DID and\
          \ a DID fragment. This DID\nreference uniquely identifies this key description.\n\
          \  \n\n\n\n    \n\n\n    \n      Example:\n\n    \n\n\n\n\n\n\n      {\n\
          \      \"owner\": [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\"\
          ,\n            \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n\
          \            \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }, {\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\"\
          : \"MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n\n    \n\n\n    \n      Note that caching and\
          \ expiration of the keys in DDO key descriptions is entirely the responsibility\
          \ of DID resolvers and other clients. See section 9.6.\n\n\n\n\n\n"
      4bb07289322be5de8d8e5eb53be45a5ff917c2d7b6a82fb56dcb2d5b623ce72f:
      - major: '8'
        minor: '4'
        term: '8.4'
        title: Proof of Ownership (Required If No Guardian)
        txt: "\nProof of Ownership (Required If No Guardian)\n\nProof of Ownership\
          \ is the mechanism by which an identity owner can\ncryptographically prove\
          \ ownership of a DID and DDO by virtue of publishing\na set of public key\
          \ or verification key descriptions. See section 9.2.\nNote that Proof of\
          \ Ownership is separate from Proof of Control because an\nidentity owner\
          \ may wish to enable other entities to update the DDO\n(for example, to\
          \ assist with key recovery as discussed in section 6.5)\nwithout enabling\
          \ them to prove ownership (and thus be able to impersonate\nthe identity\
          \ owner).\n\n\nThe rules for Proof of Ownership are:\n\n\n\nA DDO that includes\
          \ a guardian (section 6.3) MAY have exactly one\nowner.\n  \n\nA DDO that\
          \ does not include a guardian MUST have exactly one owner.\n  \n\nThe key\
          \ for this property MUST be owner.\n  \n\nThe value of this key MUST be\
          \ an array where each member of the\narray is a key description of a valid\
          \ public key or verification key. A\nlist of standard key descriptions is\
          \ included in Appendix C. A new key\ndescription MAY also be defined by\
          \ a DID method specification.\n  \n\nIf this array contains more than one\
          \ key description, each key\ndescription MUST include a property with the\
          \ key id whose value is a DID\nreference consisting of the primary DID and\
          \ a DID fragment. This DID\nreference uniquely identifies this key description.\n\
          \  \n\n\nExample:\n\n\n{\n  \"owner\": [{\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\"\
          ,\n    \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n    \"curve\"\
          : \"ed25519\",\n    \"expires\": \"2017-02-08T16:02:20Z\",\n    \"publicKeyBase64\"\
          : \"IOmA4R7TfhkY...Mq2/gi25s=\"\n  }, {\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n    \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n    \"expires\"\
          : \"2017-03-22T00:00:00Z\",\n    \"publicKeyBase64\": \"MIIBOg...mgQaRyV\"\
          \n  }]\n}\n\n\nNote that caching and expiration of the keys in DDO key descriptions\
          \ is\nentirely the responsibility of DID resolvers and other clients. See\n\
          section 9.6.\n\n\n"
      - major: '8'
        minor: '4'
        term: '8.4'
        title: Proof of Ownership (Required If No Guardian)
        txt: "\nProof of Ownership (Required If No Guardian)\n\nProof of Ownership\
          \ is the mechanism by which an identity owner can\ncryptographically prove\
          \ ownership of a DID and DDO by virtue of publishing\na set of public key\
          \ or verification key descriptions. See section 9.2.\nNote that Proof of\
          \ Ownership is separate from Proof of Control because an\nidentity owner\
          \ may wish to enable other entities to update the DDO\n(for example, to\
          \ assist with key recovery as discussed in section 6.5)\nwithout enabling\
          \ them to prove ownership (and thus be able to impersonate\nthe identity\
          \ owner).\n\n\nThe rules for Proof of Ownership are:\n\n\n\nA DDO that includes\
          \ a guardian (section 6.3) MAY have exactly one\nowner.\n  \n\nA DDO that\
          \ does not include a guardian MUST have exactly one owner.\n  \n\nThe key\
          \ for this property MUST be owner.\n  \n\nThe value of this key MUST be\
          \ an array where each member of the\narray is a key description of a valid\
          \ public key or verification key. A\nlist of standard key descriptions is\
          \ included in Appendix C. A new key\ndescription MAY also be defined by\
          \ a DID method specification.\n  \n\nIf this array contains more than one\
          \ key description, each key\ndescription MUST include a property with the\
          \ key id whose value is a DID\nreference consisting of the primary DID and\
          \ a DID fragment. This DID\nreference uniquely identifies this key description.\n\
          \  \n\n\nExample:\n\n\n{\n  \"owner\": [{\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\"\
          ,\n    \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n    \"curve\"\
          : \"ed25519\",\n    \"expires\": \"2017-02-08T16:02:20Z\",\n    \"publicKeyBase64\"\
          : \"IOmA4R7TfhkY...Mq2/gi25s=\"\n  }, {\n    \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n    \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n    \"expires\"\
          : \"2017-03-22T00:00:00Z\",\n    \"publicKeyBase64\": \"MIIBOg...mgQaRyV\"\
          \n  }]\n}\n\n\nNote that caching and expiration of the keys in DDO key descriptions\
          \ is\nentirely the responsibility of DID resolvers and other clients. See\n\
          section 9.6.\n\n\n"
  Purpose of This Specification:
    count: 2
    mappings:
      02cb362c56552e641b0aab1196c57ddcdb9b450a05153e2f8b4d62742511741a:
      - major: '3'
        minor: '5'
        term: '3.5'
        title: Purpose of This Specification
        txt: "\nPurpose of This Specification\n\nThe first purpose of this specification\
          \ is to define the generic DID\nscheme and a generic set of operations on\
          \ DID records that can be\nimplemented for any distributed ledger or network\
          \ capable of accepting\nDID records. The second purpose of this specification\
          \ to define the\nconformance requirements for a DID method specification\u2014\
          a separate\nspecification that defines a specific DID scheme and specific\
          \ set of DID\nrecord operations for a specific distributed ledger or network.\n\
          \n\nConceptually, the relationship of this specification and a DID method\n\
          specification is similar to the relationship of the IETF generic URI\nspecification\
          \ ( RFC\n3986 ) and a specific URI\nscheme (such as the http: and https:\
          \ schemes specified in RFC 7230 ). It is also similar to\nthe relationship\
          \ of the IETF generic URN specification ( RFC 2141 ) and a specific URN\n\
          namespace definition (such as the UUID URN namespace defined in RFC 4122\
          \ ). The difference is\nthat a DID method specification, in addition to\
          \ defining a specific DID\nscheme, must also specify the methods for reading,\
          \ writing, and revoking\nDID records on the network for which it is written.\n\
          \n\nFor a list of DID method specifications, see Appendix A.\n\n\n"
      - major: '3'
        minor: '5'
        term: '3.5'
        title: Purpose of This Specification
        txt: "\nPurpose of This Specification\n\nThe first purpose of this specification\
          \ is to define the generic DID\nscheme and a generic set of operations on\
          \ DID records that can be\nimplemented for any distributed ledger or network\
          \ capable of accepting\nDID records. The second purpose of this specification\
          \ to define the\nconformance requirements for a DID method specification\u2014\
          a separate\nspecification that defines a specific DID scheme and specific\
          \ set of DID\nrecord operations for a specific distributed ledger or network.\n\
          \n\nConceptually, the relationship of this specification and a DID method\n\
          specification is similar to the relationship of the IETF generic URI\nspecification\
          \ ( RFC\n3986 ) and a specific URI\nscheme (such as the http: and https:\
          \ schemes specified in RFC 7230 ). It is also similar to\nthe relationship\
          \ of the IETF generic URN specification ( RFC 2141 ) and a specific URN\n\
          namespace definition (such as the UUID URN namespace defined in RFC 4122\
          \ ). The difference is\nthat a DID method specification, in addition to\
          \ defining a specific DID\nscheme, must also specify the methods for reading,\
          \ writing, and revoking\nDID records on the network for which it is written.\n\
          \n\nFor a list of DID method specifications, see Appendix A.\n\n\n"
      53816a6de16391379a0daa167202956954ab5f7b58b1bf9b70fda2494c10def2:
      - major: '3'
        minor: '5'
        term: '3.5'
        title: Purpose of This Specification
        txt: "\nPurpose of This Specification\n\nThe first purpose of this specification\
          \ is to define the generic DID\nscheme and a generic set of operations on\
          \ DID records that can be\nimplemented for any distributed ledger or network\
          \ capable of accepting\nDID records. The second purpose of this specification\
          \ to define the\nconformance requirements for a DID method specification\u2014\
          a separate\nspecification that defines a specific DID scheme and specific\
          \ set of DID\nrecord operations for a specific distributed ledger or network.\n\
          \n\nConceptually, the relationship of this specification and a DID method\n\
          specification is similar to the relationship of the IETF generic URI\nspecification\
          \ ( RFC\n3986 ) and a specific URI\nscheme \_(such as the http: and https:\
          \ schemes specified in RFC 7230 ). It is also similar to\nthe relationship\
          \ of the IETF generic URN specification ( RFC 2141 ) and a specific URN\n\
          namespace definition (such as the UUID URN namespace defined in RFC 4122\
          \ ). The difference is\nthat a DID method specification, in addition to\
          \ defining a specific DID\nscheme, must also specify the methods for reading,\
          \ writing, and revoking\nDID records on the network for which it is written.\n\
          \n\nFor a list of DID method specifications, see Appendix A.\n\n\n"
  Requirements of DID Method Specifications:
    count: 2
    mappings:
      09a1e504e63653a4adf86e114790e185913814d9718a793f67d9569e8355faa9:
      - major: '11'
        minor: '1'
        term: '11.1'
        title: Requirements of DID Method Specifications
        txt: "\nRequirements of DID Method Specifications\n\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Security\nConsiderations sections.\n\
          \  \n\nThis section MUST consider all the requirements mentioned in section\n\
          5 of RFC 3552 (page\n27) for the DID operations defined in the specification.\
          \ In particular:\n  \n\n\n\n    \n      At least the following forms of\
          \ attack MUST be considered: eavesdropping, replay, message insertion, deletion,\
          \ modification, and man-in-the-middle. Potential denial of service attacks\
          \ MUST be identified as well. If the protocol incorporates cryptographic\
          \ protection mechanisms, it should be clearly indicated which portions of\
          \ the data are protected and what the protections are (i.e., integrity only,\
          \ confidentiality, and/or endpoint authentication, etc.). Some indication\
          \ should also be given to what sorts of attacks the cryptographic protection\
          \ is susceptible. Data which should be held secret (keying material, random\
          \ seeds, etc.) should be clearly labeled. If the technology involves authentication,\
          \ particularly user-host authentication, the security of the authentication\
          \ method MUST be clearly specified.\n\n\n\n\n\nThis section MUST also discuss,\
          \ per Section 5 of RFC 3552 , residual risks\n  (such as the risks from\
          \ compromise in a related protocol, incorrect\nimplementation, or cipher)\
          \ after threat mitigation has been deployed.\n  \n\nThis section MUST provide\
          \ integrity protection and update\nauthentication for all operations required\
          \ by Section 7 of this\nspecification (DID Operations).\n  \n\nWhere DID\
          \ methods make use of peer-to-peer computing resources (such\nas with all\
          \ known DLTs), the expected burdens of those resources SHOULD\nbe discussed\
          \ in relation to denial of service.\n  \n\nMethod-specific endpoint authentication\
          \ MUST be discussed. Where DID\nmethods make use of DLTs with varying network\
          \ topology, sometimes\noffered as \"light node\" or \u201C thin client \u201D\
          \nimplementations to reduce required computing resources, the security\n\
          assumptions of the topology available to implementations of the DID\nmethod\
          \ MUST be discussed.\n  \n\nDID methods MUST discuss the policy mechanism\
          \ by which DIDs are\nproven to be uniquely assigned. A DID fits the functional\
          \ definition of\na URN as defined in RFC\n2141 \u2014a persistent identifier\
          \ that is assigned once to a resource\nand never reassigned. In a security\
          \ context this is particularly\nimportant since a DID may be used to identify\
          \ a specific party subject\nto a specific set of authorization rights.\n\
          \  \n\nDID methods that introduce new authentication service endpoint types\n\
          \  (section 6.6) SHOULD consider the security requirements of the supported\n\
          authentication protocol.\n  \n\n\n\n\n\n\n\n"
      - major: '11'
        minor: '1'
        term: '11.1'
        title: Requirements of DID Method Specifications
        txt: "\nRequirements of DID Method Specifications\n\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Security\nConsiderations sections.\n\
          \  \n\nThis section MUST consider all the requirements mentioned in section\n\
          5 of RFC 3552 (page\n27) for the DID operations defined in the specification.\
          \ In particular:\n  \n\n\n\n    \n      At least the following forms of\
          \ attack MUST be considered: eavesdropping, replay, message insertion, deletion,\
          \ modification, and man-in-the-middle. Potential denial of service attacks\
          \ MUST be identified as well. If the protocol incorporates cryptographic\
          \ protection mechanisms, it should be clearly indicated which portions of\
          \ the data are protected and what the protections are (i.e., integrity only,\
          \ confidentiality, and/or endpoint authentication, etc.). Some indication\
          \ should also be given to what sorts of attacks the cryptographic protection\
          \ is susceptible. Data which should be held secret (keying material, random\
          \ seeds, etc.) should be clearly labeled. If the technology involves authentication,\
          \ particularly user-host authentication, the security of the authentication\
          \ method MUST be clearly specified.\n\n\n\n\n\nThis section MUST also discuss,\
          \ per Section 5 of RFC 3552 , residual risks\n  (such as the risks from\
          \ compromise in a related protocol, incorrect\nimplementation, or cipher)\
          \ after threat mitigation has been deployed.\n  \n\nThis section MUST provide\
          \ integrity protection and update\nauthentication for all operations required\
          \ by Section 7 of this\nspecification (DID Operations).\n  \n\nWhere DID\
          \ methods make use of peer-to-peer computing resources (such\nas with all\
          \ known DLTs), the expected burdens of those resources SHOULD\nbe discussed\
          \ in relation to denial of service.\n  \n\nMethod-specific endpoint authentication\
          \ MUST be discussed. Where DID\nmethods make use of DLTs with varying network\
          \ topology, sometimes\noffered as \"light node\" or \u201C thin client \u201D\
          \nimplementations to reduce required computing resources, the security\n\
          assumptions of the topology available to implementations of the DID\nmethod\
          \ MUST be discussed.\n  \n\nDID methods MUST discuss the policy mechanism\
          \ by which DIDs are\nproven to be uniquely assigned. A DID fits the functional\
          \ definition of\na URN as defined in RFC\n2141 \u2014a persistent identifier\
          \ that is assigned once to a resource\nand never reassigned. In a security\
          \ context this is particularly\nimportant since a DID may be used to identify\
          \ a specific party subject\nto a specific set of authorization rights.\n\
          \  \n\nDID methods that introduce new authentication service endpoint types\n\
          \  (section 6.6) SHOULD consider the security requirements of the supported\n\
          authentication protocol.\n  \n\n\n\n\n\n\n\n"
      105cca97777bee27ab4a2764681fe623e9387887f70d2e13082133ebb6beb1d6:
      - major: '11'
        minor: '1'
        term: '11.1'
        title: Requirements of DID Method Specifications
        txt: "\nRequirements of DID Method Specifications\n\n\n\n\n\nDID method specifications\
          \ MUST include their own Security\nConsiderations sections.\n  \nThis section\
          \ MUST consider all the requirements mentioned in section\n5 of RFC 3552\
          \ \_(page\n27) for the DID operations defined in the specification. In particular:\n\
          \  \n\n\n\n    \n      At least the following forms of attack MUST be considered:\
          \ eavesdropping, replay, message insertion, deletion, modification, and\
          \ man-in-the-middle. Potential denial of service attacks MUST be identified\
          \ as well. If the protocol incorporates cryptographic protection mechanisms,\
          \ it should be clearly indicated which portions of the data are protected\
          \ and what the protections are (i.e., integrity only, confidentiality, and/or\
          \ endpoint authentication, etc.). Some indication should also be given to\
          \ what sorts of attacks the cryptographic protection is susceptible. Data\
          \ which should be held secret (keying material, random seeds, etc.) should\
          \ be clearly labeled. If the technology involves authentication, particularly\
          \ user-host authentication, the security of the authentication method MUST\
          \ be clearly specified.\n\n\n\n\nThis section MUST also discuss, per Section\
          \ 5 of RFC 3552 , residual risks\n  (such as the risks from compromise in\
          \ a related protocol, incorrect\nimplementation, or cipher) after threat\
          \ mitigation has been deployed.\n  \nThis section MUST provide integrity\
          \ protection and update\nauthentication for all operations required by Section\
          \ 7 of this\nspecification (DID Operations).\n  \nWhere DID methods make\
          \ use of peer-to-peer computing resources (such\nas with all known DLTs),\
          \ the expected burdens of those resources SHOULD\nbe discussed in relation\
          \ to denial of service.\n  \nMethod-specific endpoint authentication MUST\
          \ be discussed. Where DID\nmethods make use of DLTs with varying network\
          \ topology, sometimes\noffered as \"light node\" or \u201C thin client \u201D\
          \nimplementations to reduce required computing resources, the security\n\
          assumptions of the topology available to implementations of the DID\nmethod\
          \ MUST be discussed.\n  \nDID methods MUST discuss the policy mechanism\
          \ by which DIDs are\nproven to be uniquely assigned. A DID fits the functional\
          \ definition of\na URN as defined in RFC\n2141 \u2014a persistent identifier\
          \ that is assigned once to a resource\nand never reassigned. In a security\
          \ context this is particularly\nimportant since a DID may be used to identify\
          \ a specific party subject\nto a specific set of authorization rights.\n\
          \  \nDID methods that introduce new authentication service endpoint types\n\
          \  (section 6.6) SHOULD consider the security requirements of the supported\n\
          authentication protocol.\n  \n\n\n\n\n\n\n\n"
      32d9d543ca1cbe3121fba3b156d281fe3ada3a627e31a99e5c26a7397ba9ce2f:
      - major: '12'
        minor: '1'
        term: '12.1'
        title: Requirements of DID Method Specifications
        txt: "\nRequirements of DID Method Specifications\n\n\n\n\n\nDID method specifications\
          \ MUST include their own Privacy\nConsiderations sections, if only to point\
          \ to the general privacy\nconsiderations in this section.\n  \nThe DID method\
          \ privacy section MUST discuss any subsection of\nsection 5 of RFC 6973t\n\
          \  \_that could apply in a method-specific manner. The subsections to\n\
          consider are: surveillance, stored data compromise, unsolicited traffic,\n\
          misattribution, correlation, identification, secondary use, disclosure,\n\
          exclusion.\n  \n\n\n\n\n\n\n\n"
      54302b6d121201f7bcd0f2349a8b5c5c11d1ff3afbe7f5a51ced78f3e265c2a0:
      - major: '12'
        minor: '1'
        term: '12.1'
        title: Requirements of DID Method Specifications
        txt: "\nRequirements of DID Method Specifications\n\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Privacy\nConsiderations sections,\
          \ if only to point to the general privacy\nconsiderations in this section.\n\
          \  \n\nThe DID method privacy section MUST discuss any subsection of\nsection\
          \ 5 of RFC 6973t\n  that could apply in a method-specific manner. The subsections\
          \ to\nconsider are: surveillance, stored data compromise, unsolicited traffic,\n\
          misattribution, correlation, identification, secondary use, disclosure,\n\
          exclusion.\n  \n\n\n\n\n\n\n\n"
      - major: '12'
        minor: '1'
        term: '12.1'
        title: Requirements of DID Method Specifications
        txt: "\nRequirements of DID Method Specifications\n\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Privacy\nConsiderations sections,\
          \ if only to point to the general privacy\nconsiderations in this section.\n\
          \  \n\nThe DID method privacy section MUST discuss any subsection of\nsection\
          \ 5 of RFC 6973t\n  that could apply in a method-specific manner. The subsections\
          \ to\nconsider are: surveillance, stored data compromise, unsolicited traffic,\n\
          misattribution, correlation, identification, secondary use, disclosure,\n\
          exclusion.\n  \n\n\n\n\n\n\n\n"
  Security Considerations:
    count: 2
    mappings:
      0002f40f752c178e6bb172d9b62c8d7891369ee3026b0f8993f8afa159010a3c:
      - major: '11'
        minor: '0'
        term: '11.0'
        title: Security Considerations
        txt: "\nSecurity Considerations\n\n\n    \n      NOTE TO IMPLEMENTERS: During\
          \ the Implementer\u2019s Draft stage, this section focuses on security topics\
          \ that should be important in early implementations. The editors are also\
          \ seeking feedback on threats and threat mitigations that should be reflected\
          \ in this section or elsewhere in the spec.\n\n    \n      As the root identity\
          \ records for decentralized identities, DIDs and DDOs are a vital component\
          \ of decentralized identity management. They are also the foundational building\
          \ blocks of DPKI (decentralized public key infrastructure) as an augmentation\
          \ to conventional X.509 certificates.\n\n    \n      As such, DIDs are designed\
          \ to operate under the general Internet threat model used by many IETF standards.\
          \ We assume uncompromised endpoints, but allow messages to be read or corrupted\
          \ on the network. Protecting against an attack when a system is compromised\
          \ requires external key-signing hardware. See also section 6.5 regarding\
          \ key revocation and recovery.\n\n    \n      For their part, the DLTs hosting\
          \ DIDs and DDOs have special security properties for preventing active attacks.\
          \ Their design uses public/private key cryptography to allow operation on\
          \ passively monitored networks without risking compromise of private keys.\
          \ This is what makes DID architecture and decentralized identity possible.\n\
          \n\n\n\nRequirements of DID Method Specifications\n\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Security\nConsiderations sections.\n\
          \  \n\nThis section MUST consider all the requirements mentioned in section\n\
          5 of RFC 3552 (page\n27) for the DID operations defined in the specification.\
          \ In particular:\n  \n\n\n\n    \n      At least the following forms of\
          \ attack MUST be considered: eavesdropping, replay, message insertion, deletion,\
          \ modification, and man-in-the-middle. Potential denial of service attacks\
          \ MUST be identified as well. If the protocol incorporates cryptographic\
          \ protection mechanisms, it should be clearly indicated which portions of\
          \ the data are protected and what the protections are (i.e., integrity only,\
          \ confidentiality, and/or endpoint authentication, etc.). Some indication\
          \ should also be given to what sorts of attacks the cryptographic protection\
          \ is susceptible. Data which should be held secret (keying material, random\
          \ seeds, etc.) should be clearly labeled. If the technology involves authentication,\
          \ particularly user-host authentication, the security of the authentication\
          \ method MUST be clearly specified.\n\n\n\n\n\nThis section MUST also discuss,\
          \ per Section 5 of RFC 3552 , residual risks\n  (such as the risks from\
          \ compromise in a related protocol, incorrect\nimplementation, or cipher)\
          \ after threat mitigation has been deployed.\n  \n\nThis section MUST provide\
          \ integrity protection and update\nauthentication for all operations required\
          \ by Section 7 of this\nspecification (DID Operations).\n  \n\nWhere DID\
          \ methods make use of peer-to-peer computing resources (such\nas with all\
          \ known DLTs), the expected burdens of those resources SHOULD\nbe discussed\
          \ in relation to denial of service.\n  \n\nMethod-specific endpoint authentication\
          \ MUST be discussed. Where DID\nmethods make use of DLTs with varying network\
          \ topology, sometimes\noffered as \"light node\" or \u201C thin client \u201D\
          \nimplementations to reduce required computing resources, the security\n\
          assumptions of the topology available to implementations of the DID\nmethod\
          \ MUST be discussed.\n  \n\nDID methods MUST discuss the policy mechanism\
          \ by which DIDs are\nproven to be uniquely assigned. A DID fits the functional\
          \ definition of\na URN as defined in RFC\n2141 \u2014a persistent identifier\
          \ that is assigned once to a resource\nand never reassigned. In a security\
          \ context this is particularly\nimportant since a DID may be used to identify\
          \ a specific party subject\nto a specific set of authorization rights.\n\
          \  \n\nDID methods that introduce new authentication service endpoint types\n\
          \  (section 6.6) SHOULD consider the security requirements of the supported\n\
          authentication protocol.\n  \n\n\n\n\n\n\n\n\nBinding of Identity\n\n\n\n\
          \n\n\n9.2.1 Proving Ownership of a DID and DDO\n\n\n\n    \n      By itself,\
          \ a verified signature on self-signed DDO does not prove ownership of a\
          \ DID. It only proves the following:\n\n\n\n\n\nThe DDO has not been tampered\
          \ with since it was registered.\n  \n\nThe owner of the DDO controlled the\
          \ private key used for the\nsignature at the time the signature was generated.\n\
          \  \n\n\n\n    \n      Proving ownership of a DID, i.e., the binding between\
          \ the DID and the DDO that describes it, requires a two step process:\n\n\
          \n\n\n\nResolving the DID to a DDO according to its DID method\nspecification.\n\
          \  \n\nVerifying that the id property of the resulting DDO matches the DID\n\
          that was resolved.\n  \n\n\n\n    \n      It should be noted that this process\
          \ proves ownership of a DID and DDO regardless of whether the DDO is signed.\n\
          \n\n\n\n\n9.2.2 Proving Ownership of a Public Key\n\n\n\n    \n      There\
          \ are two methods for proving ownership of the private key corresponding\
          \ to a public key description in the DDO: static and dynamic.\n\n    \n\
          \      The static method is to sign the DDO with the private key. This proves\
          \ ownership of the private key at a time no later than the DDO was registered.\n\
          \n    \n      If the DDO is not signed, ownership of a public key described\
          \ in the DDO may still be proven dynamically as follows:\n\n\n\n\n\nSend\
          \ a challenge message containing a public key description from\nthe DDO\
          \ and a nonce to an appropriate service endpoint described in the\nDDO.\n\
          \  \n\nVerify the signature of the response message against the public key\n\
          description.\n  \n\n\n\n\n\n\n\n9.2.3 Identity Owner Authentication and\
          \ Verifiable Claims\n\n\n\n    \n      A DID and DDO do not inherently carry\
          \ any\n        PII\n       (personally-identifiable information). The process\
          \ of binding a DID to the real-world owner of an identity using claims about\
          \ the owner is out of scope for this specification. However this topic is\
          \ the focus of the\n        verifiable claims\n       standardization work\
          \ at the W3C (where the term \"DID\" originated).\n\n\n\n\n\n\nAuthentication\
          \ Service Endpoints\n\n\n    \n      If a DDO publishes a service endpoint\
          \ intended for authentication or authorization of an identity owner (section\
          \ 6.6), it is the responsibility of the service endpoint provider, identity\
          \ owner, and/or relying party to comply with the requirements of the authentication\
          \ protocol(s) supported at that service endpoint.\n\n\n\n\n\n\nNon-Repudiation\n\
          \n\n    \n      Non-repudiation of DIDs and DDO updates is supported under\
          \ the assumption that: (1) the identity owner is monitoring for unauthorized\
          \ updates (see section 9.5) and (2) the identity owner has had adequate\
          \ opportunity to revoke malicious updates according to the DID method's\
          \ access control mechanism (section 6.5). This capability is further supported\
          \ if timestamps are included (sections 6.7 and 6.8) and the target DLT system\
          \ supports timestamps.\n\n\n\n\n\n\nNotification of DDO Changes\n\n\n  \
          \  \n      One mitigation against unauthorized changes to a DDO is monitoring\
          \ and actively notifying the identity owner when there are changes. This\
          \ is analogous to helping prevent account takeover on conventional username/password\
          \ accounts by sending password reset notifications to the email addresses\
          \ on file.\n\n    \n      In the case of a DID, where there is no intermediary\
          \ registrar or account provider to generate the notification, the following\
          \ approaches are RECOMMENDED:\n\n\n\n\n\nSubscriptions. If the ledger or\
          \ network on which the DID is\nregistered directly supports change notifications,\
          \ this service can be\noffered to DID owners. Notifications may be sent\
          \ directly to the\nrelevant service endpoints listed in an existing DID.\n\
          \  \n\nSelf-monitoring. An identity owner may employ its own local or\n\
          online agent to periodically monitor for changes to a DDO.\n  \n\nThird-party\
          \ monitoring. An identity owner may rely on a third party\nmonitoring service,\
          \ however this introduces another vector of attack.\n  \n\n\n\n\n\n\n\n\n\
          Key and Signature Expiration\n\n\n    \n      In a decentralized identity\
          \ architecture, there are no centralized authorities to enforce key or signature\
          \ expiration policies. Therefore DID resolvers and other client applications\
          \ SHOULD validate that keys have not expired. Since some use cases may have\
          \ legitimate reasons why already-expired keys can be extended, a key expiration\
          \ SHOULD NOT prevent any further use of the key, and implementations SHOULD\
          \ attempt to update its status upon encountering it in a signature.\n\n\n\
          \n\n\n\nKey Revocation and Recovery\n\n\n    \n      Section 7 specifies\
          \ the DID operations that must be supported by a DID method specification,\
          \ including revocation of a DDO by replacing it with an updated DDO. In\
          \ general, checking for key revocation on DLT-based methods is expected\
          \ to be handled in a manner similar to checking the balance of a cryptocurrency\
          \ account on a distributed ledger: if the balance is empty, the entire DID\
          \ is revoked.\n\n    \n      DID method specifications SHOULD enable support\
          \ for a quorum of trusted parties to enable key recovery. Some of the facilities\
          \ to do so are suggested in section 6.5, Proof of Control. Note that not\
          \ all DID method specifications will recognize control from DIDs registered\
          \ using other DID methods and they MAY restrict third-party control to DIDs\
          \ that use the same method.\n\n    \n      Access control and key recovery\
          \ in a DID method specification MAY also include a time lock feature to\
          \ protect against key compromise by maintaining a second track of control\
          \ for recovery. Further specification of this type of control is a matter\
          \ for future work (see section 11.4).\n\n\n\n\n\n\n"
      - major: '11'
        minor: '0'
        term: '11.0'
        title: Security Considerations
        txt: "\nSecurity Considerations\n\n\n    \n      NOTE TO IMPLEMENTERS: During\
          \ the Implementer\u2019s Draft stage, this section focuses on security topics\
          \ that should be important in early implementations. The editors are also\
          \ seeking feedback on threats and threat mitigations that should be reflected\
          \ in this section or elsewhere in the spec.\n\n    \n      As the root identity\
          \ records for decentralized identities, DIDs and DDOs are a vital component\
          \ of decentralized identity management. They are also the foundational building\
          \ blocks of DPKI (decentralized public key infrastructure) as an augmentation\
          \ to conventional X.509 certificates.\n\n    \n      As such, DIDs are designed\
          \ to operate under the general Internet threat model used by many IETF standards.\
          \ We assume uncompromised endpoints, but allow messages to be read or corrupted\
          \ on the network. Protecting against an attack when a system is compromised\
          \ requires external key-signing hardware. See also section 6.5 regarding\
          \ key revocation and recovery.\n\n    \n      For their part, the DLTs hosting\
          \ DIDs and DDOs have special security properties for preventing active attacks.\
          \ Their design uses public/private key cryptography to allow operation on\
          \ passively monitored networks without risking compromise of private keys.\
          \ This is what makes DID architecture and decentralized identity possible.\n\
          \n\n\n\nRequirements of DID Method Specifications\n\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Security\nConsiderations sections.\n\
          \  \n\nThis section MUST consider all the requirements mentioned in section\n\
          5 of RFC 3552 (page\n27) for the DID operations defined in the specification.\
          \ In particular:\n  \n\n\n\n    \n      At least the following forms of\
          \ attack MUST be considered: eavesdropping, replay, message insertion, deletion,\
          \ modification, and man-in-the-middle. Potential denial of service attacks\
          \ MUST be identified as well. If the protocol incorporates cryptographic\
          \ protection mechanisms, it should be clearly indicated which portions of\
          \ the data are protected and what the protections are (i.e., integrity only,\
          \ confidentiality, and/or endpoint authentication, etc.). Some indication\
          \ should also be given to what sorts of attacks the cryptographic protection\
          \ is susceptible. Data which should be held secret (keying material, random\
          \ seeds, etc.) should be clearly labeled. If the technology involves authentication,\
          \ particularly user-host authentication, the security of the authentication\
          \ method MUST be clearly specified.\n\n\n\n\n\nThis section MUST also discuss,\
          \ per Section 5 of RFC 3552 , residual risks\n  (such as the risks from\
          \ compromise in a related protocol, incorrect\nimplementation, or cipher)\
          \ after threat mitigation has been deployed.\n  \n\nThis section MUST provide\
          \ integrity protection and update\nauthentication for all operations required\
          \ by Section 7 of this\nspecification (DID Operations).\n  \n\nWhere DID\
          \ methods make use of peer-to-peer computing resources (such\nas with all\
          \ known DLTs), the expected burdens of those resources SHOULD\nbe discussed\
          \ in relation to denial of service.\n  \n\nMethod-specific endpoint authentication\
          \ MUST be discussed. Where DID\nmethods make use of DLTs with varying network\
          \ topology, sometimes\noffered as \"light node\" or \u201C thin client \u201D\
          \nimplementations to reduce required computing resources, the security\n\
          assumptions of the topology available to implementations of the DID\nmethod\
          \ MUST be discussed.\n  \n\nDID methods MUST discuss the policy mechanism\
          \ by which DIDs are\nproven to be uniquely assigned. A DID fits the functional\
          \ definition of\na URN as defined in RFC\n2141 \u2014a persistent identifier\
          \ that is assigned once to a resource\nand never reassigned. In a security\
          \ context this is particularly\nimportant since a DID may be used to identify\
          \ a specific party subject\nto a specific set of authorization rights.\n\
          \  \n\nDID methods that introduce new authentication service endpoint types\n\
          \  (section 6.6) SHOULD consider the security requirements of the supported\n\
          authentication protocol.\n  \n\n\n\n\n\n\n\n\nBinding of Identity\n\n\n\n\
          \n\n\n9.2.1 Proving Ownership of a DID and DDO\n\n\n\n    \n      By itself,\
          \ a verified signature on self-signed DDO does not prove ownership of a\
          \ DID. It only proves the following:\n\n\n\n\n\nThe DDO has not been tampered\
          \ with since it was registered.\n  \n\nThe owner of the DDO controlled the\
          \ private key used for the\nsignature at the time the signature was generated.\n\
          \  \n\n\n\n    \n      Proving ownership of a DID, i.e., the binding between\
          \ the DID and the DDO that describes it, requires a two step process:\n\n\
          \n\n\n\nResolving the DID to a DDO according to its DID method\nspecification.\n\
          \  \n\nVerifying that the id property of the resulting DDO matches the DID\n\
          that was resolved.\n  \n\n\n\n    \n      It should be noted that this process\
          \ proves ownership of a DID and DDO regardless of whether the DDO is signed.\n\
          \n\n\n\n\n9.2.2 Proving Ownership of a Public Key\n\n\n\n    \n      There\
          \ are two methods for proving ownership of the private key corresponding\
          \ to a public key description in the DDO: static and dynamic.\n\n    \n\
          \      The static method is to sign the DDO with the private key. This proves\
          \ ownership of the private key at a time no later than the DDO was registered.\n\
          \n    \n      If the DDO is not signed, ownership of a public key described\
          \ in the DDO may still be proven dynamically as follows:\n\n\n\n\n\nSend\
          \ a challenge message containing a public key description from\nthe DDO\
          \ and a nonce to an appropriate service endpoint described in the\nDDO.\n\
          \  \n\nVerify the signature of the response message against the public key\n\
          description.\n  \n\n\n\n\n\n\n\n9.2.3 Identity Owner Authentication and\
          \ Verifiable Claims\n\n\n\n    \n      A DID and DDO do not inherently carry\
          \ any\n        PII\n       (personally-identifiable information). The process\
          \ of binding a DID to the real-world owner of an identity using claims about\
          \ the owner is out of scope for this specification. However this topic is\
          \ the focus of the\n        verifiable claims\n       standardization work\
          \ at the W3C (where the term \"DID\" originated).\n\n\n\n\n\n\nAuthentication\
          \ Service Endpoints\n\n\n    \n      If a DDO publishes a service endpoint\
          \ intended for authentication or authorization of an identity owner (section\
          \ 6.6), it is the responsibility of the service endpoint provider, identity\
          \ owner, and/or relying party to comply with the requirements of the authentication\
          \ protocol(s) supported at that service endpoint.\n\n\n\n\n\n\nNon-Repudiation\n\
          \n\n    \n      Non-repudiation of DIDs and DDO updates is supported under\
          \ the assumption that: (1) the identity owner is monitoring for unauthorized\
          \ updates (see section 9.5) and (2) the identity owner has had adequate\
          \ opportunity to revoke malicious updates according to the DID method's\
          \ access control mechanism (section 6.5). This capability is further supported\
          \ if timestamps are included (sections 6.7 and 6.8) and the target DLT system\
          \ supports timestamps.\n\n\n\n\n\n\nNotification of DDO Changes\n\n\n  \
          \  \n      One mitigation against unauthorized changes to a DDO is monitoring\
          \ and actively notifying the identity owner when there are changes. This\
          \ is analogous to helping prevent account takeover on conventional username/password\
          \ accounts by sending password reset notifications to the email addresses\
          \ on file.\n\n    \n      In the case of a DID, where there is no intermediary\
          \ registrar or account provider to generate the notification, the following\
          \ approaches are RECOMMENDED:\n\n\n\n\n\nSubscriptions. If the ledger or\
          \ network on which the DID is\nregistered directly supports change notifications,\
          \ this service can be\noffered to DID owners. Notifications may be sent\
          \ directly to the\nrelevant service endpoints listed in an existing DID.\n\
          \  \n\nSelf-monitoring. An identity owner may employ its own local or\n\
          online agent to periodically monitor for changes to a DDO.\n  \n\nThird-party\
          \ monitoring. An identity owner may rely on a third party\nmonitoring service,\
          \ however this introduces another vector of attack.\n  \n\n\n\n\n\n\n\n\n\
          Key and Signature Expiration\n\n\n    \n      In a decentralized identity\
          \ architecture, there are no centralized authorities to enforce key or signature\
          \ expiration policies. Therefore DID resolvers and other client applications\
          \ SHOULD validate that keys have not expired. Since some use cases may have\
          \ legitimate reasons why already-expired keys can be extended, a key expiration\
          \ SHOULD NOT prevent any further use of the key, and implementations SHOULD\
          \ attempt to update its status upon encountering it in a signature.\n\n\n\
          \n\n\n\nKey Revocation and Recovery\n\n\n    \n      Section 7 specifies\
          \ the DID operations that must be supported by a DID method specification,\
          \ including revocation of a DDO by replacing it with an updated DDO. In\
          \ general, checking for key revocation on DLT-based methods is expected\
          \ to be handled in a manner similar to checking the balance of a cryptocurrency\
          \ account on a distributed ledger: if the balance is empty, the entire DID\
          \ is revoked.\n\n    \n      DID method specifications SHOULD enable support\
          \ for a quorum of trusted parties to enable key recovery. Some of the facilities\
          \ to do so are suggested in section 6.5, Proof of Control. Note that not\
          \ all DID method specifications will recognize control from DIDs registered\
          \ using other DID methods and they MAY restrict third-party control to DIDs\
          \ that use the same method.\n\n    \n      Access control and key recovery\
          \ in a DID method specification MAY also include a time lock feature to\
          \ protect against key compromise by maintaining a second track of control\
          \ for recovery. Further specification of this type of control is a matter\
          \ for future work (see section 11.4).\n\n\n\n\n\n\n"
      b84dbe107cdd11d9717461eab09ded7b41d83695b413ce1e51736ed76d52b80a:
      - major: '11'
        minor: '0'
        term: '11.0'
        title: Security Considerations
        txt: "\nSecurity Considerations\n\n\n    \n      NOTE TO IMPLEMENTERS: During\
          \ the Implementer\u2019s Draft stage, this section focuses on security topics\
          \ that should be important in early implementations. The editors are also\
          \ seeking feedback on threats and threat mitigations that should be reflected\
          \ in this section or elsewhere in the spec.\n\n    \n      As the root identity\
          \ records for decentralized identities, DIDs and DDOs are a vital component\
          \ of decentralized identity management. They are also the foundational building\
          \ blocks of DPKI (decentralized public key infrastructure) as an augmentation\
          \ to conventional X.509 certificates.\n\n    \n      As such, DIDs are designed\
          \ to operate under the general Internet threat model used by many IETF standards.\
          \ We assume uncompromised endpoints, but allow messages to be read or corrupted\
          \ on the network. Protecting against an attack when a system is compromised\
          \ requires external key-signing hardware. See also section 6.5 regarding\
          \ key revocation and recovery.\n\n    \n      For their part, the DLTs hosting\
          \ DIDs and DDOs have special security properties for preventing active attacks.\
          \ Their design uses public/private key cryptography to allow operation on\
          \ passively monitored networks without risking compromise of private keys.\
          \ This is what makes DID architecture and decentralized identity possible.\n\
          \n\n\n\nRequirements of DID Method Specifications\n\n\n\n\n\nDID method\
          \ specifications MUST include their own Security\nConsiderations sections.\n\
          \  \nThis section MUST consider all the requirements mentioned in section\n\
          5 of RFC 3552 \_(page\n27) for the DID operations defined in the specification.\
          \ In particular:\n  \n\n\n\n    \n      At least the following forms of\
          \ attack MUST be considered: eavesdropping, replay, message insertion, deletion,\
          \ modification, and man-in-the-middle. Potential denial of service attacks\
          \ MUST be identified as well. If the protocol incorporates cryptographic\
          \ protection mechanisms, it should be clearly indicated which portions of\
          \ the data are protected and what the protections are (i.e., integrity only,\
          \ confidentiality, and/or endpoint authentication, etc.). Some indication\
          \ should also be given to what sorts of attacks the cryptographic protection\
          \ is susceptible. Data which should be held secret (keying material, random\
          \ seeds, etc.) should be clearly labeled. If the technology involves authentication,\
          \ particularly user-host authentication, the security of the authentication\
          \ method MUST be clearly specified.\n\n\n\n\nThis section MUST also discuss,\
          \ per Section 5 of RFC 3552 , residual risks\n  (such as the risks from\
          \ compromise in a related protocol, incorrect\nimplementation, or cipher)\
          \ after threat mitigation has been deployed.\n  \nThis section MUST provide\
          \ integrity protection and update\nauthentication for all operations required\
          \ by Section 7 of this\nspecification (DID Operations).\n  \nWhere DID methods\
          \ make use of peer-to-peer computing resources (such\nas with all known\
          \ DLTs), the expected burdens of those resources SHOULD\nbe discussed in\
          \ relation to denial of service.\n  \nMethod-specific endpoint authentication\
          \ MUST be discussed. Where DID\nmethods make use of DLTs with varying network\
          \ topology, sometimes\noffered as \"light node\" or \u201C thin client \u201D\
          \nimplementations to reduce required computing resources, the security\n\
          assumptions of the topology available to implementations of the DID\nmethod\
          \ MUST be discussed.\n  \nDID methods MUST discuss the policy mechanism\
          \ by which DIDs are\nproven to be uniquely assigned. A DID fits the functional\
          \ definition of\na URN as defined in RFC\n2141 \u2014a persistent identifier\
          \ that is assigned once to a resource\nand never reassigned. In a security\
          \ context this is particularly\nimportant since a DID may be used to identify\
          \ a specific party subject\nto a specific set of authorization rights.\n\
          \  \nDID methods that introduce new authentication service endpoint types\n\
          \  (section 6.6) SHOULD consider the security requirements of the supported\n\
          authentication protocol.\n  \n\n\n\n\n\n\n\n\nBinding of Identity\n\n\n\n\
          \n\n\n9.2.1 Proving Ownership of a DID and DDO\n\n\n\n    \n      By itself,\
          \ a verified signature on self-signed DDO does not prove ownership of a\
          \ DID. It only proves the following:\n\n\n\n\nThe DDO has not been tampered\
          \ with since it was registered.\n  \nThe owner of the DDO controlled the\
          \ private key used for the\nsignature at the time the signature was generated.\n\
          \  \n\n\n\n    \n      Proving ownership of a DID, i.e., the binding between\
          \ the DID and the DDO that describes it, requires a two step process:\n\n\
          \n\n\nResolving the DID to a DDO according to its DID method\nspecification.\n\
          \  \nVerifying that the id property of the resulting DDO matches the DID\n\
          that was resolved.\n  \n\n\n\n    \n      It should be noted that this process\
          \ proves ownership of a DID and DDO regardless of whether the DDO is signed.\n\
          \n\n\n\n\n9.2.2 Proving Ownership of a Public Key\n\n\n\n    \n      There\
          \ are two methods for proving ownership of the private key corresponding\
          \ to a public key description in the DDO: static and dynamic.\n\n    \n\
          \      The static method is to sign the DDO with the private key. This proves\
          \ ownership of the private key at a time no later than the DDO was registered.\n\
          \n    \n      If the DDO is not signed, ownership of a public key described\
          \ in the DDO may still be proven dynamically as follows:\n\n\n\n\nSend a\
          \ challenge message containing a public key description from\nthe DDO and\
          \ a nonce to an appropriate service endpoint described in the\nDDO.\n  \n\
          Verify the signature of the response message against the public key\ndescription.\n\
          \  \n\n\n\n\n\n\n\n9.2.3 Identity Owner Authentication and Verifiable Claims\n\
          \n\n\n    \n      A DID and DDO do not inherently carry any\n        PII\n\
          \       (personally-identifiable information). The process of binding a\
          \ DID to the real-world owner of an identity using claims about the owner\
          \ is out of scope for this specification. However this topic is the focus\
          \ of the\n        verifiable claims\n       standardization work at the\
          \ W3C (where the term \"DID\" originated).\n\n\n\n\n\n\nAuthentication Service\
          \ Endpoints\n\n\n    \n      If a DDO publishes a service endpoint intended\
          \ for authentication or authorization of an identity owner (section 6.6),\
          \ it is the responsibility of the service endpoint provider, identity owner,\
          \ and/or relying party to comply with the requirements of the authentication\
          \ protocol(s) supported at that service endpoint.\n\n\n\n\n\n\nNon-Repudiation\n\
          \n\n    \n      Non-repudiation of DIDs and DDO updates is supported under\
          \ the assumption that: (1) the identity owner is monitoring for unauthorized\
          \ updates (see section 9.5) and (2) the identity owner has had adequate\
          \ opportunity to revoke malicious updates according to the DID method's\
          \ access control mechanism (section 6.5). This capability is further supported\
          \ if timestamps are included (sections 6.7 and 6.8) and the target DLT system\
          \ supports timestamps.\n\n\n\n\n\n\nNotification of DDO Changes\n\n\n  \
          \  \n      One mitigation against unauthorized changes to a DDO is monitoring\
          \ and actively notifying the identity owner when there are changes. This\
          \ is analogous to helping prevent account takeover on conventional username/password\
          \ accounts by sending password reset notifications to the email addresses\
          \ on file.\n\n    \n      In the case of a DID, where there is no intermediary\
          \ registrar or account provider to generate the notification, the following\
          \ approaches are RECOMMENDED:\n\n\n\n\nSubscriptions. If the ledger or network\
          \ on which the DID is\nregistered directly supports change notifications,\
          \ this service can be\noffered to DID owners. Notifications may be sent\
          \ directly to the\nrelevant service endpoints listed in an existing DID.\n\
          \  \nSelf-monitoring. An identity owner may employ its own local or\nonline\
          \ agent to periodically monitor for changes to a DDO.\n  \nThird-party monitoring.\
          \ An identity owner may rely on a third party\nmonitoring service, however\
          \ this introduces another vector of attack.\n  \n\n\n\n\n\n\n\n\nKey and\
          \ Signature Expiration\n\n\n    \n      In a decentralized identity architecture,\
          \ there are no centralized authorities to enforce key or signature expiration\
          \ policies. Therefore DID resolvers and other client applications SHOULD\
          \ validate that keys have not expired. Since some use cases may have legitimate\
          \ reasons why already-expired keys can be extended, a key expiration SHOULD\
          \ NOT prevent any further use of the key, and implementations SHOULD attempt\
          \ to update its status upon encountering it in a signature.\n\n\n\n\n\n\n\
          Key Revocation and Recovery\n\n\n    \n      Section 7 specifies the DID\
          \ operations that must be supported by a DID method specification, including\
          \ revocation of a DDO by replacing it with an updated DDO. In general, checking\
          \ for key revocation on DLT-based methods is expected to be handled in a\
          \ manner similar to checking the balance of a cryptocurrency account on\
          \ a distributed ledger: if the balance is empty, the entire DID is revoked.\n\
          \n    \n      DID method specifications SHOULD enable support for a quorum\
          \ of trusted parties to enable key recovery. Some of the facilities to do\
          \ so are suggested in section 6.5, Proof of Control. Note that not all DID\
          \ method specifications will recognize control from DIDs registered using\
          \ other DID methods and they MAY restrict third-party control to DIDs that\
          \ use the same method.\n\n    \n      Access control and key recovery in\
          \ a DID method specification MAY also include a time lock feature to protect\
          \ against key compromise by maintaining a second track of control for recovery.\
          \ Further specification of this type of control is a matter for future work\
          \ (see section 11.4).\n\n\n\n\n\n\n"
  Service Endpoint References (Optional):
    count: 2
    mappings:
      da257dc2624e407d305ec25d82ed276a244355599d77477afd3428f0e3e5db2e:
      - major: '8'
        minor: '6'
        term: '8.6'
        title: Service Endpoint References (Optional)
        txt: "\nService Endpoint References (Optional)\n\n\n    \n      In addition\
          \ to publication of cryptographic key material, the other primary purpose\
          \ of DID records is to enable discovery of service endpoints for the identity\
          \ owner. A service endpoint may represent any type of service the identity\
          \ owner wishes to advertise, including decentralized identity management\
          \ services for further discovery, authentication, authorization, or interaction.\n\
          \n    \n      The rules for service endpoints are:\n\n\n\n\nA DDO MAY have\
          \ exactly one property representing service endpoints.\n  \nThe key for\
          \ this property MUST be service.\n  \nThe value of this key MUST be a nested\
          \ JSON object.\n  \nIn this nested JSON object, each property MUST have\
          \ a key\nrepresenting the name of a service established in either the generic\n\
          JSON-LD context (see Appendix B) or a method-specific context\ndefinition.\n\
          \  \nThe value of this key MUST be a valid URI conforming to RFC 3986 \_\
          and normalized\naccording to the rules in section 6 of RFC 3986 \_and to\
          \ any\nnormalization rules in its applicable URI scheme specification.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"service\": {\n\
          \            \"openid\": \"https://openid.example.com/456\",\n         \
          \   \"xdi\": \"https://xdi.example.com/123\"\n        }\n      }\n\n\n\n\
          \n    \n      See sections 9.1 and 9.3 for further security considerations\
          \ regarding authentication service endpoints.\n\n\n\n\n\n"
      f5ffe1a0a533bb0ab0f4ace97bc51d7f70aae899c03ce5265e24835d9f794ca1:
      - major: '8'
        minor: '6'
        term: '8.6'
        title: Service Endpoint References (Optional)
        txt: "\nService Endpoint References (Optional)\n\n\n    \n      In addition\
          \ to publication of cryptographic key material, the other primary purpose\
          \ of DID records is to enable discovery of service endpoints for the identity\
          \ owner. A service endpoint may represent any type of service the identity\
          \ owner wishes to advertise, including decentralized identity management\
          \ services for further discovery, authentication, authorization, or interaction.\n\
          \n    \n      The rules for service endpoints are:\n\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing service endpoints.\n  \n\nThe key\
          \ for this property MUST be service.\n  \n\nThe value of this key MUST be\
          \ a nested JSON object.\n  \n\nIn this nested JSON object, each property\
          \ MUST have a key\nrepresenting the name of a service established in either\
          \ the generic\nJSON-LD context (see Appendix B) or a method-specific context\n\
          definition.\n  \n\nThe value of this key MUST be a valid URI conforming\
          \ to RFC 3986 and normalized\naccording to the rules in section 6 of RFC\
          \ 3986 and to any\nnormalization rules in its applicable URI scheme specification.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"service\": {\n\
          \            \"openid\": \"https://openid.example.com/456\",\n         \
          \   \"xdi\": \"https://xdi.example.com/123\"\n        }\n      }\n\n\n\n\
          \n    \n      See sections 9.1 and 9.3 for further security considerations\
          \ regarding authentication service endpoints.\n\n\n\n\n\n"
      - major: '8'
        minor: '6'
        term: '8.6'
        title: Service Endpoint References (Optional)
        txt: "\nService Endpoint References (Optional)\n\n\n    \n      In addition\
          \ to publication of cryptographic key material, the other primary purpose\
          \ of DID records is to enable discovery of service endpoints for the identity\
          \ owner. A service endpoint may represent any type of service the identity\
          \ owner wishes to advertise, including decentralized identity management\
          \ services for further discovery, authentication, authorization, or interaction.\n\
          \n    \n      The rules for service endpoints are:\n\n\n\n\n\nA DDO MAY\
          \ have exactly one property representing service endpoints.\n  \n\nThe key\
          \ for this property MUST be service.\n  \n\nThe value of this key MUST be\
          \ a nested JSON object.\n  \n\nIn this nested JSON object, each property\
          \ MUST have a key\nrepresenting the name of a service established in either\
          \ the generic\nJSON-LD context (see Appendix B) or a method-specific context\n\
          definition.\n  \n\nThe value of this key MUST be a valid URI conforming\
          \ to RFC 3986 and normalized\naccording to the rules in section 6 of RFC\
          \ 3986 and to any\nnormalization rules in its applicable URI scheme specification.\n\
          \  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"service\": {\n\
          \            \"openid\": \"https://openid.example.com/456\",\n         \
          \   \"xdi\": \"https://xdi.example.com/123\"\n        }\n      }\n\n\n\n\
          \n    \n      See sections 9.1 and 9.3 for further security considerations\
          \ regarding authentication service endpoints.\n\n\n\n\n\n"
  Signature (Optional):
    count: 2
    mappings:
      b7bcb2fdb527947f16b5e30bc12b9f84dcfdfe620ee9bf7e6daeadb45454a8b4:
      - major: '8'
        minor: '9'
        term: '8.9'
        title: Signature (Optional)
        txt: "\nSignature (Optional)\n\n\n    \n      A signature on a DDO is cryptographic\
          \ proof of the integrity of the DDO according to either:\n\n\n\n\nThe identity\
          \ owner as defined in section 6.4, or if not present:\n  \nThe guardian\
          \ as defined in section 6.3.\n  \n\n\n\n    \n      This signature is NOT\
          \ proof of the binding between a DID and a DDO. See section 9.2.\n\n   \
          \ \n      The rules for a signature are:\n\n\n\n\nA DDO MAY have exactly\
          \ one property representing a signature.\n  \nThe key for this property\
          \ MUST be signature.\n  \nThe value of this key MUST be a valid JSON-LD\
          \ signature as defined\nby Linked Data\nSignatures .\n  \n\n\n\n    \n \
          \     Example:\n\n\n\n\n\n      {\n      \"signature\": {\n            \"\
          type\": \"LinkedDataSignature2015\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1ja#keys-1\"\
          ,\n            \"signatureValue\": \"QNB13Y7Q9oLlDLL6AHyL31OE5fLji9DwJSA8qnv81oRaKonij8m+Jv4XdiEYvJ97iRlzKU/92/0LafSL5JftEgl960DLcbqMFxOtbAmFOIMa7eDcrgTL5ytXeYCYKLjHQG3s8a3UKDKRuEK54qK1G5hGKGoLgAVa6xgcDLjW7M19PEJV/c3HpGA7Eez6VFMoTt4yESjZvOXC97xN3KpshOx2HT/btgUbo0XjA1Oi0QHdgrLcUsQGt6w23RjeSToalrsA1G69OFeN2OiQrz9Jb4561hvKLSyWObwRmS6n5Vgr5xkvUm6MONRq0Vg33kXevoVM64KTBkISul61tzjn4w==\"\
          \n        }\n\n\n\n\n      }\n\n\n\n\n"
      fbac2aa05f5126e5ec4e3a3a6aecd836a12c43b72fa917ab4fb61d3ebce6b414:
      - major: '8'
        minor: '9'
        term: '8.9'
        title: Signature (Optional)
        txt: "\nSignature (Optional)\n\n\n    \n      A signature on a DDO is cryptographic\
          \ proof of the integrity of the DDO according to either:\n\n\n\n\n\nThe\
          \ identity owner as defined in section 6.4, or if not present:\n  \n\nThe\
          \ guardian as defined in section 6.3.\n  \n\n\n\n    \n      This signature\
          \ is NOT proof of the binding between a DID and a DDO. See section 9.2.\n\
          \n    \n      The rules for a signature are:\n\n\n\n\n\nA DDO MAY have exactly\
          \ one property representing a signature.\n  \n\nThe key for this property\
          \ MUST be signature.\n  \n\nThe value of this key MUST be a valid JSON-LD\
          \ signature as defined\nby Linked Data\nSignatures .\n  \n\n\n\n    \n \
          \     Example:\n\n\n\n\n\n      {\n      \"signature\": {\n            \"\
          type\": \"LinkedDataSignature2015\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1ja#keys-1\"\
          ,\n            \"signatureValue\": \"QNB13Y7Q9oLlDLL6AHyL31OE5fLji9DwJSA8qnv81oRaKonij8m+Jv4XdiEYvJ97iRlzKU/92/0LafSL5JftEgl960DLcbqMFxOtbAmFOIMa7eDcrgTL5ytXeYCYKLjHQG3s8a3UKDKRuEK54qK1G5hGKGoLgAVa6xgcDLjW7M19PEJV/c3HpGA7Eez6VFMoTt4yESjZvOXC97xN3KpshOx2HT/btgUbo0XjA1Oi0QHdgrLcUsQGt6w23RjeSToalrsA1G69OFeN2OiQrz9Jb4561hvKLSyWObwRmS6n5Vgr5xkvUm6MONRq0Vg33kXevoVM64KTBkISul61tzjn4w==\"\
          \n        }\n\n\n\n\n      }\n\n\n\n\n"
      - major: '8'
        minor: '9'
        term: '8.9'
        title: Signature (Optional)
        txt: "\nSignature (Optional)\n\n\n    \n      A signature on a DDO is cryptographic\
          \ proof of the integrity of the DDO according to either:\n\n\n\n\n\nThe\
          \ identity owner as defined in section 6.4, or if not present:\n  \n\nThe\
          \ guardian as defined in section 6.3.\n  \n\n\n\n    \n      This signature\
          \ is NOT proof of the binding between a DID and a DDO. See section 9.2.\n\
          \n    \n      The rules for a signature are:\n\n\n\n\n\nA DDO MAY have exactly\
          \ one property representing a signature.\n  \n\nThe key for this property\
          \ MUST be signature.\n  \n\nThe value of this key MUST be a valid JSON-LD\
          \ signature as defined\nby Linked Data\nSignatures .\n  \n\n\n\n    \n \
          \     Example:\n\n\n\n\n\n      {\n      \"signature\": {\n            \"\
          type\": \"LinkedDataSignature2015\",\n            \"created\": \"2016-02-08T16:02:20Z\"\
          ,\n            \"creator\": \"did:example:8uQhQMGzWxR8vw5P3UWH1ja#keys-1\"\
          ,\n            \"signatureValue\": \"QNB13Y7Q9oLlDLL6AHyL31OE5fLji9DwJSA8qnv81oRaKonij8m+Jv4XdiEYvJ97iRlzKU/92/0LafSL5JftEgl960DLcbqMFxOtbAmFOIMa7eDcrgTL5ytXeYCYKLjHQG3s8a3UKDKRuEK54qK1G5hGKGoLgAVa6xgcDLjW7M19PEJV/c3HpGA7Eez6VFMoTt4yESjZvOXC97xN3KpshOx2HT/btgUbo0XjA1Oi0QHdgrLcUsQGt6w23RjeSToalrsA1G69OFeN2OiQrz9Jb4561hvKLSyWObwRmS6n5Vgr5xkvUm6MONRq0Vg33kXevoVM64KTBkISul61tzjn4w==\"\
          \n        }\n\n\n\n\n      }\n\n\n\n\n"
  Terminology and Acronyms:
    count: 2
    mappings:
      5165cd78261fdabbcfeab90143d6655a49274eb8fe1a195369ea4c7fc430f587:
      - major: '5'
        minor: '0'
        term: '5.0'
        title: Terminology and Acronyms
        txt: "\nTerminology and Acronyms\n\nThis specification defines the requirements\
          \ of a conformant DID method\nspecification. The key words \"MUST\", \"\
          MUST NOT\", \"REQUIRED\", \"SHALL\",\n  \"SHALL NOT\", \"SHOULD\", \"SHOULD\
          \ NOT\", \"RECOMMENDED\", \"MAY\", and\n  \"OPTIONAL\" in this document\
          \ are to be interpreted as described in\n  RFC 2119 .\n\n\nAll other terms\
          \ used in this specification are defined in this glossary.\n\n\nBlockchain.\
          \ A specific type of distributed ledger technology (DLT) that\nstores ledger\
          \ entries in blocks of transactions that are grouped\ntogether and hashed\
          \ into a cryptographic chain. Because this type of DLT\nwas introduced by\
          \ Bitcoin , the term\n  \"blockchain\" is sometimes used to refer specifically\
          \ to the Bitcoin\nledger.\n\n\nDecentralized identifier (DID). A globally\
          \ unique identifier that does\nnot require a centralized registration authority\
          \ because it is\nregistered with distributed ledger technology or other\
          \ form of\ndecentralized network. The generic format of a DID is defined\
          \ in this\nspecification. A specific DID scheme is defined in a DID method\n\
          specification.\n\n\nDecentralized identity management (DIDM). Identity\n\
          management \_based on decentralized identifiers. DIDM extends\nidentifier\
          \ creation authority beyond the traditional roots of trust\nrequired by\
          \ X.500\ndirectory services , the Domain Name\nSystem , national ID systems,\
          \ etc.\n\n\nDecentralized PKI (DPKI). Public key infrastructure based on\n\
          decentralized identifiers and identity records (e.g., DDOs) containing\n\
          verifiable public key descriptions.\n\n\nDDO. Acronym for DID descriptor\
          \ object.\n\n\nDependent. A person, organization, or thing whose DID record\
          \ is\nregistered and maintained by a guardian because the dependent is not\
          \ in\na position to control the private keys. A dependent becomes an identity\n\
          owner when the dependent takes control of the private keys.\n\n\nDID. Acronym\
          \ for decentralized identifier.\n\n\nDID descriptor object (DDO). A JSON\
          \ data structure containing metadata\ndescribing an identity owner, including\
          \ the cryptographic key material\nrequired for the identity owner to prove\
          \ ownership and control of the\nDID record. A DDO may also contain other\
          \ attributes \_or\n  claims\n  \_describing the identity owner.\n\n\nDID\
          \ fragment. The portion of a DID reference that follows the first hash\n\
          sign character (\"#\"). A DID fragment uses the same syntax as a URI\nfragment.\
          \ See section 5.5. Note that a DID fragment MUST immediately\nfollow a DID.\
          \ If a DID reference includes a DID path followed by a\nfragment, that fragment\
          \ is NOT a DID fragment.\n\n\nDID method. A definition of how a specific\
          \ DID scheme can be implemented\non a specific distributed ledger or network,\
          \ including the precise\nmethod(s) by which DIDs and DDOs can be read, written,\
          \ and revoked.\n\n\nDID method conformance profile. A specification (or\
          \ section of a\nspecification) that defines the rules an implementer must\
          \ follow in\norder to conform with another DID method specification. A conformance\n\
          profile narrows the set of options that may be used in order to meet a\n\
          specific implementation goal.\n\n\nDID method specification. The specification\
          \ for a specific DID scheme\nand DID method that is conformant with the\
          \ requirements of this\nspecification.\n\n\nDID path. The portion of a DID\
          \ reference that follows the first forward\nslash character. A DID path\
          \ uses the identical syntax as a URI path. See\nsection 5.4. Note that if\
          \ a DID path is followed by a fragment, that\nfragment is NOT a DID fragment.\n\
          \n\nDID record. The combination of a DID and a DDO that forms the \"root\n\
          identity record\" for an identity owner. From the standpoint of claims-based\n\
          identity , a DID record is the \u201Cgenesis claim\u201D for an identity.\n\
          \n\nDID reference. A DID plus an optional DID path or DID fragment.\n\n\n\
          DID scheme. The formal syntax of a DID identifier. The generic DID\nscheme\
          \ is defined in this specification. A DID method specification\ndefines\
          \ a specific DID scheme that works with a specific DID method.\n\n\nDIDM.\
          \ Acronym for decentralized identity management.\n\n\nDistributed ledger\
          \ technology (DLT). A distributed\ndatabase \_in which the various nodes\
          \ use a consensus\nprotocol \_to maintain a shared ledger in which each\
          \ transaction is\ncryptographically signed and chained to the previous transaction.\
          \ See\nalso blockchain.\n\n\nDLT. Acronym for distributed ledger technology.\n\
          \n\nDPKI. Acronym for decentralized PKI.\n\n\nGuardian. An identity owner\
          \ who creates a DID record for a dependent who\ndoes not yet have the capacity\
          \ to control the private keys. The\ndependent must rely on the guardian\
          \ to safeguard the private keys until\nthe dependent can assume control\
          \ and become an identity owner.\n\n\nIdentity owner. The natural person,\
          \ party, organization, or thing whose\nidentity is represented by a DID\
          \ record and who directly controls the\nprivate keys to control that record.\
          \ (Note: this specification avoids\nthe term \"user\" since an identity\
          \ owner is not always an individual\nperson.)\n\n\nIdentity record. Another\
          \ name for a DID record.\n\n\nJSON-LD (JSON Linked Data). A method of encoding\
          \ Linked Data \_using JSON.\nThe W3C JSON-LD 1.0\nspecification \_enables\
          \ object properties in a JSON document to be\nlinked to concepts in an RDF\
          \ ontology\n  .\n\n\nKey description. A JSON object contained inside a DDO\
          \ that contains all\nthe metadata necessary to use a public key or verification\
          \ key. A list\nof standard key descriptions is included in Appendix C.\n\
          \n\nLedger. In the context of this specification, a shared database of\n\
          transactions maintained via distributed ledger technology.\n\n\nPKI. Acronym\
          \ for public key\ninfrastructure .\n\n\nRDF (Resource Description Framework).\
          \ A semantic graph model defined by\nthe W3C RDF Working Group\n  .\n\n\n\
          Service endpoint. A network address at which a service operates on\nbehalf\
          \ of an identity owner. Examples of specific DIDM services include\ndiscovery\
          \ services, authentication services, authorization services,\ninteraction\
          \ services, etc. A DIDM service endpoint may also be provided\nby a generalized\
          \ data interchange protocol such as XDI.\n\n\nUUID. Universally Unique Identifier\
          \ as specified by RFC 4122 .\n\n\nURI (Uniform Resource Identifier). The\
          \ official name for all Web\nidentifiers as defined by IETF RFC 3986 . See\
          \ section 1.2.\n\n\nURL (Uniform Resource Locator). Any URI that can be\
          \ resolved or\nde-referenced to locate a specific resource on the Web. See\
          \ section 1.2.\n\n\nURN (Uniform Resource Name). A URI intended to serve\
          \ as a persistent,\nlocation-independent identifier of a resource, i.e.,\
          \ an identifier that\nwill always represent the same resource and never\
          \ change (ideally\nforever). URN syntax is defined by IETF RFC 2141 . In\
          \ general URNs\ncannot directly be resolved or de-referenced to locate the\
          \ resource they\nidentify. See section 1.2.\n\n\nXDI (Extensible Data Interchange)\
          \ (also XRI Data Interchange)\u2014a semantic\ngraph format and semantic\
          \ data interchange protocol defined by the\n  OASIS XDI Technical\nCommittee\
          \ .\n\n\n"
      5a9a391a81d51c9b7e759e521a6e9285b4150f596249b004345ddaefd78aaf1c:
      - major: '5'
        minor: '0'
        term: '5.0'
        title: Terminology and Acronyms
        txt: "\nTerminology and Acronyms\n\nThis specification defines the requirements\
          \ of a conformant DID method\nspecification. The key words \"MUST\", \"\
          MUST NOT\", \"REQUIRED\", \"SHALL\",\n  \"SHALL NOT\", \"SHOULD\", \"SHOULD\
          \ NOT\", \"RECOMMENDED\", \"MAY\", and\n  \"OPTIONAL\" in this document\
          \ are to be interpreted as described in\n  RFC 2119 .\n\n\nAll other terms\
          \ used in this specification are defined in this glossary.\n\n\nBlockchain.\
          \ A specific type of distributed ledger technology (DLT) that\nstores ledger\
          \ entries in blocks of transactions that are grouped\ntogether and hashed\
          \ into a cryptographic chain. Because this type of DLT\nwas introduced by\
          \ Bitcoin , the term\n  \"blockchain\" is sometimes used to refer specifically\
          \ to the Bitcoin\nledger.\n\n\nDecentralized identifier (DID). A globally\
          \ unique identifier that does\nnot require a centralized registration authority\
          \ because it is\nregistered with distributed ledger technology or other\
          \ form of\ndecentralized network. The generic format of a DID is defined\
          \ in this\nspecification. A specific DID scheme is defined in a DID method\n\
          specification.\n\n\nDecentralized identity management (DIDM). Identity\n\
          management based on decentralized identifiers. DIDM extends\nidentifier\
          \ creation authority beyond the traditional roots of trust\nrequired by\
          \ X.500\ndirectory services , the Domain Name\nSystem , national ID systems,\
          \ etc.\n\n\nDecentralized PKI (DPKI). Public key infrastructure based on\n\
          decentralized identifiers and identity records (e.g., DDOs) containing\n\
          verifiable public key descriptions.\n\n\nDDO. Acronym for DID descriptor\
          \ object.\n\n\nDependent. A person, organization, or thing whose DID record\
          \ is\nregistered and maintained by a guardian because the dependent is not\
          \ in\na position to control the private keys. A dependent becomes an identity\n\
          owner when the dependent takes control of the private keys.\n\n\nDID. Acronym\
          \ for decentralized identifier.\n\n\nDID descriptor object (DDO). A JSON\
          \ data structure containing metadata\ndescribing an identity owner, including\
          \ the cryptographic key material\nrequired for the identity owner to prove\
          \ ownership and control of the\nDID record. A DDO may also contain other\
          \ attributes or\n  claims\n  describing the identity owner.\n\n\nDID fragment.\
          \ The portion of a DID reference that follows the first hash\nsign character\
          \ (\"#\"). A DID fragment uses the same syntax as a URI\nfragment. See section\
          \ 5.5. Note that a DID fragment MUST immediately\nfollow a DID. If a DID\
          \ reference includes a DID path followed by a\nfragment, that fragment is\
          \ NOT a DID fragment.\n\n\nDID method. A definition of how a specific DID\
          \ scheme can be implemented\non a specific distributed ledger or network,\
          \ including the precise\nmethod(s) by which DIDs and DDOs can be read, written,\
          \ and revoked.\n\n\nDID method conformance profile. A specification (or\
          \ section of a\nspecification) that defines the rules an implementer must\
          \ follow in\norder to conform with another DID method specification. A conformance\n\
          profile narrows the set of options that may be used in order to meet a\n\
          specific implementation goal.\n\n\nDID method specification. The specification\
          \ for a specific DID scheme\nand DID method that is conformant with the\
          \ requirements of this\nspecification.\n\n\nDID path. The portion of a DID\
          \ reference that follows the first forward\nslash character. A DID path\
          \ uses the identical syntax as a URI path. See\nsection 5.4. Note that if\
          \ a DID path is followed by a fragment, that\nfragment is NOT a DID fragment.\n\
          \n\nDID record. The combination of a DID and a DDO that forms the \"root\n\
          identity record\" for an identity owner. From the standpoint of claims-based\n\
          identity , a DID record is the \u201Cgenesis claim\u201D for an identity.\n\
          \n\nDID reference. A DID plus an optional DID path or DID fragment.\n\n\n\
          DID scheme. The formal syntax of a DID identifier. The generic DID\nscheme\
          \ is defined in this specification. A DID method specification\ndefines\
          \ a specific DID scheme that works with a specific DID method.\n\n\nDIDM.\
          \ Acronym for decentralized identity management.\n\n\nDistributed ledger\
          \ technology (DLT). A distributed\ndatabase in which the various nodes use\
          \ a consensus\nprotocol to maintain a shared ledger in which each transaction\
          \ is\ncryptographically signed and chained to the previous transaction.\
          \ See\nalso blockchain.\n\n\nDLT. Acronym for distributed ledger technology.\n\
          \n\nDPKI. Acronym for decentralized PKI.\n\n\nGuardian. An identity owner\
          \ who creates a DID record for a dependent who\ndoes not yet have the capacity\
          \ to control the private keys. The\ndependent must rely on the guardian\
          \ to safeguard the private keys until\nthe dependent can assume control\
          \ and become an identity owner.\n\n\nIdentity owner. The natural person,\
          \ party, organization, or thing whose\nidentity is represented by a DID\
          \ record and who directly controls the\nprivate keys to control that record.\
          \ (Note: this specification avoids\nthe term \"user\" since an identity\
          \ owner is not always an individual\nperson.)\n\n\nIdentity record. Another\
          \ name for a DID record.\n\n\nJSON-LD (JSON Linked Data). A method of encoding\
          \ Linked Data using JSON.\nThe W3C JSON-LD 1.0\nspecification enables object\
          \ properties in a JSON document to be\nlinked to concepts in an RDF ontology\n\
          \  .\n\n\nKey description. A JSON object contained inside a DDO that contains\
          \ all\nthe metadata necessary to use a public key or verification key. A\
          \ list\nof standard key descriptions is included in Appendix C.\n\n\nLedger.\
          \ In the context of this specification, a shared database of\ntransactions\
          \ maintained via distributed ledger technology.\n\n\nPKI. Acronym for public\
          \ key\ninfrastructure .\n\n\nRDF (Resource Description Framework). A semantic\
          \ graph model defined by\nthe W3C RDF Working Group\n  .\n\n\nService endpoint.\
          \ A network address at which a service operates on\nbehalf of an identity\
          \ owner. Examples of specific DIDM services include\ndiscovery services,\
          \ authentication services, authorization services,\ninteraction services,\
          \ etc. A DIDM service endpoint may also be provided\nby a generalized data\
          \ interchange protocol such as XDI.\n\n\nUUID. Universally Unique Identifier\
          \ as specified by RFC 4122 .\n\n\nURI (Uniform Resource Identifier). The\
          \ official name for all Web\nidentifiers as defined by IETF RFC 3986 . See\
          \ section 1.2.\n\n\nURL (Uniform Resource Locator). Any URI that can be\
          \ resolved or\nde-referenced to locate a specific resource on the Web. See\
          \ section 1.2.\n\n\nURN (Uniform Resource Name). A URI intended to serve\
          \ as a persistent,\nlocation-independent identifier of a resource, i.e.,\
          \ an identifier that\nwill always represent the same resource and never\
          \ change (ideally\nforever). URN syntax is defined by IETF RFC 2141 . In\
          \ general URNs\ncannot directly be resolved or de-referenced to locate the\
          \ resource they\nidentify. See section 1.2.\n\n\nXDI (Extensible Data Interchange)\
          \ (also XRI Data Interchange)\u2014a semantic\ngraph format and semantic\
          \ data interchange protocol defined by the\n  OASIS XDI Technical\nCommittee\
          \ .\n\n\n"
      - major: '5'
        minor: '0'
        term: '5.0'
        title: Terminology and Acronyms
        txt: "\nTerminology and Acronyms\n\nThis specification defines the requirements\
          \ of a conformant DID method\nspecification. The key words \"MUST\", \"\
          MUST NOT\", \"REQUIRED\", \"SHALL\",\n  \"SHALL NOT\", \"SHOULD\", \"SHOULD\
          \ NOT\", \"RECOMMENDED\", \"MAY\", and\n  \"OPTIONAL\" in this document\
          \ are to be interpreted as described in\n  RFC 2119 .\n\n\nAll other terms\
          \ used in this specification are defined in this glossary.\n\n\nBlockchain.\
          \ A specific type of distributed ledger technology (DLT) that\nstores ledger\
          \ entries in blocks of transactions that are grouped\ntogether and hashed\
          \ into a cryptographic chain. Because this type of DLT\nwas introduced by\
          \ Bitcoin , the term\n  \"blockchain\" is sometimes used to refer specifically\
          \ to the Bitcoin\nledger.\n\n\nDecentralized identifier (DID). A globally\
          \ unique identifier that does\nnot require a centralized registration authority\
          \ because it is\nregistered with distributed ledger technology or other\
          \ form of\ndecentralized network. The generic format of a DID is defined\
          \ in this\nspecification. A specific DID scheme is defined in a DID method\n\
          specification.\n\n\nDecentralized identity management (DIDM). Identity\n\
          management based on decentralized identifiers. DIDM extends\nidentifier\
          \ creation authority beyond the traditional roots of trust\nrequired by\
          \ X.500\ndirectory services , the Domain Name\nSystem , national ID systems,\
          \ etc.\n\n\nDecentralized PKI (DPKI). Public key infrastructure based on\n\
          decentralized identifiers and identity records (e.g., DDOs) containing\n\
          verifiable public key descriptions.\n\n\nDDO. Acronym for DID descriptor\
          \ object.\n\n\nDependent. A person, organization, or thing whose DID record\
          \ is\nregistered and maintained by a guardian because the dependent is not\
          \ in\na position to control the private keys. A dependent becomes an identity\n\
          owner when the dependent takes control of the private keys.\n\n\nDID. Acronym\
          \ for decentralized identifier.\n\n\nDID descriptor object (DDO). A JSON\
          \ data structure containing metadata\ndescribing an identity owner, including\
          \ the cryptographic key material\nrequired for the identity owner to prove\
          \ ownership and control of the\nDID record. A DDO may also contain other\
          \ attributes or\n  claims\n  describing the identity owner.\n\n\nDID fragment.\
          \ The portion of a DID reference that follows the first hash\nsign character\
          \ (\"#\"). A DID fragment uses the same syntax as a URI\nfragment. See section\
          \ 5.5. Note that a DID fragment MUST immediately\nfollow a DID. If a DID\
          \ reference includes a DID path followed by a\nfragment, that fragment is\
          \ NOT a DID fragment.\n\n\nDID method. A definition of how a specific DID\
          \ scheme can be implemented\non a specific distributed ledger or network,\
          \ including the precise\nmethod(s) by which DIDs and DDOs can be read, written,\
          \ and revoked.\n\n\nDID method conformance profile. A specification (or\
          \ section of a\nspecification) that defines the rules an implementer must\
          \ follow in\norder to conform with another DID method specification. A conformance\n\
          profile narrows the set of options that may be used in order to meet a\n\
          specific implementation goal.\n\n\nDID method specification. The specification\
          \ for a specific DID scheme\nand DID method that is conformant with the\
          \ requirements of this\nspecification.\n\n\nDID path. The portion of a DID\
          \ reference that follows the first forward\nslash character. A DID path\
          \ uses the identical syntax as a URI path. See\nsection 5.4. Note that if\
          \ a DID path is followed by a fragment, that\nfragment is NOT a DID fragment.\n\
          \n\nDID record. The combination of a DID and a DDO that forms the \"root\n\
          identity record\" for an identity owner. From the standpoint of claims-based\n\
          identity , a DID record is the \u201Cgenesis claim\u201D for an identity.\n\
          \n\nDID reference. A DID plus an optional DID path or DID fragment.\n\n\n\
          DID scheme. The formal syntax of a DID identifier. The generic DID\nscheme\
          \ is defined in this specification. A DID method specification\ndefines\
          \ a specific DID scheme that works with a specific DID method.\n\n\nDIDM.\
          \ Acronym for decentralized identity management.\n\n\nDistributed ledger\
          \ technology (DLT). A distributed\ndatabase in which the various nodes use\
          \ a consensus\nprotocol to maintain a shared ledger in which each transaction\
          \ is\ncryptographically signed and chained to the previous transaction.\
          \ See\nalso blockchain.\n\n\nDLT. Acronym for distributed ledger technology.\n\
          \n\nDPKI. Acronym for decentralized PKI.\n\n\nGuardian. An identity owner\
          \ who creates a DID record for a dependent who\ndoes not yet have the capacity\
          \ to control the private keys. The\ndependent must rely on the guardian\
          \ to safeguard the private keys until\nthe dependent can assume control\
          \ and become an identity owner.\n\n\nIdentity owner. The natural person,\
          \ party, organization, or thing whose\nidentity is represented by a DID\
          \ record and who directly controls the\nprivate keys to control that record.\
          \ (Note: this specification avoids\nthe term \"user\" since an identity\
          \ owner is not always an individual\nperson.)\n\n\nIdentity record. Another\
          \ name for a DID record.\n\n\nJSON-LD (JSON Linked Data). A method of encoding\
          \ Linked Data using JSON.\nThe W3C JSON-LD 1.0\nspecification enables object\
          \ properties in a JSON document to be\nlinked to concepts in an RDF ontology\n\
          \  .\n\n\nKey description. A JSON object contained inside a DDO that contains\
          \ all\nthe metadata necessary to use a public key or verification key. A\
          \ list\nof standard key descriptions is included in Appendix C.\n\n\nLedger.\
          \ In the context of this specification, a shared database of\ntransactions\
          \ maintained via distributed ledger technology.\n\n\nPKI. Acronym for public\
          \ key\ninfrastructure .\n\n\nRDF (Resource Description Framework). A semantic\
          \ graph model defined by\nthe W3C RDF Working Group\n  .\n\n\nService endpoint.\
          \ A network address at which a service operates on\nbehalf of an identity\
          \ owner. Examples of specific DIDM services include\ndiscovery services,\
          \ authentication services, authorization services,\ninteraction services,\
          \ etc. A DIDM service endpoint may also be provided\nby a generalized data\
          \ interchange protocol such as XDI.\n\n\nUUID. Universally Unique Identifier\
          \ as specified by RFC 4122 .\n\n\nURI (Uniform Resource Identifier). The\
          \ official name for all Web\nidentifiers as defined by IETF RFC 3986 . See\
          \ section 1.2.\n\n\nURL (Uniform Resource Locator). Any URI that can be\
          \ resolved or\nde-referenced to locate a specific resource on the Web. See\
          \ section 1.2.\n\n\nURN (Uniform Resource Name). A URI intended to serve\
          \ as a persistent,\nlocation-independent identifier of a resource, i.e.,\
          \ an identifier that\nwill always represent the same resource and never\
          \ change (ideally\nforever). URN syntax is defined by IETF RFC 2141 . In\
          \ general URNs\ncannot directly be resolved or de-referenced to locate the\
          \ resource they\nidentify. See section 1.2.\n\n\nXDI (Extensible Data Interchange)\
          \ (also XRI Data Interchange)\u2014a semantic\ngraph format and semantic\
          \ data interchange protocol defined by the\n  OASIS XDI Technical\nCommittee\
          \ .\n\n\n"
  The Generic DID Scheme:
    count: 2
    mappings:
      16f6df6866c25da8f07603f789e92b2b3ea03c1112ceda3bbec4c96ff7316a33:
      - major: '7'
        minor: '1'
        term: '7.1'
        title: The Generic DID Scheme
        txt: "\nThe Generic DID Scheme\n\nThe generic DID scheme is a URI scheme conformant\
          \ with RFC 3986 . It consists of a\nDID followed by an optional path and/or\
          \ fragment. The term DID refers\nonly to the identifier conforming to the\
          \ did rule in the ABNF below;\nwhen used alone, it does not include a path\
          \ or fragment. A DID that may\noptionally include a path and/or fragment\
          \ is called a DID reference.\n\n\nFollowing is the ABNF definition using\
          \ the syntax in RFC 5234 \_(which defines ALPHA\nas upper or lowercase A-Z).\n\
          \n\n      did-reference      = did [ \"/\" did-path ] [ \"#\" did-fragment\
          \ ]did                = \"did:\" method \":\" specific-idstring        \
          \          method             = 1*methodcharmethodchar         = %x61-7A\
          \ / DIGITspecific-idstring  = idstring *( \":\" idstring )idstring     \
          \      = 1*idcharidchar             = ALPHA / DIGIT / \".\" / \"-\"\n\n\n\
          \nSee sections 5.3 and 5.4 for the ABNF rules defining DID paths and\nfragments.\n\
          \n\n"
      d71606e6ae99723891cfa6933d53889fca867f766670891ae312cf3003a4ed26:
      - major: '7'
        minor: '1'
        term: '7.1'
        title: The Generic DID Scheme
        txt: "\nThe Generic DID Scheme\n\nThe generic DID scheme is a URI scheme conformant\
          \ with RFC 3986 . It consists of a\nDID followed by an optional path and/or\
          \ fragment. The term DID refers\nonly to the identifier conforming to the\
          \ did rule in the ABNF below;\nwhen used alone, it does not include a path\
          \ or fragment. A DID that may\noptionally include a path and/or fragment\
          \ is called a DID reference.\n\n\nFollowing is the ABNF definition using\
          \ the syntax in RFC 5234 (which defines ALPHA\nas upper or lowercase A-Z).\n\
          \n\n  did-reference      = did [ \"/\" did-path ] [ \"#\" did-fragment ]\n\
          \  did                = \"did:\" method \":\" specific-idstring\n  method\
          \             = 1*methodcharmethodchar         = %x61-7A / DIGIT\n  specific-idstring\
          \  = idstring *( \":\" idstring )\n  idstring           = 1*idcharidchar\
          \             = ALPHA / DIGIT / \".\" / \"-\"\n\n\nSee sections 5.3 and\
          \ 5.4 for the ABNF rules defining DID paths and\nfragments.\n\n\n"
      - major: '7'
        minor: '1'
        term: '7.1'
        title: The Generic DID Scheme
        txt: "\nThe Generic DID Scheme\n\nThe generic DID scheme is a URI scheme conformant\
          \ with RFC 3986 . It consists of a\nDID followed by an optional path and/or\
          \ fragment. The term DID refers\nonly to the identifier conforming to the\
          \ did rule in the ABNF below;\nwhen used alone, it does not include a path\
          \ or fragment. A DID that may\noptionally include a path and/or fragment\
          \ is called a DID reference.\n\n\nFollowing is the ABNF definition using\
          \ the syntax in RFC 5234 (which defines ALPHA\nas upper or lowercase A-Z).\n\
          \n\n  did-reference      = did [ \"/\" did-path ] [ \"#\" did-fragment ]\n\
          \  did                = \"did:\" method \":\" specific-idstring\n  method\
          \             = 1*methodcharmethodchar         = %x61-7A / DIGIT\n  specific-idstring\
          \  = idstring *( \":\" idstring )\n  idstring           = 1*idcharidchar\
          \             = ALPHA / DIGIT / \".\" / \"-\"\n\n\nSee sections 5.3 and\
          \ 5.4 for the ABNF rules defining DID paths and\nfragments.\n\n\n"
  URIs, URLs, and URNs:
    count: 2
    mappings:
      b5ef6275ca9780c66cdaaf6d31a5ec3990f8f3261daf15428783eea7091959d3:
      - major: '3'
        minor: '2'
        term: '3.2'
        title: URIs, URLs, and URNs
        txt: "\nURIs, URLs, and URNs\n\nDIDs have a foundation in URIs, so it's important\
          \ to understand how the\nW3C clarified\n  the terms URI (Uniform Resource\
          \ Identifier), URL (Uniform Resource\nLocator), and URN (Uniform Resource\
          \ Name) in September 2001. The key\ndifference between these three categories\
          \ of identifiers are:\n\n\n\nURI is the term for any type of identifier\
          \ used to identify a\nresource on the Web.\n  \n\nURL is the term for any\
          \ type of URI that can be resolved or\nde-referenced to locate a representation\
          \ of a resource on the Web (e.g.,\nWeb page, file, image, etc.)\n  \n\n\
          URN is the term for a specific type of URI intended to persistently\nidentify\
          \ a resource, i.e., an identifier that will never change no\nmatter how\
          \ often the resource moves, changes names, changes owners, etc.\nURNs are\
          \ intended to last forever.\n  \n\n\n"
      - major: '3'
        minor: '2'
        term: '3.2'
        title: URIs, URLs, and URNs
        txt: "\nURIs, URLs, and URNs\n\nDIDs have a foundation in URIs, so it's important\
          \ to understand how the\nW3C clarified\n  the terms URI (Uniform Resource\
          \ Identifier), URL (Uniform Resource\nLocator), and URN (Uniform Resource\
          \ Name) in September 2001. The key\ndifference between these three categories\
          \ of identifiers are:\n\n\n\nURI is the term for any type of identifier\
          \ used to identify a\nresource on the Web.\n  \n\nURL is the term for any\
          \ type of URI that can be resolved or\nde-referenced to locate a representation\
          \ of a resource on the Web (e.g.,\nWeb page, file, image, etc.)\n  \n\n\
          URN is the term for a specific type of URI intended to persistently\nidentify\
          \ a resource, i.e., an identifier that will never change no\nmatter how\
          \ often the resource moves, changes names, changes owners, etc.\nURNs are\
          \ intended to last forever.\n  \n\n\n"
      da79d1b3d3c083114edc4199c9503265a49bf6920ce5caa832caba10234e89e3:
      - major: '3'
        minor: '2'
        term: '3.2'
        title: URIs, URLs, and URNs
        txt: "\nURIs, URLs, and URNs\n\nDIDs have a foundation in URIs, so it's important\
          \ to understand how the\nW3C clarified\n  \_the terms URI (Uniform Resource\
          \ Identifier), URL (Uniform Resource\nLocator), and URN (Uniform Resource\
          \ Name) in September 2001. The key\ndifference between these three categories\
          \ of identifiers are:\n\n\nURI is the term for any type of identifier used\
          \ to identify a\nresource on the Web.\n  \nURL is the term for any type\
          \ of URI that can be resolved or\nde-referenced to locate a representation\
          \ of a resource on the Web (e.g.,\nWeb page, file, image, etc.)\n  \nURN\
          \ is the term for a specific type of URI intended to persistently\nidentify\
          \ a resource, i.e., an identifier that will never change no\nmatter how\
          \ often the resource moves, changes names, changes owners, etc.\nURNs are\
          \ intended to last forever.\n  \n\n\n"
  Updated (Optional):
    count: 2
    mappings:
      082d3aceab1c1eec23fbb21f165984341bc4b60565eeefba29b5ec936f44834a:
      - major: '8'
        minor: '8'
        term: '8.8'
        title: Updated (Optional)
        txt: "\nUpdated (Optional)\n\n\n    \n      Standard metadata for identity\
          \ records includes a timestamp of the most recent change. The rules for\
          \ including a updated timestamp are:\n\n\n\n\nA DDO MUST have zero or one\
          \ property representing an updated\ntimestamp. It is RECOMMENDED to include\
          \ this property.\n  \nThe key for this property MUST be updated.\n  \nThe\
          \ value of this key MUST follow the formatting rules (3, 4, 5)\nfrom section\
          \ 6.7.\n  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n      \"updated\"\
          : \"2016-10-17T02:41:00Z\"\n      }\n\n\n\n\n\n\n\n\n"
      5180d81ae015157c7f540b03ec3c96fa3ab3f4b255d2c09e928dd092aaf712c9:
      - major: '8'
        minor: '8'
        term: '8.8'
        title: Updated (Optional)
        txt: "\nUpdated (Optional)\n\n\n    \n      Standard metadata for identity\
          \ records includes a timestamp of the most recent change. The rules for\
          \ including a updated timestamp are:\n\n\n\n\n\nA DDO MUST have zero or\
          \ one property representing an updated\ntimestamp. It is RECOMMENDED to\
          \ include this property.\n  \n\nThe key for this property MUST be updated.\n\
          \  \n\nThe value of this key MUST follow the formatting rules (3, 4, 5)\n\
          from section 6.7.\n  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n \
          \     \"updated\": \"2016-10-17T02:41:00Z\"\n      }\n\n\n\n\n\n\n\n\n"
      - major: '8'
        minor: '8'
        term: '8.8'
        title: Updated (Optional)
        txt: "\nUpdated (Optional)\n\n\n    \n      Standard metadata for identity\
          \ records includes a timestamp of the most recent change. The rules for\
          \ including a updated timestamp are:\n\n\n\n\n\nA DDO MUST have zero or\
          \ one property representing an updated\ntimestamp. It is RECOMMENDED to\
          \ include this property.\n  \n\nThe key for this property MUST be updated.\n\
          \  \n\nThe value of this key MUST follow the formatting rules (3, 4, 5)\n\
          from section 6.7.\n  \n\n\n\n    \n      Example:\n\n\n\n\n\n      {\n \
          \     \"updated\": \"2016-10-17T02:41:00Z\"\n      }\n\n\n\n\n\n\n\n\n"
  Verifiable Claims:
    count: 2
    mappings:
      22f8ded8c00508127429223358ae5b27e6b13c71f8a9f72e8994d630fa45245b:
      - major: '13'
        minor: '6'
        term: '13.6'
        title: Verifiable Claims
        txt: "\nVerifiable Claims\n\n\n      Although DIDs and DDOs form a foundation\
          \ for decentralized identity, they are only the first step in describing\
          \ an identity owner. The rest of the descriptive power comes through collecting\
          \ and selectively using\n        verifiable claims\n      . Future versions\
          \ of the specification will describe in more detail how DIDs and DDO can\
          \ be integrated with\u2014and help enable\u2014the verifiable claims ecosystem.\n\
          \n\n\n\n\n"
      - major: '13'
        minor: '6'
        term: '13.6'
        title: Verifiable Claims
        txt: "\nVerifiable Claims\n\n\n      Although DIDs and DDOs form a foundation\
          \ for decentralized identity, they are only the first step in describing\
          \ an identity owner. The rest of the descriptive power comes through collecting\
          \ and selectively using\n        verifiable claims\n      . Future versions\
          \ of the specification will describe in more detail how DIDs and DDO can\
          \ be integrated with\u2014and help enable\u2014the verifiable claims ecosystem.\n\
          \n\n\n\n\n"
      380ba5c9a23681a9447faaf9e52131489797a249d34b6fcca816afbbf20e34e0:
      - major: '13'
        minor: '6'
        term: '13.6'
        title: Verifiable Claims
        txt: "\nVerifiable Claims\n\n\n    \n      Although DIDs and DDOs form a foundation\
          \ for decentralized identity, they are only the first step in describing\
          \ an identity owner. The rest of the descriptive power comes through collecting\
          \ and selectively using\n        verifiable claims\n      . Future versions\
          \ of the specification will describe in more detail how DIDs and DDO can\
          \ be integrated with\u2014and help enable\u2014the verifiable claims ecosystem.\n\
          \n\n\n\n\n"
3:
  Alternate Serializations and Graph Models:
    count: 3
    mappings:
      87eba64d05f133a093f8b78a6e2e2005c03a4292dd6d0d62341ea853368070dc:
      - major: '13'
        minor: '7'
        term: '13.7'
        title: Alternate Serializations and Graph Models
        txt: "\nAlternate Serializations and Graph Models\n\n\n    \n      This version\
          \ of the specification relies on JSON-LD and the RDF graph model for expressing\
          \ a DDO. Future versions of this specification MAY specify other semantic\
          \ graph formats for a DDO, such as JXD (JSON XDI Data), a serialization\
          \ format for the XDI graph model as defined by the\n        OASIS XDI Core\
          \ 1.0 specification\n      .\n\n\n\n\n\n"
      - major: '13'
        minor: '7'
        term: '13.7'
        title: Alternate Serializations and Graph Models
        txt: "\nAlternate Serializations and Graph Models\n\n\n    \n      This version\
          \ of the specification relies on JSON-LD and the RDF graph model for expressing\
          \ a DDO. Future versions of this specification MAY specify other semantic\
          \ graph formats for a DDO, such as JXD (JSON XDI Data), a serialization\
          \ format for the XDI graph model as defined by the\n        OASIS XDI Core\
          \ 1.0 specification\n      .\n\n\n\n\n\n"
      - major: '13'
        minor: '7'
        term: '13.7'
        title: Alternate Serializations and Graph Models
        txt: "\nAlternate Serializations and Graph Models\n\n\n    \n      This version\
          \ of the specification relies on JSON-LD and the RDF graph model for expressing\
          \ a DDO. Future versions of this specification MAY specify other semantic\
          \ graph formats for a DDO, such as JXD (JSON XDI Data), a serialization\
          \ format for the XDI graph model as defined by the\n        OASIS XDI Core\
          \ 1.0 specification\n      .\n\n\n\n\n\n"
  Authentication Service Endpoints:
    count: 3
    mappings:
      cd967ee2911f485b270f0f80dcb1ecdb8e60bd93f23d27b3ce12adacd5310de6:
      - major: '11'
        minor: '3'
        term: '11.3'
        title: Authentication Service Endpoints
        txt: "\nAuthentication Service Endpoints\n\n\n    \n      If a DDO publishes\
          \ a service endpoint intended for authentication or authorization of an\
          \ identity owner (section 6.6), it is the responsibility of the service\
          \ endpoint provider, identity owner, and/or relying party to comply with\
          \ the requirements of the authentication protocol(s) supported at that service\
          \ endpoint.\n\n\n\n\n\n"
      - major: '11'
        minor: '3'
        term: '11.3'
        title: Authentication Service Endpoints
        txt: "\nAuthentication Service Endpoints\n\n\n    \n      If a DDO publishes\
          \ a service endpoint intended for authentication or authorization of an\
          \ identity owner (section 6.6), it is the responsibility of the service\
          \ endpoint provider, identity owner, and/or relying party to comply with\
          \ the requirements of the authentication protocol(s) supported at that service\
          \ endpoint.\n\n\n\n\n\n"
      - major: '11'
        minor: '3'
        term: '11.3'
        title: Authentication Service Endpoints
        txt: "\nAuthentication Service Endpoints\n\n\n    \n      If a DDO publishes\
          \ a service endpoint intended for authentication or authorization of an\
          \ identity owner (section 6.6), it is the responsibility of the service\
          \ endpoint provider, identity owner, and/or relying party to comply with\
          \ the requirements of the authentication protocol(s) supported at that service\
          \ endpoint.\n\n\n\n\n\n"
  DDO Correlation Risks:
    count: 3
    mappings:
      22c072db94f82adf2835d34cc382ad6b133f37fab6ec975c49af77a9d1f17c32:
      - major: '12'
        minor: '4'
        term: '12.4'
        title: DDO Correlation Risks
        txt: "\nDDO Correlation Risks\n\n\n    \n      The anti-correlation protections\
          \ of pseudonymous DIDs are easily defeated if the data in the corresponding\
          \ DDOs can be correlated. For example, using same public key descriptions\
          \ or bespoke service endpoints in multiple DDOs can provide as much correlation\
          \ information as using the same DID. Therefore the DDO for a pseudonymous\
          \ DID SHOULD also use pairwise-unique public keys and pairwise-unique service\
          \ endpoints.\n\n\n\n\n\n"
      - major: '12'
        minor: '4'
        term: '12.4'
        title: DDO Correlation Risks
        txt: "\nDDO Correlation Risks\n\n\n    \n      The anti-correlation protections\
          \ of pseudonymous DIDs are easily defeated if the data in the corresponding\
          \ DDOs can be correlated. For example, using same public key descriptions\
          \ or bespoke service endpoints in multiple DDOs can provide as much correlation\
          \ information as using the same DID. Therefore the DDO for a pseudonymous\
          \ DID SHOULD also use pairwise-unique public keys and pairwise-unique service\
          \ endpoints.\n\n\n\n\n\n"
      - major: '12'
        minor: '4'
        term: '12.4'
        title: DDO Correlation Risks
        txt: "\nDDO Correlation Risks\n\n\n    \n      The anti-correlation protections\
          \ of pseudonymous DIDs are easily defeated if the data in the corresponding\
          \ DDOs can be correlated. For example, using same public key descriptions\
          \ or bespoke service endpoints in multiple DDOs can provide as much correlation\
          \ information as using the same DID. Therefore the DDO for a pseudonymous\
          \ DID SHOULD also use pairwise-unique public keys and pairwise-unique service\
          \ endpoints.\n\n\n\n\n\n"
  DID Correlation Risks and Pseudonymous DIDs:
    count: 3
    mappings:
      889956c1f439d7ea9523c8ac6c1c4526d100ebdfdbdcc336645de95755b8b1a8:
      - major: '12'
        minor: '3'
        term: '12.3'
        title: DID Correlation Risks and Pseudonymous DIDs
        txt: "\nDID Correlation Risks and Pseudonymous DIDs\n\n\n    \n      Like\
          \ any type of globally unique identifier, DIDs may be used for correlation.\
          \ Identity owners can mitigate this privacy risk by using pairwise unique\
          \ DIDs, i.e., by sharing a different private DID for every relationship.\
          \ In effect, each DID acts as a pseudonym. A pseudonymous DID need only\
          \ be shared with more than one party when the identity owner explicitly\
          \ authorizes correlation between those parties.\n\n    \n      If pseudonymous\
          \ DIDs are the default, then the only need for a public DID\u2014a DID published\
          \ openly or shared with a large number of parties\u2014is when the identity\
          \ owner explicitly desires public identification.\n\n\n\n\n\n"
      - major: '12'
        minor: '3'
        term: '12.3'
        title: DID Correlation Risks and Pseudonymous DIDs
        txt: "\nDID Correlation Risks and Pseudonymous DIDs\n\n\n    \n      Like\
          \ any type of globally unique identifier, DIDs may be used for correlation.\
          \ Identity owners can mitigate this privacy risk by using pairwise unique\
          \ DIDs, i.e., by sharing a different private DID for every relationship.\
          \ In effect, each DID acts as a pseudonym. A pseudonymous DID need only\
          \ be shared with more than one party when the identity owner explicitly\
          \ authorizes correlation between those parties.\n\n    \n      If pseudonymous\
          \ DIDs are the default, then the only need for a public DID\u2014a DID published\
          \ openly or shared with a large number of parties\u2014is when the identity\
          \ owner explicitly desires public identification.\n\n\n\n\n\n"
      - major: '12'
        minor: '3'
        term: '12.3'
        title: DID Correlation Risks and Pseudonymous DIDs
        txt: "\nDID Correlation Risks and Pseudonymous DIDs\n\n\n    \n      Like\
          \ any type of globally unique identifier, DIDs may be used for correlation.\
          \ Identity owners can mitigate this privacy risk by using pairwise unique\
          \ DIDs, i.e., by sharing a different private DID for every relationship.\
          \ In effect, each DID acts as a pseudonym. A pseudonymous DID need only\
          \ be shared with more than one party when the identity owner explicitly\
          \ authorizes correlation between those parties.\n\n    \n      If pseudonymous\
          \ DIDs are the default, then the only need for a public DID\u2014a DID published\
          \ openly or shared with a large number of parties\u2014is when the identity\
          \ owner explicitly desires public identification.\n\n\n\n\n\n"
  DID Fragments:
    count: 3
    mappings:
      31457fd4114cf47ec4e7864120520deeca4a87ea74f859a1f4b8efef04b9dd84:
      - major: '7'
        minor: '4'
        term: '7.4'
        title: DID Fragments
        txt: "\nDID Fragments\n\nA generic DID fragment (the did-fragment rule in\
          \ section 5.1) is\nidentical to a URI fragment and MUST conform to the ABNF\
          \ of the fragment\nABNF rule in RFC 3986\n  . A DID fragment MUST be used\
          \ only as a method-independent pointer into\nthe DDO to identify a unique\
          \ key description or other DDO component. To\nresolve this pointer, the\
          \ complete DID reference including the DID\nfragment MUST be used as the\
          \ value of the id key for the target JSON\nobject.\n\n\nA specific DID scheme\
          \ MAY specify ABNF rules for DID fragments that are\nmore restrictive than\
          \ the generic rules in this section.\n\n\n"
      - major: '7'
        minor: '4'
        term: '7.4'
        title: DID Fragments
        txt: "\nDID Fragments\n\nA generic DID fragment (the did-fragment rule in\
          \ section 5.1) is\nidentical to a URI fragment and MUST conform to the ABNF\
          \ of the fragment\nABNF rule in RFC 3986\n  . A DID fragment MUST be used\
          \ only as a method-independent pointer into\nthe DDO to identify a unique\
          \ key description or other DDO component. To\nresolve this pointer, the\
          \ complete DID reference including the DID\nfragment MUST be used as the\
          \ value of the id key for the target JSON\nobject.\n\n\nA specific DID scheme\
          \ MAY specify ABNF rules for DID fragments that are\nmore restrictive than\
          \ the generic rules in this section.\n\n\n"
      - major: '7'
        minor: '4'
        term: '7.4'
        title: DID Fragments
        txt: "\nDID Fragments\n\nA generic DID fragment (the did-fragment rule in\
          \ section 5.1) is\nidentical to a URI fragment and MUST conform to the ABNF\
          \ of the fragment\nABNF rule in RFC 3986\n  . A DID fragment MUST be used\
          \ only as a method-independent pointer into\nthe DDO to identify a unique\
          \ key description or other DDO component. To\nresolve this pointer, the\
          \ complete DID reference including the DID\nfragment MUST be used as the\
          \ value of the id key for the target JSON\nobject.\n\n\nA specific DID scheme\
          \ MAY specify ABNF rules for DID fragments that are\nmore restrictive than\
          \ the generic rules in this section.\n\n\n"
  DID Paths:
    count: 3
    mappings:
      cd5428ab24acee4df2f7edf65fce8c6d856c99daafa14a10a5926a8a29405d81:
      - major: '7'
        minor: '3'
        term: '7.3'
        title: DID Paths
        txt: "\nDID Paths\n\nA generic DID path (the did-path rule in section 5.1)\
          \ is identical to a\nURI path and MUST conform to the ABNF of the path-rootless\
          \ ABNF rule in\n  RFC 3986 . A DID path\nSHOULD be used to address resources\
          \ available via a DID service\nendpoint. See section 6.6.\n\n\nA specific\
          \ DID scheme MAY specify ABNF rules for DID paths that are more\nrestrictive\
          \ than the generic rules in this section.\n\n\n"
      - major: '7'
        minor: '3'
        term: '7.3'
        title: DID Paths
        txt: "\nDID Paths\n\nA generic DID path (the did-path rule in section 5.1)\
          \ is identical to a\nURI path and MUST conform to the ABNF of the path-rootless\
          \ ABNF rule in\n  RFC 3986 . A DID path\nSHOULD be used to address resources\
          \ available via a DID service\nendpoint. See section 6.6.\n\n\nA specific\
          \ DID scheme MAY specify ABNF rules for DID paths that are more\nrestrictive\
          \ than the generic rules in this section.\n\n\n"
      - major: '7'
        minor: '3'
        term: '7.3'
        title: DID Paths
        txt: "\nDID Paths\n\nA generic DID path (the did-path rule in section 5.1)\
          \ is identical to a\nURI path and MUST conform to the ABNF of the path-rootless\
          \ ABNF rule in\n  RFC 3986 . A DID path\nSHOULD be used to address resources\
          \ available via a DID service\nendpoint. See section 6.6.\n\n\nA specific\
          \ DID scheme MAY specify ABNF rules for DID paths that are more\nrestrictive\
          \ than the generic rules in this section.\n\n\n"
  Delete/Revoke:
    count: 3
    mappings:
      90b650a66ad91164ba2ccc0da8ade5626d06c6e5f6c3a5b72fe4a4c38bee1234:
      - major: '9'
        minor: '4'
        term: '9.4'
        title: Delete/Revoke
        txt: "\nDelete/Revoke\n\n\n    \n      Although a core feature of distributed\
          \ ledgers is immutability, the DID method specification MUST specify how\
          \ a client can revoke a DID record on the target system, including all cryptographic\
          \ operations necessary to establish proof of revocation.\n\n\n\n\n\n"
      - major: '9'
        minor: '4'
        term: '9.4'
        title: Delete/Revoke
        txt: "\nDelete/Revoke\n\n\n    \n      Although a core feature of distributed\
          \ ledgers is immutability, the DID method specification MUST specify how\
          \ a client can revoke a DID record on the target system, including all cryptographic\
          \ operations necessary to establish proof of revocation.\n\n\n\n\n\n"
      - major: '9'
        minor: '4'
        term: '9.4'
        title: Delete/Revoke
        txt: "\nDelete/Revoke\n\n\n    \n      Although a core feature of distributed\
          \ ledgers is immutability, the DID method specification MUST specify how\
          \ a client can revoke a DID record on the target system, including all cryptographic\
          \ operations necessary to establish proof of revocation.\n\n\n\n\n\n"
  Design Goals & Principles:
    count: 3
    mappings:
      26c0130168baac6038b8dff9d54b0ebd9ab4b5f382e81eb117df415fe52fb805:
      - major: '6'
        minor: '0'
        term: '6.0'
        title: Design Goals & Principles
        txt: "\nDesign Goals & Principles\n\nThis section summarizes the design goals\
          \ and principles of DID\narchitecture.\n\n\n\n\n\n\n          #\n      \
          \  \n\n\n\n          Principle\n        \n\n\n\n          Description\n\
          \        \n\n\n\n\n\n          1\n        \n\n\n\n          Decentralization\n\
          \        \n\n\n\n          DID architecture should eliminate the requirement\
          \ for\n          centralized authorities or single points of failure in\
          \ identity\n          management, including the registration of globally\
          \ unique\n          identifiers, public verification keys, service endpoints,\
          \ and\n          other metadata.\n        \n\n\n\n\n\n          2\n    \
          \    \n\n\n\n          Self-Sovereignty\n        \n\n\n\n          DID architecture\
          \ should give identity owners the power to\n          directly own and control\
          \ their own digital identities without\n          the need to rely on external\
          \ authorities.\n        \n\n\n\n\n\n          3\n        \n\n\n\n      \
          \    Privacy\n        \n\n\n\n          DID architecture should enable identity\
          \ owners to control the\n          privacy of their digital identities,\
          \ including selective\n          disclosure of attributes or other identity\
          \ data.\n        \n\n\n\n\n\n          4\n        \n\n\n\n          Security\n\
          \        \n\n\n\n          DID architecture should provide sufficient security\
          \ for relying\n          parties to rely on DID records to their required\
          \ level of\n          assurance.\n        \n\n\n\n\n\n          5\n    \
          \    \n\n\n\n          Cryptography\n        \n\n\n\n          DID architecture\
          \ should enable an identity owner to provide\n          cryptographic proof\
          \ of ownership and proof of access control\n          rights.\n        \n\
          \n\n\n\n\n          6\n        \n\n\n\n          Discoverability\n     \
          \   \n\n\n\n          DID architecture should make it possible for entities\
          \ to\n          discover DID records for other entities to learn more about\
          \ or\n          interact with those entities.\n        \n\n\n\n\n\n    \
          \      7\n        \n\n\n\n          Interoperability\n        \n\n\n\n \
          \         DID architecture should use interoperable standards so DIDs and\n\
          \          DID record infrastructure can make use of existing tools and\n\
          \          software libraries designed for interoperability.\n        \n\
          \n\n\n\n\n          8\n        \n\n\n\n          Portability\n        \n\
          \n\n\n          DID architecture should be system-independent and enable\n\
          \          identity owners to use their digital identities with any system\n\
          \          that supports DIDs and DIDM.\n        \n\n\n\n\n\n          9\n\
          \        \n\n\n\n          Simplicity\n        \n\n\n\n          To meet\
          \ these design goals, DID architecture should be (to\n          paraphrase\
          \ Albert Einstein) \"as simple as possible but no\n          simpler\".\n\
          \        \n\n\n\n\n\n          10\n        \n\n\n\n          Extensibility\n\
          \        \n\n\n\n          When possible, DID architecture should enable\
          \ extensibility\n          provided it does not hinder interoperability,\
          \ portability or\n          simplicity.\n        \n\n\n\n\n\n"
      - major: '6'
        minor: '0'
        term: '6.0'
        title: Design Goals & Principles
        txt: "\nDesign Goals & Principles\n\nThis section summarizes the design goals\
          \ and principles of DID\narchitecture.\n\n\n\n\n\n\n          #\n      \
          \  \n\n\n\n          Principle\n        \n\n\n\n          Description\n\
          \        \n\n\n\n\n\n          1\n        \n\n\n\n          Decentralization\n\
          \        \n\n\n\n          DID architecture should eliminate the requirement\
          \ for\n          centralized authorities or single points of failure in\
          \ identity\n          management, including the registration of globally\
          \ unique\n          identifiers, public verification keys, service endpoints,\
          \ and\n          other metadata.\n        \n\n\n\n\n\n          2\n    \
          \    \n\n\n\n          Self-Sovereignty\n        \n\n\n\n          DID architecture\
          \ should give identity owners the power to\n          directly own and control\
          \ their own digital identities without\n          the need to rely on external\
          \ authorities.\n        \n\n\n\n\n\n          3\n        \n\n\n\n      \
          \    Privacy\n        \n\n\n\n          DID architecture should enable identity\
          \ owners to control the\n          privacy of their digital identities,\
          \ including selective\n          disclosure of attributes or other identity\
          \ data.\n        \n\n\n\n\n\n          4\n        \n\n\n\n          Security\n\
          \        \n\n\n\n          DID architecture should provide sufficient security\
          \ for relying\n          parties to rely on DID records to their required\
          \ level of\n          assurance.\n        \n\n\n\n\n\n          5\n    \
          \    \n\n\n\n          Cryptography\n        \n\n\n\n          DID architecture\
          \ should enable an identity owner to provide\n          cryptographic proof\
          \ of ownership and proof of access control\n          rights.\n        \n\
          \n\n\n\n\n          6\n        \n\n\n\n          Discoverability\n     \
          \   \n\n\n\n          DID architecture should make it possible for entities\
          \ to\n          discover DID records for other entities to learn more about\
          \ or\n          interact with those entities.\n        \n\n\n\n\n\n    \
          \      7\n        \n\n\n\n          Interoperability\n        \n\n\n\n \
          \         DID architecture should use interoperable standards so DIDs and\n\
          \          DID record infrastructure can make use of existing tools and\n\
          \          software libraries designed for interoperability.\n        \n\
          \n\n\n\n\n          8\n        \n\n\n\n          Portability\n        \n\
          \n\n\n          DID architecture should be system-independent and enable\n\
          \          identity owners to use their digital identities with any system\n\
          \          that supports DIDs and DIDM.\n        \n\n\n\n\n\n          9\n\
          \        \n\n\n\n          Simplicity\n        \n\n\n\n          To meet\
          \ these design goals, DID architecture should be (to\n          paraphrase\
          \ Albert Einstein) \"as simple as possible but no\n          simpler\".\n\
          \        \n\n\n\n\n\n          10\n        \n\n\n\n          Extensibility\n\
          \        \n\n\n\n          When possible, DID architecture should enable\
          \ extensibility\n          provided it does not hinder interoperability,\
          \ portability or\n          simplicity.\n        \n\n\n\n\n\n"
      - major: '6'
        minor: '0'
        term: '6.0'
        title: Design Goals & Principles
        txt: "\nDesign Goals & Principles\n\nThis section summarizes the design goals\
          \ and principles of DID\narchitecture.\n\n\n\n\n\n\n          #\n      \
          \  \n\n\n\n          Principle\n        \n\n\n\n          Description\n\
          \        \n\n\n\n\n\n          1\n        \n\n\n\n          Decentralization\n\
          \        \n\n\n\n          DID architecture should eliminate the requirement\
          \ for\n          centralized authorities or single points of failure in\
          \ identity\n          management, including the registration of globally\
          \ unique\n          identifiers, public verification keys, service endpoints,\
          \ and\n          other metadata.\n        \n\n\n\n\n\n          2\n    \
          \    \n\n\n\n          Self-Sovereignty\n        \n\n\n\n          DID architecture\
          \ should give identity owners the power to\n          directly own and control\
          \ their own digital identities without\n          the need to rely on external\
          \ authorities.\n        \n\n\n\n\n\n          3\n        \n\n\n\n      \
          \    Privacy\n        \n\n\n\n          DID architecture should enable identity\
          \ owners to control the\n          privacy of their digital identities,\
          \ including selective\n          disclosure of attributes or other identity\
          \ data.\n        \n\n\n\n\n\n          4\n        \n\n\n\n          Security\n\
          \        \n\n\n\n          DID architecture should provide sufficient security\
          \ for relying\n          parties to rely on DID records to their required\
          \ level of\n          assurance.\n        \n\n\n\n\n\n          5\n    \
          \    \n\n\n\n          Cryptography\n        \n\n\n\n          DID architecture\
          \ should enable an identity owner to provide\n          cryptographic proof\
          \ of ownership and proof of access control\n          rights.\n        \n\
          \n\n\n\n\n          6\n        \n\n\n\n          Discoverability\n     \
          \   \n\n\n\n          DID architecture should make it possible for entities\
          \ to\n          discover DID records for other entities to learn more about\
          \ or\n          interact with those entities.\n        \n\n\n\n\n\n    \
          \      7\n        \n\n\n\n          Interoperability\n        \n\n\n\n \
          \         DID architecture should use interoperable standards so DIDs and\n\
          \          DID record infrastructure can make use of existing tools and\n\
          \          software libraries designed for interoperability.\n        \n\
          \n\n\n\n\n          8\n        \n\n\n\n          Portability\n        \n\
          \n\n\n          DID architecture should be system-independent and enable\n\
          \          identity owners to use their digital identities with any system\n\
          \          that supports DIDs and DIDM.\n        \n\n\n\n\n\n          9\n\
          \        \n\n\n\n          Simplicity\n        \n\n\n\n          To meet\
          \ these design goals, DID architecture should be (to\n          paraphrase\
          \ Albert Einstein) \"as simple as possible but no\n          simpler\".\n\
          \        \n\n\n\n\n\n          10\n        \n\n\n\n          Extensibility\n\
          \        \n\n\n\n          When possible, DID architecture should enable\
          \ extensibility\n          provided it does not hinder interoperability,\
          \ portability or\n          simplicity.\n        \n\n\n\n\n\n"
  Equivalence:
    count: 3
    mappings:
      2576dac5c039499242d7f9e0f87a4277534a8b00dfc4199fb5fba3a1743e5415:
      - major: '13'
        minor: '2'
        term: '13.2'
        title: Equivalence
        txt: "\nEquivalence\n\n\n    \n      Including an equivalence property, such\
          \ as equivID, in DDOs whose value is an array of DIDs would allow identity\
          \ owners to assert two or more DIDs that represent the same identity owner.\
          \ This capability has numerous uses, including supporting migration between\
          \ ledgers and providing forward compatibility of existing DIDs to future\
          \ DLTs. In theory, equivalent DIDs should have the same identity rights,\
          \ allowing\n        verifiable claims\n       made against one DID to apply\
          \ to equivalent DIDs.\n\n    \n      Equivalence was not included in the\
          \ current specification due to the complexity of verifying equivalence across\
          \ different DLTs and different DID methods, and also of aggregating properties\
          \ of equivalent DDOs. However equivalence should be supported in a future\
          \ version of this specification.\n\n\n\n\n\n"
      - major: '13'
        minor: '2'
        term: '13.2'
        title: Equivalence
        txt: "\nEquivalence\n\n\n    \n      Including an equivalence property, such\
          \ as equivID, in DDOs whose value is an array of DIDs would allow identity\
          \ owners to assert two or more DIDs that represent the same identity owner.\
          \ This capability has numerous uses, including supporting migration between\
          \ ledgers and providing forward compatibility of existing DIDs to future\
          \ DLTs. In theory, equivalent DIDs should have the same identity rights,\
          \ allowing\n        verifiable claims\n       made against one DID to apply\
          \ to equivalent DIDs.\n\n    \n      Equivalence was not included in the\
          \ current specification due to the complexity of verifying equivalence across\
          \ different DLTs and different DID methods, and also of aggregating properties\
          \ of equivalent DDOs. However equivalence should be supported in a future\
          \ version of this specification.\n\n\n\n\n\n"
      - major: '13'
        minor: '2'
        term: '13.2'
        title: Equivalence
        txt: "\nEquivalence\n\n\n    \n      Including an equivalence property, such\
          \ as equivID, in DDOs whose value is an array of DIDs would allow identity\
          \ owners to assert two or more DIDs that represent the same identity owner.\
          \ This capability has numerous uses, including supporting migration between\
          \ ledgers and providing forward compatibility of existing DIDs to future\
          \ DLTs. In theory, equivalent DIDs should have the same identity rights,\
          \ allowing\n        verifiable claims\n       made against one DID to apply\
          \ to equivalent DIDs.\n\n    \n      Equivalence was not included in the\
          \ current specification due to the complexity of verifying equivalence across\
          \ different DLTs and different DID methods, and also of aggregating properties\
          \ of equivalent DDOs. However equivalence should be supported in a future\
          \ version of this specification.\n\n\n\n\n\n"
  Herd Privacy:
    count: 3
    mappings:
      c9c0277cd9c3c0a0760447e5dc363d45fb61013602ebbadd6521fa215def82de:
      - major: '12'
        minor: '5'
        term: '12.5'
        title: Herd Privacy
        txt: "\nHerd Privacy\n\n\n    \n      When an entity is indistinguishable\
          \ from others in the herd, privacy is available. When the act of engaging\
          \ privately with another party is by itself a recognizable flag, privacy\
          \ is greatly diminished.\n\n    \n      DIDs and DID methods SHOULD work\
          \ to improve herd privacy, particularly for those who legitimately need\
          \ it most. Choose technologies and human interfaces that default to preserving\
          \ anonymity and pseudonymity. In order to reduce\n        digital fingerprints\n\
          \      , share common settings across client implementations, keep negotiated\
          \ options to a minimum on wire protocols, use encrypted transport layers,\
          \ and pad messages to standard lengths.\n\n\n\n\n\n"
      - major: '12'
        minor: '5'
        term: '12.5'
        title: Herd Privacy
        txt: "\nHerd Privacy\n\n\n    \n      When an entity is indistinguishable\
          \ from others in the herd, privacy is available. When the act of engaging\
          \ privately with another party is by itself a recognizable flag, privacy\
          \ is greatly diminished.\n\n    \n      DIDs and DID methods SHOULD work\
          \ to improve herd privacy, particularly for those who legitimately need\
          \ it most. Choose technologies and human interfaces that default to preserving\
          \ anonymity and pseudonymity. In order to reduce\n        digital fingerprints\n\
          \      , share common settings across client implementations, keep negotiated\
          \ options to a minimum on wire protocols, use encrypted transport layers,\
          \ and pad messages to standard lengths.\n\n\n\n\n\n"
      - major: '12'
        minor: '5'
        term: '12.5'
        title: Herd Privacy
        txt: "\nHerd Privacy\n\n\n    \n      When an entity is indistinguishable\
          \ from others in the herd, privacy is available. When the act of engaging\
          \ privately with another party is by itself a recognizable flag, privacy\
          \ is greatly diminished.\n\n    \n      DIDs and DID methods SHOULD work\
          \ to improve herd privacy, particularly for those who legitimately need\
          \ it most. Choose technologies and human interfaces that default to preserving\
          \ anonymity and pseudonymity. In order to reduce\n        digital fingerprints\n\
          \      , share common settings across client implementations, keep negotiated\
          \ options to a minimum on wire protocols, use encrypted transport layers,\
          \ and pad messages to standard lengths.\n\n\n\n\n\n"
  Keep Personally-Identifiable Information (PII) Off-Ledger:
    count: 3
    mappings:
      6b6d271147cb6d98228abfebe98aee2bfa220058919baee0cf872ce1e33dbd09:
      - major: '12'
        minor: '2'
        term: '12.2'
        title: Keep Personally-Identifiable Information (PII) Off-Ledger
        txt: "\nKeep Personally-Identifiable Information (PII) Off-Ledger\n\n\n  \
          \  \n      If a DID method specification is written for a public ledger\
          \ or network where all DIDs and DDOs will be publicly available, it is STRONGLY\
          \ RECOMMENDED that DDOs contain no PII. All PII should be kept off-ledger\
          \ behind service endpoints under the control of the identity owner. With\
          \ this privacy architecture, PII may be exchanged on a private, peer-to-peer\
          \ basis using communications channels identified and secured by key descriptions\
          \ in DID records. This also enables identity owners and relying parties\
          \ to implement the\n        GDPR\n\n        right to be forgotten\n    \
          \  , as no PII will be written to an immutable ledger.\n\n\n\n\n\n"
      - major: '12'
        minor: '2'
        term: '12.2'
        title: Keep Personally-Identifiable Information (PII) Off-Ledger
        txt: "\nKeep Personally-Identifiable Information (PII) Off-Ledger\n\n\n  \
          \  \n      If a DID method specification is written for a public ledger\
          \ or network where all DIDs and DDOs will be publicly available, it is STRONGLY\
          \ RECOMMENDED that DDOs contain no PII. All PII should be kept off-ledger\
          \ behind service endpoints under the control of the identity owner. With\
          \ this privacy architecture, PII may be exchanged on a private, peer-to-peer\
          \ basis using communications channels identified and secured by key descriptions\
          \ in DID records. This also enables identity owners and relying parties\
          \ to implement the\n        GDPR\n\n        right to be forgotten\n    \
          \  , as no PII will be written to an immutable ledger.\n\n\n\n\n\n"
      - major: '12'
        minor: '2'
        term: '12.2'
        title: Keep Personally-Identifiable Information (PII) Off-Ledger
        txt: "\nKeep Personally-Identifiable Information (PII) Off-Ledger\n\n\n  \
          \  \n      If a DID method specification is written for a public ledger\
          \ or network where all DIDs and DDOs will be publicly available, it is STRONGLY\
          \ RECOMMENDED that DDOs contain no PII. All PII should be kept off-ledger\
          \ behind service endpoints under the control of the identity owner. With\
          \ this privacy architecture, PII may be exchanged on a private, peer-to-peer\
          \ basis using communications channels identified and secured by key descriptions\
          \ in DID records. This also enables identity owners and relying parties\
          \ to implement the\n        GDPR\n\n        right to be forgotten\n    \
          \  , as no PII will be written to an immutable ledger.\n\n\n\n\n\n"
  Key Revocation and Recovery:
    count: 3
    mappings:
      c2bcfce174207975991bc053332c1d6ff81f7f9bb7bc2907ba8ca642785b8467:
      - major: '11'
        minor: '7'
        term: '11.7'
        title: Key Revocation and Recovery
        txt: "\nKey Revocation and Recovery\n\n\n    \n      Section 7 specifies the\
          \ DID operations that must be supported by a DID method specification, including\
          \ revocation of a DDO by replacing it with an updated DDO. In general, checking\
          \ for key revocation on DLT-based methods is expected to be handled in a\
          \ manner similar to checking the balance of a cryptocurrency account on\
          \ a distributed ledger: if the balance is empty, the entire DID is revoked.\n\
          \n    \n      DID method specifications SHOULD enable support for a quorum\
          \ of trusted parties to enable key recovery. Some of the facilities to do\
          \ so are suggested in section 6.5, Proof of Control. Note that not all DID\
          \ method specifications will recognize control from DIDs registered using\
          \ other DID methods and they MAY restrict third-party control to DIDs that\
          \ use the same method.\n\n    \n      Access control and key recovery in\
          \ a DID method specification MAY also include a time lock feature to protect\
          \ against key compromise by maintaining a second track of control for recovery.\
          \ Further specification of this type of control is a matter for future work\
          \ (see section 11.4).\n\n\n\n\n\n"
      - major: '11'
        minor: '7'
        term: '11.7'
        title: Key Revocation and Recovery
        txt: "\nKey Revocation and Recovery\n\n\n    \n      Section 7 specifies the\
          \ DID operations that must be supported by a DID method specification, including\
          \ revocation of a DDO by replacing it with an updated DDO. In general, checking\
          \ for key revocation on DLT-based methods is expected to be handled in a\
          \ manner similar to checking the balance of a cryptocurrency account on\
          \ a distributed ledger: if the balance is empty, the entire DID is revoked.\n\
          \n    \n      DID method specifications SHOULD enable support for a quorum\
          \ of trusted parties to enable key recovery. Some of the facilities to do\
          \ so are suggested in section 6.5, Proof of Control. Note that not all DID\
          \ method specifications will recognize control from DIDs registered using\
          \ other DID methods and they MAY restrict third-party control to DIDs that\
          \ use the same method.\n\n    \n      Access control and key recovery in\
          \ a DID method specification MAY also include a time lock feature to protect\
          \ against key compromise by maintaining a second track of control for recovery.\
          \ Further specification of this type of control is a matter for future work\
          \ (see section 11.4).\n\n\n\n\n\n"
      - major: '11'
        minor: '7'
        term: '11.7'
        title: Key Revocation and Recovery
        txt: "\nKey Revocation and Recovery\n\n\n    \n      Section 7 specifies the\
          \ DID operations that must be supported by a DID method specification, including\
          \ revocation of a DDO by replacing it with an updated DDO. In general, checking\
          \ for key revocation on DLT-based methods is expected to be handled in a\
          \ manner similar to checking the balance of a cryptocurrency account on\
          \ a distributed ledger: if the balance is empty, the entire DID is revoked.\n\
          \n    \n      DID method specifications SHOULD enable support for a quorum\
          \ of trusted parties to enable key recovery. Some of the facilities to do\
          \ so are suggested in section 6.5, Proof of Control. Note that not all DID\
          \ method specifications will recognize control from DIDs registered using\
          \ other DID methods and they MAY restrict third-party control to DIDs that\
          \ use the same method.\n\n    \n      Access control and key recovery in\
          \ a DID method specification MAY also include a time lock feature to protect\
          \ against key compromise by maintaining a second track of control for recovery.\
          \ Further specification of this type of control is a matter for future work\
          \ (see section 11.4).\n\n\n\n\n\n"
  Key and Signature Expiration:
    count: 3
    mappings:
      55eab1cbc9ce812c7ccd67cc28a7391e318b892b49400f1be1cb02fa0fc94e42:
      - major: '11'
        minor: '6'
        term: '11.6'
        title: Key and Signature Expiration
        txt: "\nKey and Signature Expiration\n\n\n    \n      In a decentralized identity\
          \ architecture, there are no centralized authorities to enforce key or signature\
          \ expiration policies. Therefore DID resolvers and other client applications\
          \ SHOULD validate that keys have not expired. Since some use cases may have\
          \ legitimate reasons why already-expired keys can be extended, a key expiration\
          \ SHOULD NOT prevent any further use of the key, and implementations SHOULD\
          \ attempt to update its status upon encountering it in a signature.\n\n\n\
          \n\n\n"
      - major: '11'
        minor: '6'
        term: '11.6'
        title: Key and Signature Expiration
        txt: "\nKey and Signature Expiration\n\n\n    \n      In a decentralized identity\
          \ architecture, there are no centralized authorities to enforce key or signature\
          \ expiration policies. Therefore DID resolvers and other client applications\
          \ SHOULD validate that keys have not expired. Since some use cases may have\
          \ legitimate reasons why already-expired keys can be extended, a key expiration\
          \ SHOULD NOT prevent any further use of the key, and implementations SHOULD\
          \ attempt to update its status upon encountering it in a signature.\n\n\n\
          \n\n\n"
      - major: '11'
        minor: '6'
        term: '11.6'
        title: Key and Signature Expiration
        txt: "\nKey and Signature Expiration\n\n\n    \n      In a decentralized identity\
          \ architecture, there are no centralized authorities to enforce key or signature\
          \ expiration policies. Therefore DID resolvers and other client applications\
          \ SHOULD validate that keys have not expired. Since some use cases may have\
          \ legitimate reasons why already-expired keys can be extended, a key expiration\
          \ SHOULD NOT prevent any further use of the key, and implementations SHOULD\
          \ attempt to update its status upon encountering it in a signature.\n\n\n\
          \n\n\n"
  Non-Repudiation:
    count: 3
    mappings:
      a6e467f6cbc853edc61ab66941cb0adb53c354287ed4f8321c4db1b5ad399339:
      - major: '11'
        minor: '4'
        term: '11.4'
        title: Non-Repudiation
        txt: "\nNon-Repudiation\n\n\n    \n      Non-repudiation of DIDs and DDO updates\
          \ is supported under the assumption that: (1) the identity owner is monitoring\
          \ for unauthorized updates (see section 9.5) and (2) the identity owner\
          \ has had adequate opportunity to revoke malicious updates according to\
          \ the DID method's access control mechanism (section 6.5). This capability\
          \ is further supported if timestamps are included (sections 6.7 and 6.8)\
          \ and the target DLT system supports timestamps.\n\n\n\n\n\n"
      - major: '11'
        minor: '4'
        term: '11.4'
        title: Non-Repudiation
        txt: "\nNon-Repudiation\n\n\n    \n      Non-repudiation of DIDs and DDO updates\
          \ is supported under the assumption that: (1) the identity owner is monitoring\
          \ for unauthorized updates (see section 9.5) and (2) the identity owner\
          \ has had adequate opportunity to revoke malicious updates according to\
          \ the DID method's access control mechanism (section 6.5). This capability\
          \ is further supported if timestamps are included (sections 6.7 and 6.8)\
          \ and the target DLT system supports timestamps.\n\n\n\n\n\n"
      - major: '11'
        minor: '4'
        term: '11.4'
        title: Non-Repudiation
        txt: "\nNon-Repudiation\n\n\n    \n      Non-repudiation of DIDs and DDO updates\
          \ is supported under the assumption that: (1) the identity owner is monitoring\
          \ for unauthorized updates (see section 9.5) and (2) the identity owner\
          \ has had adequate opportunity to revoke malicious updates according to\
          \ the DID method's access control mechanism (section 6.5). This capability\
          \ is further supported if timestamps are included (sections 6.7 and 6.8)\
          \ and the target DLT system supports timestamps.\n\n\n\n\n\n"
  Overview:
    count: 3
    mappings:
      0e1a4b2b660f79e8f1bd5e9807141557f3739a0b2a8679ea496ac97493aa9f7d:
      - major: '3'
        minor: '1'
        term: '3.1'
        title: Overview
        txt: "\nOverview\n\nConventional identity\nmanagement systems are based on\
          \ centralized authorities such as\ncorporate directory services\n  , certificate\n\
          authorities , or domain name\nregistries . From the standpoint of cryptographic\
          \ trust\nverification, each of these centralized authorities serves as its\
          \ own\n  root of trust .\nTo make identity management work across these\
          \ systems requires\nimplementing federated identity\nmanagement .\n\n\n\
          The emergence of distributed ledger technology (DLT), sometimes referred\n\
          to as blockchain technology, provides the opportunity to implement fully\n\
          decentralized identity management. In this ecosystem, all participants\n\
          with identities (called identity owners) share a common root of trust in\n\
          the form of a globally distributed ledger (or a decentralized P2P\nnetwork\
          \ that provides similar capabilities).\n\n\nEach identity owner can be identified\
          \ on a ledger with a key-value\npair . The index key is a DID (decentralized\
          \ identifier) and the\nvalue is its associated DDO (DID description object).\
          \ Together these\nform a DID record. Each DID record is cryptographically\
          \ secured by\nprivate keys under the control of an identity owner (in the\
          \ case of an\nowner-managed identity) or a guardian (in the case of a guardian-managed\n\
          identity). A corresponding public key is published in the DDO using a\n\
          key description. A DDO may also contain a set of service endpoints for\n\
          interacting with the identity owner. Following the dictums of Privacy by\
          \ Design\n  , each identity owner may have as many DID records as necessary,\
          \ to\nrespect the identity owner\u2019s desired separation of identities,\
          \ personas,\nand contexts.\n\n\nTo use a DID with a particular distributed\
          \ ledger or network requires\ndefining a DID method in a separate DID method\
          \ specification. A DID\nmethod specifies the set of rules for how a DID\
          \ is registered, resolved,\nupdated, and revoked on that specific ledger\
          \ or network.\n\n\nThis design eliminates dependence on centralized registries\
          \ for\nidentifiers as well as centralized certificate authorities for key\n\
          management\u2014the standard pattern in hierarchical PKI (public\nkey infrastructure\
          \ ). Because DID records are on a distributed\nledger, each identity owner\
          \ may serve as its own root authority\u2014an\narchitecture referred to\
          \ as \nDPKI (decentralized PKI) .\n\n\nNote that DID methods may also be\
          \ developed for identities registered in\nfederated identity management\
          \ systems. For their part, federated\nidentity systems may add support for\
          \ DIDs. This creates an\ninteroperability bridge between the worlds of centralized,\
          \ federated,\nand decentralized identity.\n\n\n"
      - major: '3'
        minor: '1'
        term: '3.1'
        title: Overview
        txt: "\nOverview\n\nConventional identity\nmanagement systems are based on\
          \ centralized authorities such as\ncorporate directory services\n  , certificate\n\
          authorities , or domain name\nregistries . From the standpoint of cryptographic\
          \ trust\nverification, each of these centralized authorities serves as its\
          \ own\n  root of trust .\nTo make identity management work across these\
          \ systems requires\nimplementing federated identity\nmanagement .\n\n\n\
          The emergence of distributed ledger technology (DLT), sometimes referred\n\
          to as blockchain technology, provides the opportunity to implement fully\n\
          decentralized identity management. In this ecosystem, all participants\n\
          with identities (called identity owners) share a common root of trust in\n\
          the form of a globally distributed ledger (or a decentralized P2P\nnetwork\
          \ that provides similar capabilities).\n\n\nEach identity owner can be identified\
          \ on a ledger with a key-value\npair . The index key is a DID (decentralized\
          \ identifier) and the\nvalue is its associated DDO (DID description object).\
          \ Together these\nform a DID record. Each DID record is cryptographically\
          \ secured by\nprivate keys under the control of an identity owner (in the\
          \ case of an\nowner-managed identity) or a guardian (in the case of a guardian-managed\n\
          identity). A corresponding public key is published in the DDO using a\n\
          key description. A DDO may also contain a set of service endpoints for\n\
          interacting with the identity owner. Following the dictums of Privacy by\
          \ Design\n  , each identity owner may have as many DID records as necessary,\
          \ to\nrespect the identity owner\u2019s desired separation of identities,\
          \ personas,\nand contexts.\n\n\nTo use a DID with a particular distributed\
          \ ledger or network requires\ndefining a DID method in a separate DID method\
          \ specification. A DID\nmethod specifies the set of rules for how a DID\
          \ is registered, resolved,\nupdated, and revoked on that specific ledger\
          \ or network.\n\n\nThis design eliminates dependence on centralized registries\
          \ for\nidentifiers as well as centralized certificate authorities for key\n\
          management\u2014the standard pattern in hierarchical PKI (public\nkey infrastructure\
          \ ). Because DID records are on a distributed\nledger, each identity owner\
          \ may serve as its own root authority\u2014an\narchitecture referred to\
          \ as \nDPKI (decentralized PKI) .\n\n\nNote that DID methods may also be\
          \ developed for identities registered in\nfederated identity management\
          \ systems. For their part, federated\nidentity systems may add support for\
          \ DIDs. This creates an\ninteroperability bridge between the worlds of centralized,\
          \ federated,\nand decentralized identity.\n\n\n"
      - major: '3'
        minor: '1'
        term: '3.1'
        title: Overview
        txt: "\nOverview\n\nConventional identity\nmanagement systems are based on\
          \ centralized authorities such as\ncorporate directory services\n  , certificate\n\
          authorities , or domain name\nregistries . From the standpoint of cryptographic\
          \ trust\nverification, each of these centralized authorities serves as its\
          \ own\n  root of trust .\nTo make identity management work across these\
          \ systems requires\nimplementing federated identity\nmanagement .\n\n\n\
          The emergence of distributed ledger technology (DLT), sometimes referred\n\
          to as blockchain technology, provides the opportunity to implement fully\n\
          decentralized identity management. In this ecosystem, all participants\n\
          with identities (called identity owners) share a common root of trust in\n\
          the form of a globally distributed ledger (or a decentralized P2P\nnetwork\
          \ that provides similar capabilities).\n\n\nEach identity owner can be identified\
          \ on a ledger with a key-value\npair . The index key is a DID (decentralized\
          \ identifier) and the\nvalue is its associated DDO (DID description object).\
          \ Together these\nform a DID record. Each DID record is cryptographically\
          \ secured by\nprivate keys under the control of an identity owner (in the\
          \ case of an\nowner-managed identity) or a guardian (in the case of a guardian-managed\n\
          identity). A corresponding public key is published in the DDO using a\n\
          key description. A DDO may also contain a set of service endpoints for\n\
          interacting with the identity owner. Following the dictums of Privacy by\
          \ Design\n  , each identity owner may have as many DID records as necessary,\
          \ to\nrespect the identity owner\u2019s desired separation of identities,\
          \ personas,\nand contexts.\n\n\nTo use a DID with a particular distributed\
          \ ledger or network requires\ndefining a DID method in a separate DID method\
          \ specification. A DID\nmethod specifies the set of rules for how a DID\
          \ is registered, resolved,\nupdated, and revoked on that specific ledger\
          \ or network.\n\n\nThis design eliminates dependence on centralized registries\
          \ for\nidentifiers as well as centralized certificate authorities for key\n\
          management\u2014the standard pattern in hierarchical PKI (public\nkey infrastructure\
          \ ). Because DID records are on a distributed\nledger, each identity owner\
          \ may serve as its own root authority\u2014an\narchitecture referred to\
          \ as \nDPKI (decentralized PKI) .\n\n\nNote that DID methods may also be\
          \ developed for identities registered in\nfederated identity management\
          \ systems. For their part, federated\nidentity systems may add support for\
          \ DIDs. This creates an\ninteroperability bridge between the worlds of centralized,\
          \ federated,\nand decentralized identity.\n\n\n"
  Read/Verify:
    count: 3
    mappings:
      85d472701a00fe3856d18e0ee4b84d23bcf7ad1ba4d03f9e973185a74693a0e8:
      - major: '9'
        minor: '2'
        term: '9.2'
        title: Read/Verify
        txt: "\nRead/Verify\n\n\n    \n      The DID method specification MUST specify\
          \ how a client uses a DID to request a DDO from the target system, including\
          \ how the client can verify the authenticity of the response.\n\n\n\n\n\n"
      - major: '9'
        minor: '2'
        term: '9.2'
        title: Read/Verify
        txt: "\nRead/Verify\n\n\n    \n      The DID method specification MUST specify\
          \ how a client uses a DID to request a DDO from the target system, including\
          \ how the client can verify the authenticity of the response.\n\n\n\n\n\n"
      - major: '9'
        minor: '2'
        term: '9.2'
        title: Read/Verify
        txt: "\nRead/Verify\n\n\n    \n      The DID method specification MUST specify\
          \ how a client uses a DID to request a DDO from the target system, including\
          \ how the client can verify the authenticity of the response.\n\n\n\n\n\n"
  References:
    count: 3
    mappings:
      4b13f1649cc5b4d1d7b4b74dd1f13bedbeb967e653694b45536615fbbd225245:
      - major: '14'
        minor: '0'
        term: '14.0'
        title: References
        txt: "\nReferences\n\n\n    \n      [ABNF] Augmented BNF for Syntax Specifications:\
          \ ABNF. IETF RFC 5234.\n        https://tools.ietf.org/html/rfc5234\n\n\
          \    \n      [IRI] Internationalized Resource Identifiers. IETF RFC 3987.\n\
          \        https://www.ietf.org/rfc/rfc3987.txt\n\n    \n      [JSON] The\
          \ JavaScript Object Notation (JSON) Data Interchange Format\n        https://tools.ietf.org/html/rfc7159\n\
          \n    \n      [JSON-LD] JSON-LD 1.0.\n        http://www.w3.org/TR/json-ld/\n\
          \n    \n      [LINKED-DATA-SIGNATURES] Draft Community Group Report\n  \
          \      https://w3c-dvcg.github.io/ld-signatures/\n\n    \n      [RFC 3552]\
          \ Guidelines for Writing RFC Text on Security Considerations. IETF RFC 3552.\n\
          \        https://tools.ietf.org/html/rfc3552\n\n    \n      [RFC 6973] Privacy\
          \ Considerations for Internet Protocols. IETF RFC 6973.\n        https://tools.ietf.org/html/rfc6973\n\
          \n    \n      [RFC-KEYWORDS] Key words for use in RFCs to Indicate Requirement\
          \ Levels. IETF RFC 2119.\n        https://www.ietf.org/rfc/rfc2119.txt\n\
          \n    \n      [SBIR-TOPIC] Applicability of Blockchain Technology to Privacy\
          \ Respecting Identity Management. U.S Department of Homeland Security Small\
          \ Business Innovation Research Grant.\n        https://www.sbir.gov/sbirsearch/detail/867797\n\
          \n    \n      [URI] Uniform Resource Identifiers. IETF RFC 3986.\n     \
          \   https://www.ietf.org/rfc/rfc3986.txt\n\n    \n      [URN] URN (Uniform\
          \ Resource Name) Syntax. IETF RFC 2141.\n        https://tools.ietf.org/rfc/rfc2141.txt\n\
          \n    \n      [UUID] A Universally Unique IDentifier (UUID) URN Namespace.\
          \ IETF RFC 4122.\n        https://www.ietf.org/rfc/rfc4122.txt\n\n    \n\
          \      [VCTF] W3C Verifiable Claims Task Force.\n        http://opencreds.org/specs/source/claims-data-model/#expressing-entity-credentials-in-json\n\
          \n    \n      [XDI-CORE] OASIS XDI Core 1.0 Specification Working Draft\
          \ 01\n        http://docs.oasis-open.org/xdi/xdi-core/v1.0/csd01/xdi-core-v1.0-csd01.xml\n\
          \n    \n      [XML-DATETIME] W3C XML Schema Definition Language (XSD) 1.1\
          \ Part 2: Datatypes. W3C Recommendation.\n        https://www.w3.org/TR/xmlschema11-2/\n\
          \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n"
      - major: '14'
        minor: '0'
        term: '14.0'
        title: References
        txt: "\nReferences\n\n\n    \n      [ABNF] Augmented BNF for Syntax Specifications:\
          \ ABNF. IETF RFC 5234.\n        https://tools.ietf.org/html/rfc5234\n\n\
          \    \n      [IRI] Internationalized Resource Identifiers. IETF RFC 3987.\n\
          \        https://www.ietf.org/rfc/rfc3987.txt\n\n    \n      [JSON] The\
          \ JavaScript Object Notation (JSON) Data Interchange Format\n        https://tools.ietf.org/html/rfc7159\n\
          \n    \n      [JSON-LD] JSON-LD 1.0.\n        http://www.w3.org/TR/json-ld/\n\
          \n    \n      [LINKED-DATA-SIGNATURES] Draft Community Group Report\n  \
          \      https://w3c-dvcg.github.io/ld-signatures/\n\n    \n      [RFC 3552]\
          \ Guidelines for Writing RFC Text on Security Considerations. IETF RFC 3552.\n\
          \        https://tools.ietf.org/html/rfc3552\n\n    \n      [RFC 6973] Privacy\
          \ Considerations for Internet Protocols. IETF RFC 6973.\n        https://tools.ietf.org/html/rfc6973\n\
          \n    \n      [RFC-KEYWORDS] Key words for use in RFCs to Indicate Requirement\
          \ Levels. IETF RFC 2119.\n        https://www.ietf.org/rfc/rfc2119.txt\n\
          \n    \n      [SBIR-TOPIC] Applicability of Blockchain Technology to Privacy\
          \ Respecting Identity Management. U.S Department of Homeland Security Small\
          \ Business Innovation Research Grant.\n        https://www.sbir.gov/sbirsearch/detail/867797\n\
          \n    \n      [URI] Uniform Resource Identifiers. IETF RFC 3986.\n     \
          \   https://www.ietf.org/rfc/rfc3986.txt\n\n    \n      [URN] URN (Uniform\
          \ Resource Name) Syntax. IETF RFC 2141.\n        https://tools.ietf.org/rfc/rfc2141.txt\n\
          \n    \n      [UUID] A Universally Unique IDentifier (UUID) URN Namespace.\
          \ IETF RFC 4122.\n        https://www.ietf.org/rfc/rfc4122.txt\n\n    \n\
          \      [VCTF] W3C Verifiable Claims Task Force.\n        http://opencreds.org/specs/source/claims-data-model/#expressing-entity-credentials-in-json\n\
          \n    \n      [XDI-CORE] OASIS XDI Core 1.0 Specification Working Draft\
          \ 01\n        http://docs.oasis-open.org/xdi/xdi-core/v1.0/csd01/xdi-core-v1.0-csd01.xml\n\
          \n    \n      [XML-DATETIME] W3C XML Schema Definition Language (XSD) 1.1\
          \ Part 2: Datatypes. W3C Recommendation.\n        https://www.w3.org/TR/xmlschema11-2/\n\
          \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n"
      - major: '14'
        minor: '0'
        term: '14.0'
        title: References
        txt: "\nReferences\n\n\n    \n      [ABNF] Augmented BNF for Syntax Specifications:\
          \ ABNF. IETF RFC 5234.\n        https://tools.ietf.org/html/rfc5234\n\n\
          \    \n      [IRI] Internationalized Resource Identifiers. IETF RFC 3987.\n\
          \        https://www.ietf.org/rfc/rfc3987.txt\n\n    \n      [JSON] The\
          \ JavaScript Object Notation (JSON) Data Interchange Format\n        https://tools.ietf.org/html/rfc7159\n\
          \n    \n      [JSON-LD] JSON-LD 1.0.\n        http://www.w3.org/TR/json-ld/\n\
          \n    \n      [LINKED-DATA-SIGNATURES] Draft Community Group Report\n  \
          \      https://w3c-dvcg.github.io/ld-signatures/\n\n    \n      [RFC 3552]\
          \ Guidelines for Writing RFC Text on Security Considerations. IETF RFC 3552.\n\
          \        https://tools.ietf.org/html/rfc3552\n\n    \n      [RFC 6973] Privacy\
          \ Considerations for Internet Protocols. IETF RFC 6973.\n        https://tools.ietf.org/html/rfc6973\n\
          \n    \n      [RFC-KEYWORDS] Key words for use in RFCs to Indicate Requirement\
          \ Levels. IETF RFC 2119.\n        https://www.ietf.org/rfc/rfc2119.txt\n\
          \n    \n      [SBIR-TOPIC] Applicability of Blockchain Technology to Privacy\
          \ Respecting Identity Management. U.S Department of Homeland Security Small\
          \ Business Innovation Research Grant.\n        https://www.sbir.gov/sbirsearch/detail/867797\n\
          \n    \n      [URI] Uniform Resource Identifiers. IETF RFC 3986.\n     \
          \   https://www.ietf.org/rfc/rfc3986.txt\n\n    \n      [URN] URN (Uniform\
          \ Resource Name) Syntax. IETF RFC 2141.\n        https://tools.ietf.org/rfc/rfc2141.txt\n\
          \n    \n      [UUID] A Universally Unique IDentifier (UUID) URN Namespace.\
          \ IETF RFC 4122.\n        https://www.ietf.org/rfc/rfc4122.txt\n\n    \n\
          \      [VCTF] W3C Verifiable Claims Task Force.\n        http://opencreds.org/specs/source/claims-data-model/#expressing-entity-credentials-in-json\n\
          \n    \n      [XDI-CORE] OASIS XDI Core 1.0 Specification Working Draft\
          \ 01\n        http://docs.oasis-open.org/xdi/xdi-core/v1.0/csd01/xdi-core-v1.0-csd01.xml\n\
          \n    \n      [XML-DATETIME] W3C XML Schema Definition Language (XSD) 1.1\
          \ Part 2: Datatypes. W3C Recommendation.\n        https://www.w3.org/TR/xmlschema11-2/\n\
          \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n"
  Smart Signatures:
    count: 3
    mappings:
      c39a4595c0ca3f92e28c7f872ae303b5e3be54a696869688d18c329494474d25:
      - major: '13'
        minor: '5'
        term: '13.5'
        title: Smart Signatures
        txt: "\nSmart Signatures\n\n\n    \n      Not all DLTs can support the Proof\
          \ of Control logic in section 6.5. Therefore, in this version of the specification,\
          \ all Proof of Control logic must be delegated to DID method specifications.\
          \ A potential future solution is a\n        Smart Signature\n       specification\
          \ that specifies the code any conformant DLT may implement to process signature\
          \ control logic.\n\n\n\n\n\n"
      - major: '13'
        minor: '5'
        term: '13.5'
        title: Smart Signatures
        txt: "\nSmart Signatures\n\n\n    \n      Not all DLTs can support the Proof\
          \ of Control logic in section 6.5. Therefore, in this version of the specification,\
          \ all Proof of Control logic must be delegated to DID method specifications.\
          \ A potential future solution is a\n        Smart Signature\n       specification\
          \ that specifies the code any conformant DLT may implement to process signature\
          \ control logic.\n\n\n\n\n\n"
      - major: '13'
        minor: '5'
        term: '13.5'
        title: Smart Signatures
        txt: "\nSmart Signatures\n\n\n    \n      Not all DLTs can support the Proof\
          \ of Control logic in section 6.5. Therefore, in this version of the specification,\
          \ all Proof of Control logic must be delegated to DID method specifications.\
          \ A potential future solution is a\n        Smart Signature\n       specification\
          \ that specifies the code any conformant DLT may implement to process signature\
          \ control logic.\n\n\n\n\n\n"
  Specific DID Method Schemes:
    count: 3
    mappings:
      7dbfd0cf915d9d5540e22209355e281a55a5c3951c595ed1f0a7d9595ee43ad5:
      - major: '7'
        minor: '2'
        term: '7.2'
        title: Specific DID Method Schemes
        txt: '

          Specific DID Method Schemes


          A DID method specification MUST define exactly one specific DID scheme

          identified by exactly one method name (the method rule in section 5.1).

          Since DIDs are intended for decentralized identity infrastructure, it is

          NOT RECOMMENDED to establish a registry of unique DID method names.

          Rather the uniqueness of DID method names should be established via

          human consensus, i.e., a specific DID scheme MUST use a method name that

          is unique among all DID method names known to the specification authors

          at the time of publication.



          A list of known DID method names is included in Appendix A.



          Since the method name is part of the DID, it SHOULD be as short as

          practical. A method name of five characters or less is RECOMMENDED. The

          method name MAY reflect the name of the distributed ledger or network to

          which the DID method specification applies.



          The DID method specification for the specific DID scheme MUST specify

          how to generate the specific-idstring component of a DID. The

          specific-idstring value MUST be able to be generated without the use of

          a centralized registry service. The specific-idstring value SHOULD be

          globally unique by itself. The fully qualified DID as defined by the did

          rule in section 5.1 MUST be globally unique.



          If needed, a specific DID scheme MAY define multiple specific

          specific-idstring formats. It is RECOMMENDED that a specific DID scheme

          define as few specific-idstring formats as possible.



          '
      - major: '7'
        minor: '2'
        term: '7.2'
        title: Specific DID Method Schemes
        txt: '

          Specific DID Method Schemes


          A DID method specification MUST define exactly one specific DID scheme

          identified by exactly one method name (the method rule in section 5.1).

          Since DIDs are intended for decentralized identity infrastructure, it is

          NOT RECOMMENDED to establish a registry of unique DID method names.

          Rather the uniqueness of DID method names should be established via

          human consensus, i.e., a specific DID scheme MUST use a method name that

          is unique among all DID method names known to the specification authors

          at the time of publication.



          A list of known DID method names is included in Appendix A.



          Since the method name is part of the DID, it SHOULD be as short as

          practical. A method name of five characters or less is RECOMMENDED. The

          method name MAY reflect the name of the distributed ledger or network to

          which the DID method specification applies.



          The DID method specification for the specific DID scheme MUST specify

          how to generate the specific-idstring component of a DID. The

          specific-idstring value MUST be able to be generated without the use of

          a centralized registry service. The specific-idstring value SHOULD be

          globally unique by itself. The fully qualified DID as defined by the did

          rule in section 5.1 MUST be globally unique.



          If needed, a specific DID scheme MAY define multiple specific

          specific-idstring formats. It is RECOMMENDED that a specific DID scheme

          define as few specific-idstring formats as possible.



          '
      - major: '7'
        minor: '2'
        term: '7.2'
        title: Specific DID Method Schemes
        txt: '

          Specific DID Method Schemes


          A DID method specification MUST define exactly one specific DID scheme

          identified by exactly one method name (the method rule in section 5.1).

          Since DIDs are intended for decentralized identity infrastructure, it is

          NOT RECOMMENDED to establish a registry of unique DID method names.

          Rather the uniqueness of DID method names should be established via

          human consensus, i.e., a specific DID scheme MUST use a method name that

          is unique among all DID method names known to the specification authors

          at the time of publication.



          A list of known DID method names is included in Appendix A.



          Since the method name is part of the DID, it SHOULD be as short as

          practical. A method name of five characters or less is RECOMMENDED. The

          method name MAY reflect the name of the distributed ledger or network to

          which the DID method specification applies.



          The DID method specification for the specific DID scheme MUST specify

          how to generate the specific-idstring component of a DID. The

          specific-idstring value MUST be able to be generated without the use of

          a centralized registry service. The specific-idstring value SHOULD be

          globally unique by itself. The fully qualified DID as defined by the did

          rule in section 5.1 MUST be globally unique.



          If needed, a specific DID scheme MAY define multiple specific

          specific-idstring formats. It is RECOMMENDED that a specific DID scheme

          define as few specific-idstring formats as possible.



          '
  The Role of Human-Friendly Identifiers:
    count: 3
    mappings:
      e5094bb8ba96bb9c07bbc1653a1960eddc2619ee14a25a5be85c2a8cb7fd2fc9:
      - major: '3'
        minor: '4'
        term: '3.4'
        title: The Role of Human-Friendly Identifiers
        txt: "\nThe Role of Human-Friendly Identifiers\n\nDIDs achieve global uniqueness\
          \ without the need for a central\nregistration authority. This comes, however,\
          \ at the cost of human\nmemorability. The algorithms capable of generating\
          \ globally unique\nidentifiers automatically produce random strings of characters\
          \ that have\nno human meaning. This demonstrates the axiom about identifiers\
          \ known as\n  Zooko\u2019s\nTriangle : \"human-meaningful, decentralized,\
          \ secure\u2014pick any two\".\n\n\nThere are of course many use cases where\
          \ it is desirable to discover a\nDID when starting from a human-friendly\
          \ identifier\u2014a natural language\nname, a domain name, or a conventional\
          \ address for a DID owner such as a\nmobile telephone number, email address,\
          \ Twitter handle, or blog URL.\nHowever, the problem of mapping human-friendly\
          \ identifiers to DIDs (and\ndoing so in a way that can be verified and trusted)\
          \ is out-of-scope for\nthis specification.\n\n\nSolutions to this problem\
          \ (and there are many) should be defined in\nseparate specifications that\
          \ reference this specification. It is\nstrongly recommended that such specifications\
          \ carefully consider: (a)\nthe numerous security attacks based on deceiving\
          \ users about the true\nhuman-friendly identifier for a target entity, and\
          \ (b) the privacy\nconsequences of using human-friendly identifiers that\
          \ are inherently\ncorrelatable, especially if they are globally unique.\n\
          \n\n"
      - major: '3'
        minor: '4'
        term: '3.4'
        title: The Role of Human-Friendly Identifiers
        txt: "\nThe Role of Human-Friendly Identifiers\n\nDIDs achieve global uniqueness\
          \ without the need for a central\nregistration authority. This comes, however,\
          \ at the cost of human\nmemorability. The algorithms capable of generating\
          \ globally unique\nidentifiers automatically produce random strings of characters\
          \ that have\nno human meaning. This demonstrates the axiom about identifiers\
          \ known as\n  Zooko\u2019s\nTriangle : \"human-meaningful, decentralized,\
          \ secure\u2014pick any two\".\n\n\nThere are of course many use cases where\
          \ it is desirable to discover a\nDID when starting from a human-friendly\
          \ identifier\u2014a natural language\nname, a domain name, or a conventional\
          \ address for a DID owner such as a\nmobile telephone number, email address,\
          \ Twitter handle, or blog URL.\nHowever, the problem of mapping human-friendly\
          \ identifiers to DIDs (and\ndoing so in a way that can be verified and trusted)\
          \ is out-of-scope for\nthis specification.\n\n\nSolutions to this problem\
          \ (and there are many) should be defined in\nseparate specifications that\
          \ reference this specification. It is\nstrongly recommended that such specifications\
          \ carefully consider: (a)\nthe numerous security attacks based on deceiving\
          \ users about the true\nhuman-friendly identifier for a target entity, and\
          \ (b) the privacy\nconsequences of using human-friendly identifiers that\
          \ are inherently\ncorrelatable, especially if they are globally unique.\n\
          \n\n"
      - major: '3'
        minor: '4'
        term: '3.4'
        title: The Role of Human-Friendly Identifiers
        txt: "\nThe Role of Human-Friendly Identifiers\n\nDIDs achieve global uniqueness\
          \ without the need for a central\nregistration authority. This comes, however,\
          \ at the cost of human\nmemorability. The algorithms capable of generating\
          \ globally unique\nidentifiers automatically produce random strings of characters\
          \ that have\nno human meaning. This demonstrates the axiom about identifiers\
          \ known as\n  Zooko\u2019s\nTriangle : \"human-meaningful, decentralized,\
          \ secure\u2014pick any two\".\n\n\nThere are of course many use cases where\
          \ it is desirable to discover a\nDID when starting from a human-friendly\
          \ identifier\u2014a natural language\nname, a domain name, or a conventional\
          \ address for a DID owner such as a\nmobile telephone number, email address,\
          \ Twitter handle, or blog URL.\nHowever, the problem of mapping human-friendly\
          \ identifiers to DIDs (and\ndoing so in a way that can be verified and trusted)\
          \ is out-of-scope for\nthis specification.\n\n\nSolutions to this problem\
          \ (and there are many) should be defined in\nseparate specifications that\
          \ reference this specification. It is\nstrongly recommended that such specifications\
          \ carefully consider: (a)\nthe numerous security attacks based on deceiving\
          \ users about the true\nhuman-friendly identifier for a target entity, and\
          \ (b) the privacy\nconsequences of using human-friendly identifiers that\
          \ are inherently\ncorrelatable, especially if they are globally unique.\n\
          \n\n"
  Time Locks and DDO Recovery:
    count: 3
    mappings:
      1b864891e17253b868bf0dcdf27befdd5abad4f61a1c6ae9a280ca0b16964a9c:
      - major: '13'
        minor: '4'
        term: '13.4'
        title: Time Locks and DDO Recovery
        txt: "\nTime Locks and DDO Recovery\n\n\n    \n      Section 9.7 mentions\
          \ one possible clever use of time locks to recover control of a DID after\
          \ a key compromise. The technique relies on an ability to override the most\
          \ recent update to a DDO with Proof of Control applied by an earlier version\
          \ of the DDO in order to defeat the attacker. This protection depends on\
          \ adding a\n        time lock (see Bitcoin BIP 65)\n       to protect part\
          \ of the transaction chain, enabling a Proof of Control block to be used\
          \ to recover control. We plan to add support for time locks in a future\
          \ version of this specification.\n\n\n\n\n\n"
      - major: '13'
        minor: '4'
        term: '13.4'
        title: Time Locks and DDO Recovery
        txt: "\nTime Locks and DDO Recovery\n\n\n    \n      Section 9.7 mentions\
          \ one possible clever use of time locks to recover control of a DID after\
          \ a key compromise. The technique relies on an ability to override the most\
          \ recent update to a DDO with Proof of Control applied by an earlier version\
          \ of the DDO in order to defeat the attacker. This protection depends on\
          \ adding a\n        time lock (see Bitcoin BIP 65)\n       to protect part\
          \ of the transaction chain, enabling a Proof of Control block to be used\
          \ to recover control. We plan to add support for time locks in a future\
          \ version of this specification.\n\n\n\n\n\n"
      - major: '13'
        minor: '4'
        term: '13.4'
        title: Time Locks and DDO Recovery
        txt: "\nTime Locks and DDO Recovery\n\n\n    \n      Section 9.7 mentions\
          \ one possible clever use of time locks to recover control of a DID after\
          \ a key compromise. The technique relies on an ability to override the most\
          \ recent update to a DDO with Proof of Control applied by an earlier version\
          \ of the DDO in order to defeat the attacker. This protection depends on\
          \ adding a\n        time lock (see Bitcoin BIP 65)\n       to protect part\
          \ of the transaction chain, enabling a Proof of Control block to be used\
          \ to recover control. We plan to add support for time locks in a future\
          \ version of this specification.\n\n\n\n\n\n"
  Timestamps:
    count: 3
    mappings:
      990b1d2e2b2eb7e5cf8344944740ac1efb890e2e352470b8d1e89e4fd8c31e42:
      - major: '13'
        minor: '3'
        term: '13.3'
        title: Timestamps
        txt: "\nTimestamps\n\n\n    \n      Verifiable timestamps have significant\
          \ utility for identity records. This is a good fit for DLTs, since most\
          \ offer some type of timestamp mechanism. Despite some transactional cost,\
          \ they are the most censorship-resistant transaction ordering systems in\
          \ the world, so they are nearly ideal for DDO timestamping. In some cases\
          \ a DLT's immediate timing is approximate, however their sense of\n    \
          \    \"median time past\" (see Bitcoin BIP 113)\n       can be precisely\
          \ defined.\n\n    \n      A generic DDO timestamping mechanism could would\
          \ work across all DLTs and might operate via a mechanism including either\
          \ individual transactions or transaction batches. The generic mechanism\
          \ was deemed out of scope for this version, although it may be included\
          \ in a future version of this specification.\n\n\n\n\n\n"
      - major: '13'
        minor: '3'
        term: '13.3'
        title: Timestamps
        txt: "\nTimestamps\n\n\n    \n      Verifiable timestamps have significant\
          \ utility for identity records. This is a good fit for DLTs, since most\
          \ offer some type of timestamp mechanism. Despite some transactional cost,\
          \ they are the most censorship-resistant transaction ordering systems in\
          \ the world, so they are nearly ideal for DDO timestamping. In some cases\
          \ a DLT's immediate timing is approximate, however their sense of\n    \
          \    \"median time past\" (see Bitcoin BIP 113)\n       can be precisely\
          \ defined.\n\n    \n      A generic DDO timestamping mechanism could would\
          \ work across all DLTs and might operate via a mechanism including either\
          \ individual transactions or transaction batches. The generic mechanism\
          \ was deemed out of scope for this version, although it may be included\
          \ in a future version of this specification.\n\n\n\n\n\n"
      - major: '13'
        minor: '3'
        term: '13.3'
        title: Timestamps
        txt: "\nTimestamps\n\n\n    \n      Verifiable timestamps have significant\
          \ utility for identity records. This is a good fit for DLTs, since most\
          \ offer some type of timestamp mechanism. Despite some transactional cost,\
          \ they are the most censorship-resistant transaction ordering systems in\
          \ the world, so they are nearly ideal for DDO timestamping. In some cases\
          \ a DLT's immediate timing is approximate, however their sense of\n    \
          \    \"median time past\" (see Bitcoin BIP 113)\n       can be precisely\
          \ defined.\n\n    \n      A generic DDO timestamping mechanism could would\
          \ work across all DLTs and might operate via a mechanism including either\
          \ individual transactions or transaction batches. The generic mechanism\
          \ was deemed out of scope for this version, although it may be included\
          \ in a future version of this specification.\n\n\n\n\n\n"
  Update:
    count: 3
    mappings:
      27e1dc083f32a44b206c10c1782f519c1e2df3548d486aa74fe255e15c4746a0:
      - major: '9'
        minor: '3'
        term: '9.3'
        title: Update
        txt: "\nUpdate\n\n\n    \n      The DID method specification MUST specify\
          \ how a client can update a DID record on the target system, including all\
          \ cryptographic operations necessary to establish proof of control.\n\n\n\
          \n\n\n"
      - major: '9'
        minor: '3'
        term: '9.3'
        title: Update
        txt: "\nUpdate\n\n\n    \n      The DID method specification MUST specify\
          \ how a client can update a DID record on the target system, including all\
          \ cryptographic operations necessary to establish proof of control.\n\n\n\
          \n\n\n"
      - major: '9'
        minor: '3'
        term: '9.3'
        title: Update
        txt: "\nUpdate\n\n\n    \n      The DID method specification MUST specify\
          \ how a client can update a DID record on the target system, including all\
          \ cryptographic operations necessary to establish proof of control.\n\n\n\
          \n\n\n"
  Upper Limits on DID Character Length:
    count: 3
    mappings:
      cedd8e0a2b6b1b6c977327a9c4bf109c89ddf9905760cede4f68a3a6eb2b58d1:
      - major: '13'
        minor: '1'
        term: '13.1'
        title: Upper Limits on DID Character Length
        txt: "\nUpper Limits on DID Character Length\n\n\n    \n      The current\
          \ specification does not take a position on maximum length of a DID. The\
          \ maximum interoperable URL length is currently about 2K characters. QR\
          \ codes can handle about 4K characters. Clients using DIDs will be responsible\
          \ for storing many DIDs, and some methods would be able to externalize some\
          \ of their costs onto clients by relying on more complicated signature schemes\
          \ or by adding state into DIDs intended for temporary use. A future version\
          \ of this specification should set reasonable limits on DID character length\
          \ to minimize externalities.\n\n\n\n\n\n"
      - major: '13'
        minor: '1'
        term: '13.1'
        title: Upper Limits on DID Character Length
        txt: "\nUpper Limits on DID Character Length\n\n\n    \n      The current\
          \ specification does not take a position on maximum length of a DID. The\
          \ maximum interoperable URL length is currently about 2K characters. QR\
          \ codes can handle about 4K characters. Clients using DIDs will be responsible\
          \ for storing many DIDs, and some methods would be able to externalize some\
          \ of their costs onto clients by relying on more complicated signature schemes\
          \ or by adding state into DIDs intended for temporary use. A future version\
          \ of this specification should set reasonable limits on DID character length\
          \ to minimize externalities.\n\n\n\n\n\n"
      - major: '13'
        minor: '1'
        term: '13.1'
        title: Upper Limits on DID Character Length
        txt: "\nUpper Limits on DID Character Length\n\n\n    \n      The current\
          \ specification does not take a position on maximum length of a DID. The\
          \ maximum interoperable URL length is currently about 2K characters. QR\
          \ codes can handle about 4K characters. Clients using DIDs will be responsible\
          \ for storing many DIDs, and some methods would be able to externalize some\
          \ of their costs onto clients by relying on more complicated signature schemes\
          \ or by adding state into DIDs intended for temporary use. A future version\
          \ of this specification should set reasonable limits on DID character length\
          \ to minimize externalities.\n\n\n\n\n\n"
4:
  'Appendix A: Proposed DID Method Specifications':
    count: 4
    mappings:
      2bf7059dd6a6d3c531f211f5d635533abe0330e29ac7908c9995398af9f16968:
      - major: '15'
        minor: '0'
        term: '15.0'
        title: 'Appendix A: Proposed DID Method Specifications'
        txt: "\nAppendix A: Proposed DID Method Specifications\n\n\n    \n      This\
          \ table summarizes the DID method specifications currently in development.\
          \ The links will be updated as subsequent Implementer\u2019s Drafts are\
          \ produced.\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n          Method Name\n\
          \        \n\n\n\n          DLT or Network\n        \n\n\n\n          Authors\n\
          \        \n\n\n\n          Link\n        \n\n\n\n\n\n          did:example:\n\
          \        \n\n\n\n          Sovrin\n        \n\n\n\n          Sovrin Foundation\n\
          \        \n\n\n\n          https://docs.google.com/document/d/1X7dWpVvskGRpk05yyPEMd1uqaJ9FnOzoeWMdwzdIFyU/edit#\n\
          \        \n\n\n\n\n\n          did:btc1:\n        \n\n\n\n          Bitcoin\n\
          \        \n\n\n\n          Christopher Allen\n        \n\n\n\n\n\n\n\n \
          \         did:uport\n        \n\n\n\n          Ethereum\n        \n\n\n\n\
          \          uPort\n        \n\n\n\n\n\n\n\n          did:cnsnt:\n       \
          \ \n\n\n\n          Ethereum\n        \n\n\n\n          Consent\n      \
          \  \n\n\n\n\n\n\n\n"
      - major: '15'
        minor: '0'
        term: '15.0'
        title: 'Appendix A: Proposed DID Method Specifications'
        txt: "\nAppendix A: Proposed DID Method Specifications\n\n\n    \n      This\
          \ table summarizes the DID method specifications currently in development.\
          \ The links will be updated as subsequent Implementer\u2019s Drafts are\
          \ produced.\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n          Method Name\n\
          \        \n\n\n\n          DLT or Network\n        \n\n\n\n          Authors\n\
          \        \n\n\n\n          Link\n        \n\n\n\n\n\n          did:example:\n\
          \        \n\n\n\n          Sovrin\n        \n\n\n\n          Sovrin Foundation\n\
          \        \n\n\n\n          https://docs.google.com/document/d/1X7dWpVvskGRpk05yyPEMd1uqaJ9FnOzoeWMdwzdIFyU/edit#\n\
          \        \n\n\n\n\n\n          did:btc1:\n        \n\n\n\n          Bitcoin\n\
          \        \n\n\n\n          Christopher Allen\n        \n\n\n\n\n\n\n\n \
          \         did:uport\n        \n\n\n\n          Ethereum\n        \n\n\n\n\
          \          uPort\n        \n\n\n\n\n\n\n\n          did:cnsnt:\n       \
          \ \n\n\n\n          Ethereum\n        \n\n\n\n          Consent\n      \
          \  \n\n\n\n\n\n\n\n"
      - major: '15'
        minor: '0'
        term: '15.0'
        title: 'Appendix A: Proposed DID Method Specifications'
        txt: "\nAppendix A: Proposed DID Method Specifications\n\n\n    \n      This\
          \ table summarizes the DID method specifications currently in development.\
          \ The links will be updated as subsequent Implementer\u2019s Drafts are\
          \ produced.\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n          Method Name\n\
          \        \n\n\n\n          DLT or Network\n        \n\n\n\n          Authors\n\
          \        \n\n\n\n          Link\n        \n\n\n\n\n\n          did:example:\n\
          \        \n\n\n\n          Sovrin\n        \n\n\n\n          Sovrin Foundation\n\
          \        \n\n\n\n          https://docs.google.com/document/d/1X7dWpVvskGRpk05yyPEMd1uqaJ9FnOzoeWMdwzdIFyU/edit#\n\
          \        \n\n\n\n\n\n          did:btc1:\n        \n\n\n\n          Bitcoin\n\
          \        \n\n\n\n          Christopher Allen\n        \n\n\n\n\n\n\n\n \
          \         did:uport\n        \n\n\n\n          Ethereum\n        \n\n\n\n\
          \          uPort\n        \n\n\n\n\n\n\n\n          did:cnsnt:\n       \
          \ \n\n\n\n          Ethereum\n        \n\n\n\n          Consent\n      \
          \  \n\n\n\n\n\n\n\n"
      - major: '15'
        minor: '0'
        term: '15.0'
        title: 'Appendix A: Proposed DID Method Specifications'
        txt: "\nAppendix A: Proposed DID Method Specifications\n\n\n    \n      This\
          \ table summarizes the DID method specifications currently in development.\
          \ The links will be updated as subsequent Implementer\u2019s Drafts are\
          \ produced.\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n          Method Name\n\
          \        \n\n\n\n          DLT or Network\n        \n\n\n\n          Authors\n\
          \        \n\n\n\n          Link\n        \n\n\n\n\n\n          did:example:\n\
          \        \n\n\n\n          Sovrin\n        \n\n\n\n          Sovrin Foundation\n\
          \        \n\n\n\n          https://docs.google.com/document/d/1X7dWpVvskGRpk05yyPEMd1uqaJ9FnOzoeWMdwzdIFyU/edit#\n\
          \        \n\n\n\n\n\n          did:btc1:\n        \n\n\n\n          Bitcoin\n\
          \        \n\n\n\n          Christopher Allen\n        \n\n\n\n\n\n\n\n \
          \         did:uport\n        \n\n\n\n          Ethereum\n        \n\n\n\n\
          \          uPort\n        \n\n\n\n\n\n\n\n          did:cnsnt:\n       \
          \ \n\n\n\n          Ethereum\n        \n\n\n\n          Consent\n      \
          \  \n\n\n\n\n\n\n\n"
  'Appendix C: Standard Key Descriptions':
    count: 4
    mappings:
      2742fd4e723f634a972e9b4a494e86e18c30530b1f56b9285fbb977dd14c4217:
      - major: '17'
        minor: '0'
        term: '17.0'
        title: 'Appendix C: Standard Key Descriptions'
        txt: "\nAppendix C: Standard Key Descriptions\n\nAs described in section 6,\
          \ key description is a standard way to describe\na public key or verification\
          \ key in JSON-LD. This appendix contains a\nlist of key descriptions recommended\
          \ for use in DDOs.\n\n\nRSA Keys\n\n      {\n      \"owner\": [{\n     \
          \       \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\",\n        \
          \    \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n            \"\
          expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\": \"\
          MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n\nEdDSA Keys\n\n  {\n\n\n      \"owner\": [{\n\
          \            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\",\n   \
          \         \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n    \
          \        \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }]\n\n\n\n\n"
      - major: '17'
        minor: '0'
        term: '17.0'
        title: 'Appendix C: Standard Key Descriptions'
        txt: "\nAppendix C: Standard Key Descriptions\n\nAs described in section 6,\
          \ key description is a standard way to describe\na public key or verification\
          \ key in JSON-LD. This appendix contains a\nlist of key descriptions recommended\
          \ for use in DDOs.\n\n\nRSA Keys\n\n      {\n      \"owner\": [{\n     \
          \       \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\",\n        \
          \    \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n            \"\
          expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\": \"\
          MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n\nEdDSA Keys\n\n  {\n\n\n      \"owner\": [{\n\
          \            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\",\n   \
          \         \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n    \
          \        \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }]\n\n\n\n\n"
      - major: '17'
        minor: '0'
        term: '17.0'
        title: 'Appendix C: Standard Key Descriptions'
        txt: "\nAppendix C: Standard Key Descriptions\n\nAs described in section 6,\
          \ key description is a standard way to describe\na public key or verification\
          \ key in JSON-LD. This appendix contains a\nlist of key descriptions recommended\
          \ for use in DDOs.\n\n\nRSA Keys\n\n      {\n      \"owner\": [{\n     \
          \       \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\",\n        \
          \    \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n            \"\
          expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\": \"\
          MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n\nEdDSA Keys\n\n  {\n\n\n      \"owner\": [{\n\
          \            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\",\n   \
          \         \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n    \
          \        \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }]\n\n\n\n\n"
      - major: '17'
        minor: '0'
        term: '17.0'
        title: 'Appendix C: Standard Key Descriptions'
        txt: "\nAppendix C: Standard Key Descriptions\n\nAs described in section 6,\
          \ key description is a standard way to describe\na public key or verification\
          \ key in JSON-LD. This appendix contains a\nlist of key descriptions recommended\
          \ for use in DDOs.\n\n\nRSA Keys\n\n      {\n      \"owner\": [{\n     \
          \       \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\",\n        \
          \    \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n            \"\
          expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\": \"\
          MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n\nEdDSA Keys\n\n  {\n\n\n      \"owner\": [{\n\
          \            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/1\",\n   \
          \         \"type\": [\"CryptographicKey\", \"EdDsaSAPublicKey\"],\n    \
          \        \"curve\": \"ed25519\",\n            \"expires\": \"2017-02-08T16:02:20Z\"\
          ,\n            \"publicKeyBase64\": \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }]\n\n\n\n\n"
  EdDSA Keys:
    count: 4
    mappings:
      bb5a1e415084dd7c178d6ffcbddd059cb94d887f8b9d88048c45f354c1b8a530:
      - major: '17'
        minor: '2'
        term: '17.2'
        title: EdDSA Keys
        txt: "\nEdDSA Keys\n\n  {\n\n\n      \"owner\": [{\n            \"id\": \"\
          did:example:21tDAKCERh95uGgKbJNHYp#key/1\",\n            \"type\": [\"CryptographicKey\"\
          , \"EdDsaSAPublicKey\"],\n            \"curve\": \"ed25519\",\n        \
          \    \"expires\": \"2017-02-08T16:02:20Z\",\n            \"publicKeyBase64\"\
          : \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }]\n\n\n\n"
      - major: '17'
        minor: '2'
        term: '17.2'
        title: EdDSA Keys
        txt: "\nEdDSA Keys\n\n  {\n\n\n      \"owner\": [{\n            \"id\": \"\
          did:example:21tDAKCERh95uGgKbJNHYp#key/1\",\n            \"type\": [\"CryptographicKey\"\
          , \"EdDsaSAPublicKey\"],\n            \"curve\": \"ed25519\",\n        \
          \    \"expires\": \"2017-02-08T16:02:20Z\",\n            \"publicKeyBase64\"\
          : \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }]\n\n\n\n"
      - major: '17'
        minor: '2'
        term: '17.2'
        title: EdDSA Keys
        txt: "\nEdDSA Keys\n\n  {\n\n\n      \"owner\": [{\n            \"id\": \"\
          did:example:21tDAKCERh95uGgKbJNHYp#key/1\",\n            \"type\": [\"CryptographicKey\"\
          , \"EdDsaSAPublicKey\"],\n            \"curve\": \"ed25519\",\n        \
          \    \"expires\": \"2017-02-08T16:02:20Z\",\n            \"publicKeyBase64\"\
          : \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }]\n\n\n\n"
      - major: '17'
        minor: '2'
        term: '17.2'
        title: EdDSA Keys
        txt: "\nEdDSA Keys\n\n  {\n\n\n      \"owner\": [{\n            \"id\": \"\
          did:example:21tDAKCERh95uGgKbJNHYp#key/1\",\n            \"type\": [\"CryptographicKey\"\
          , \"EdDsaSAPublicKey\"],\n            \"curve\": \"ed25519\",\n        \
          \    \"expires\": \"2017-02-08T16:02:20Z\",\n            \"publicKeyBase64\"\
          : \"IOmA4R7TfhkYTYW87z640O3GYFldw0yqie9Wl1kZ5OBYNAKOwG5uOsPRK8/2C4STOWF+83cMcbZ3CBMq2/gi25s=\"\
          \n        }]\n\n\n\n"
  RSA Keys:
    count: 4
    mappings:
      73bbdedffe7c1b63b48fcd3a5ecc10cd0f6f2041725e9c986376ab67a710072c:
      - major: '17'
        minor: '1'
        term: '17.1'
        title: RSA Keys
        txt: "\nRSA Keys\n\n      {\n      \"owner\": [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\"\
          : \"MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n"
      - major: '17'
        minor: '1'
        term: '17.1'
        title: RSA Keys
        txt: "\nRSA Keys\n\n      {\n      \"owner\": [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\"\
          : \"MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n"
      - major: '17'
        minor: '1'
        term: '17.1'
        title: RSA Keys
        txt: "\nRSA Keys\n\n      {\n      \"owner\": [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\"\
          : \"MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n"
      - major: '17'
        minor: '1'
        term: '17.1'
        title: RSA Keys
        txt: "\nRSA Keys\n\n      {\n      \"owner\": [{\n            \"id\": \"did:example:21tDAKCERh95uGgKbJNHYp#key/2\"\
          ,\n            \"type\": [\"CryptographicKey\", \"RsaPublicKey\"],\n   \
          \         \"expires\": \"2017-03-22T00:00:00Z\",\n            \"publicKeyBase64\"\
          : \"MIIBOgIBAAJBAKkbSUT9/Q2uBfGRau6/XJyZhcF5abo7b37I5hr3EmwGykdzyk8GSyJK3TOrjyl0sdJsGbFmgQaRyV\"\
          \n        }]\n      }\n\n\n\n"
  sotd:
    count: 4
    mappings:
      3599c9ff541fabc3767b685c066818f397e8a0fd2f30e66e863e4770b611599a:
      - major: '2'
        minor: '0'
        term: '2.0'
        title: sotd
        txt: '


          Comments regarding this document are welcome. Please file issues

          directly on GitHub,

          or send them to

          public-credentials@w3.org

          (subscribe,

          archives).



          '
      - major: '2'
        minor: '0'
        term: '2.0'
        title: sotd
        txt: '


          Comments regarding this document are welcome. Please file issues

          directly on GitHub,

          or send them to

          public-credentials@w3.org

          (subscribe,

          archives).



          '
      - major: '2'
        minor: '0'
        term: '2.0'
        title: sotd
        txt: '


          Comments regarding this document are welcome. Please file issues

          directly on GitHub,

          or send them to

          public-credentials@w3.org

          (subscribe,

          archives).



          '
      - major: '2'
        minor: '0'
        term: '2.0'
        title: sotd
        txt: '


          Comments regarding this document are welcome. Please file issues

          directly on GitHub,

          or send them to

          public-credentials@w3.org

          (subscribe,

          archives).



          '
      4a334a8b1176b441826a3623297ff2d97803a54ebe44ce197890795696585acd:
      - major: '2'
        minor: '0'
        term: '2.0'
        title: sotd
        txt: "\n\nComments regarding this document are welcome. Please file issues\n\
          directly on GitHub,\nor send them to\npublic-credentials@w3.org\n(subscribe,\n\
          archives).\n      \n\n"
5:
  abstract:
    count: 5
    mappings:
      3e27ba99165df0b9d3e149507d2799d82ae954a457abbbbc182ac67699f1d0d8:
      - major: '1'
        minor: '0'
        term: '1.0'
        title: abstract
        txt: "\n\nDIDs (decentralized identifiers) are a new type of identifier intended\n\
          for verifiable digital identity that is \"self-sovereign\", i.e., fully\n\
          under the control of the identity owner and not dependent on a\ncentralized\
          \ registry, identity provider, or certificate authority. DIDs\nresolve to\
          \ DDOs (DID descriptor objects)\u2014simple JSON documents that\ncontain\
          \ all the metadata needed to prove ownership and control of a DID.\nSpecifically,\
          \ a DDO contains a set of key descriptions, which are\nmachine-readable\
          \ descriptions of the identity owner\u2019s public keys, and a\nset of service\
          \ endpoints, which are resource pointers necessary to\ninitiate trusted\
          \ interactions with the identity owner. Each DID uses a\nspecific DID method,\
          \ defined in a separate DID method specification, to\ndefine how the DID\
          \ is registered, resolved, updated, and revoked on a\nspecific distributed\
          \ ledger or network.\n      \n\n"
      - major: '1'
        minor: '0'
        term: '1.0'
        title: abstract
        txt: "\n\nDIDs (decentralized identifiers) are a new type of identifier intended\n\
          for verifiable digital identity that is \"self-sovereign\", i.e., fully\n\
          under the control of the identity owner and not dependent on a\ncentralized\
          \ registry, identity provider, or certificate authority. DIDs\nresolve to\
          \ DDOs (DID descriptor objects)\u2014simple JSON documents that\ncontain\
          \ all the metadata needed to prove ownership and control of a DID.\nSpecifically,\
          \ a DDO contains a set of key descriptions, which are\nmachine-readable\
          \ descriptions of the identity owner\u2019s public keys, and a\nset of service\
          \ endpoints, which are resource pointers necessary to\ninitiate trusted\
          \ interactions with the identity owner. Each DID uses a\nspecific DID method,\
          \ defined in a separate DID method specification, to\ndefine how the DID\
          \ is registered, resolved, updated, and revoked on a\nspecific distributed\
          \ ledger or network.\n      \n\n"
      - major: '1'
        minor: '0'
        term: '1.0'
        title: abstract
        txt: "\n\nDIDs (decentralized identifiers) are a new type of identifier intended\n\
          for verifiable digital identity that is \"self-sovereign\", i.e., fully\n\
          under the control of the identity owner and not dependent on a\ncentralized\
          \ registry, identity provider, or certificate authority. DIDs\nresolve to\
          \ DDOs (DID descriptor objects)\u2014simple JSON documents that\ncontain\
          \ all the metadata needed to prove ownership and control of a DID.\nSpecifically,\
          \ a DDO contains a set of key descriptions, which are\nmachine-readable\
          \ descriptions of the identity owner\u2019s public keys, and a\nset of service\
          \ endpoints, which are resource pointers necessary to\ninitiate trusted\
          \ interactions with the identity owner. Each DID uses a\nspecific DID method,\
          \ defined in a separate DID method specification, to\ndefine how the DID\
          \ is registered, resolved, updated, and revoked on a\nspecific distributed\
          \ ledger or network.\n      \n\n"
      - major: '1'
        minor: '0'
        term: '1.0'
        title: abstract
        txt: "\n\nDIDs (decentralized identifiers) are a new type of identifier intended\n\
          for verifiable digital identity that is \"self-sovereign\", i.e., fully\n\
          under the control of the identity owner and not dependent on a\ncentralized\
          \ registry, identity provider, or certificate authority. DIDs\nresolve to\
          \ DDOs (DID descriptor objects)\u2014simple JSON documents that\ncontain\
          \ all the metadata needed to prove ownership and control of a DID.\nSpecifically,\
          \ a DDO contains a set of key descriptions, which are\nmachine-readable\
          \ descriptions of the identity owner\u2019s public keys, and a\nset of service\
          \ endpoints, which are resource pointers necessary to\ninitiate trusted\
          \ interactions with the identity owner. Each DID uses a\nspecific DID method,\
          \ defined in a separate DID method specification, to\ndefine how the DID\
          \ is registered, resolved, updated, and revoked on a\nspecific distributed\
          \ ledger or network.\n      \n\n"
      - major: '1'
        minor: '0'
        term: '1.0'
        title: abstract
        txt: "\n\nDIDs (decentralized identifiers) are a new type of identifier intended\n\
          for verifiable digital identity that is \"self-sovereign\", i.e., fully\n\
          under the control of the identity owner and not dependent on a\ncentralized\
          \ registry, identity provider, or certificate authority. DIDs\nresolve to\
          \ DDOs (DID descriptor objects)\u2014simple JSON documents that\ncontain\
          \ all the metadata needed to prove ownership and control of a DID.\nSpecifically,\
          \ a DDO contains a set of key descriptions, which are\nmachine-readable\
          \ descriptions of the identity owner\u2019s public keys, and a\nset of service\
          \ endpoints, which are resource pointers necessary to\ninitiate trusted\
          \ interactions with the identity owner. Each DID uses a\nspecific DID method,\
          \ defined in a separate DID method specification, to\ndefine how the DID\
          \ is registered, resolved, updated, and revoked on a\nspecific distributed\
          \ ledger or network.\n      \n\n"

