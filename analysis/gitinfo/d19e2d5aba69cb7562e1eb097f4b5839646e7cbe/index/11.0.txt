
Future Work

Upper Limits on DID Character Length



      The current specification does not take a position on maximum length of a DID. The maximum interoperable URL length is currently about 2K characters. QR codes can handle about 4K characters. Clients using DIDs will be responsible for storing many DIDs, and some methods would be able to externalize some of their costs onto clients by relying on more complicated signature schemes or by adding state into DIDs intended for temporary use. A future version of this specification should set reasonable limits on DID character length to minimize externalities.






Equivalence



      Including an equivalence property, such as equivID, in DID Descriptions whose value is an array of DIDs would allow identity owners to assert two or more DIDs that represent the same identity owner. This capability has numerous uses, including supporting migration between ledgers and providing forward compatibility of existing DIDs to future DLTs. In theory, equivalent DIDs should have the same identity rights, allowing
        verifiable claims
       made against one DID to apply to equivalent DIDs.


      Equivalence was not included in the current specification due to the complexity of verifying equivalence across different DLTs and different DID methods, and also of aggregating properties of equivalent DID Descriptions. However equivalence should be supported in a future version of this specification.






Timestamps



      Verifiable timestamps have significant utility for identity records. This is a good fit for DLTs, since most offer some type of timestamp mechanism. Despite some transactional cost, they are the most censorship-resistant transaction ordering systems in the world, so they are nearly ideal for DID Description timestamping. In some cases a DLT's immediate timing is approximate, however their sense of
        "median time past" (see Bitcoin BIP 113)
       can be precisely defined.


      A generic DID Description timestamping mechanism could would work across all DLTs and might operate via a mechanism including either individual transactions or transaction batches. The generic mechanism was deemed out of scope for this version, although it may be included in a future version of this specification.






Time Locks and DID Description Recovery



      Section 9.7 mentions one possible clever use of time locks to recover control of a DID after a key compromise. The technique relies on an ability to override the most recent update to a DID Description with Authorization applied by an earlier version of the DID Description in order to defeat the attacker. This protection depends on adding a
        time lock (see Bitcoin BIP 65)
       to protect part of the transaction chain, enabling a Authorization block to be used to recover control. We plan to add support for time locks in a future version of this specification.






Smart Signatures



      Not all DLTs can support the Authorization logic in section 6.5. Therefore, in this version of the specification, all Authorization logic must be delegated to DID method specifications. A potential future solution is a
        Smart Signature
       specification that specifies the code any conformant DLT may implement to process signature control logic.






Verifiable Claims


      Although DIDs and DID Descriptions form a foundation for decentralized identity, they are only the first step in describing an identity owner. The rest of the descriptive power comes through collecting and selectively using
        verifiable claims
      . Future versions of the specification will describe in more detail how DIDs and DID Description can be integrated with—and help enable—the verifiable claims ecosystem.






Alternate Serializations and Graph Models



      This version of the specification relies on JSON-LD and the RDF graph model for expressing a DID Description. Future versions of this specification MAY specify other semantic graph formats for a DID Description, such as JXD (JSON XDI Data), a serialization format for the XDI graph model as defined by the
        OASIS XDI Core 1.0 specification
      .






